svm.train.best = predict(svm.model.best,new_trainset[,-3])
e.test.best = crossprod(svm.test.best - unlist(new_testset[,3]))/nrow(new_testset)
e.train.best = crossprod(svm.train.best - unlist(new_trainset[,3]))/nrow(new_trainset)
?sample
set.seed(1)
half_index = sample(nrow(new_trainset),ceiling(nrow(new_trainset)/2))
lllll = svm_para(new_trainset[half_index,],new_testset)
View(lllll)
svm.model.new.half = svm(rent~.,data = new_trainset[half_index,],cost = 10,gamma = 0.0078125,cross = 5)
svm.test.half = predict(svm.model.new.half,new_testset[,-3])
e.test.half = crossprod(svm.test.half - unlist(new_testset[,3]))/nrow(new_testset)
length(half_index)
svm.train.half = predict(svm.model.new.half,new_trainset[half_index,-3])
e.train.half = crossprod(svm.train.half - unlist(new_trainset[half_index,3]))/length(half_index)
result_compare.test = cbind(svm.test,new_general_info[year == 2017,c("rent","shop_name","year")])
View(new_general_info)
result_compare.test = cbind(svm.test,new_general_info[year == 2017,c("rent","mall_name","year")])
result_compare.test = cbind(svm.test,new_general_info[new_general_info$year == 2017,c("rent","mall_name","year")])
View(result_compare.test)
result_compare.test = data.table(result_compare.test)
result_compare.test[c("diff","percent"):= list(svm.test-rent,(svm.test-rent)/rent)]
result_compare.test = data.table(result_compare.test)
result_compare.test[c("diff","percent"):= list(svm.test-rent,(svm.test-rent)/rent)]
result_compare.test[,c("diff","percent"):= list(svm.test-rent,(svm.test-rent)/rent)]
View(result_compare.test)
c(1,2,3)/c(4,5,6)
std(c(1,2,3))
sd(c(1,2,3))
?sd
source('~/R_Projects/SVM/Rfile/test_svm.R')
cl = svm_para_percent(new_trainset,new_testset)
source('~/R_Projects/SVM/Rfile/test_svm.R')
cl = svm_para_percent(new_trainset,new_testset)
View(cl)
source('~/R_Projects/SVM/Rfile/test_svm.R')
cl = svm_para_percent(new_trainset,new_testset)
df
df1 = data.table (c=1,d=2)
df2 = df1
df3 = df1
rbind(df1,df2,df3)
source('~/R_Projects/SVM/Rfile/test_svm.R')
cl = svm_para_percent(new_trainset,new_testset)
View(cl)
View(cl)
source('~/R_Projects/SVM/Rfile/test_svm.R')
cl = svm_para_percent(new_trainset,new_testset)
View(cl)
source('~/R_Projects/SVM/Rfile/test_svm.R')
cl = svm_para_percent(new_trainset,new_testset)
View(cl)
6.4000e+01
svm.model.percent = svm(rent~.,data = new_trainset,cost = 0.1,gamma = 64,cross = 5)
svm.percent = predict(svm.model.percent,new_testset[,-3])
result_compare.percent = cbind(svm.percent,new_general_info[new_general_info$year == 2017,c("rent","mall_name","year")])
result_compare.percent = data.table(result_compare.percent)
result_compare.percent[,c("diff","percent"):= list(result_compare.percent-rent,(result_compare.percent-rent)/rent)]
View(result_compare.percent)
str(result_compare.percent)
result_compare.percent[,c("diff","percent"):= list(result_compare.percent-rent,(result_compare.percent-rent)/rent)]
result_compare.percent[,result_compare.percent-rent]
result_compare.percent[,c("diff","percent"):= list(svm.percent-rent,(svm.percent-rent)/rent)]
View(result_compare.percent)
source('~/R_Projects/SVM/Rfile/test_svm.R')
cl = svm_para_percent(new_trainset,new_testset)
help("svm")
View(cl)
1.5625e-02
svm.model.percent = svm(rent~.,data = new_trainset,cost = 1,gamma = 0.015625,cross = 5)
svm.percent = predict(svm.model.percent,new_testset[,-3])
e.percent = crossprod(svm.percent - unlist(new_testset[,3]))/nrow(new_testset)
result_compare.percent = cbind(svm.percent,new_general_info[new_general_info$year == 2017,c("rent","mall_name","year")])
result_compare.percent = data.table(result_compare.percent)
result_compare.percent[,c("diff","percent"):= list(svm.percent-rent,(svm.percent-rent)/rent)]
View(result_compare.percent)
colSums(result_compare.test)
colSums(result_compare.test$percent)
sum(result_compare.test$percent)
sum(result_compare.percent$percent)
svm.model.percent = svm(rent~.,data = new_trainset,cost = 1,gamma = 0.015625)
svm.percent = predict(svm.model.percent,new_testset[,-3])
e.percent = crossprod(svm.percent - unlist(new_testset[,3]))/nrow(new_testset)
result_compare.percent[,c("diff","percent"):= list(svm.percent-rent,(svm.percent-rent)/rent)]
sum(result_compare.test$percent)
sum(result_compare.percent$percent)
1.728873e-01*19
min(cl$avge)
View(new_testset)
svm.model.new = svm(rent~.,data = new_trainset,cost = 10,gamma = 0.0078125,cross = 5)
svm.test = predict(svm.model.new,new_testset[,-3])
result_compare.test = cbind(svm.test,new_general_info[new_general_info$year == 2017,c("rent","mall_name","year")])
result_compare.test = data.table(result_compare.test)
result_compare.test[,c("diff","percent"):= list(svm.test-rent,(svm.test-rent)/rent)]
sum(result_compare.test$percent)
sum(result_compare.percent$percent)
1.84826/19
1.278556/19
sum(abs(result_compare.percent$percent))
sum(abs(result_compare.test$percent))
source('~/R_Projects/SVM/Rfile/test_svm.R')
cl = svm_para_percent(new_trainset,new_testset)
source('~/R_Projects/SVM/Rfile/test_svm.R')
cl = svm_para_percent(new_trainset,new_testset)
View(cl)
source('~/R_Projects/SVM/Rfile/test_svm.R')
cl = svm_para_percent(new_trainset,new_testset)
View(cl)
result_compare.test[,c("diff","percent"):= list(svm.test-rent,(svm.test-rent)/rent)]
View(result_compare.test)
svm.model.bigC = svm(rent~.,data = new_trainset,cost = 1000,gamma = 0.0078125,cross = 5)
e.train.bigC = crossprod(svm.train.bigC - unlist(new_trainset[,3]))/nrow(new_trainset)
svm.train.bigC = predict(svm.model.bigC,new_trainset[,-3])
e.train.bigC = crossprod(svm.train.bigC - unlist(new_trainset[,3]))/nrow(new_trainset)
svm.test.bigC = predict(svm.model.bigC,new_testset[,-3])
e.test.bigC = crossprod(svm.test.bigC - unlist(new_testset[,3]))/nrow(new_testset)
View(cl)
View(result_compare.test)
View(result_compare.percent)
View(result_compare.percent[abs(percent)<0.1])
View(result_compare.test[abs(percent)<0.1])
library(rpart)
rp = rpart(rent~.,data = new_trainset)
rp.pred = predict(rp,new_testset[,3])
names(new_trainset)
rp.pred = predict(rp,new_testset[,-3])
e.rp = crossprod(rp.pred - unlist(new_testset[,3]))/nrow(new_testset)
result_compare.rp = cbind(rp.pred,new_general_info[new_general_info$year == 2017,c("rent","mall_name","year")])
result_compare.rp = data.table(result_compare.rp)
result_compare.rp[,c("diff","percent"):= list(rp.pred-rent,(rp.pred-rent)/rent)]
rp.best = best.rpart(x = new_trainset[,-3],y = new_trainset[,3])
?best.rpart
rp.best = best.rpart(rent~.,data = new_trainset)
View(result_compare.rp)
rp = rp.best
rp.pred = predict(rp,new_testset[,-3])
e.rp = crossprod(rp.pred - unlist(new_testset[,3]))/nrow(new_testset)
result_compare.rp = cbind(rp.pred,new_general_info[new_general_info$year == 2017,c("rent","mall_name","year")])
result_compare.rp = data.table(result_compare.rp)
result_compare.rp[,c("diff","percent"):= list(rp.pred-rent,(rp.pred-rent)/rent)]
rp = best.rpart(rent~.,data = new_trainset)
rp.pred = predict(rp,new_testset[,-3])
e.rp = crossprod(rp.pred - unlist(new_testset[,3]))/nrow(new_testset)
result_compare.rp = cbind(rp.pred,new_general_info[new_general_info$year == 2017,c("rent","mall_name","year")])
result_compare.rp = data.table(result_compare.rp)
result_compare.rp[,c("diff","percent"):= list(rp.pred-rent,(rp.pred-rent)/rent)]
View(result_compare.rp)
trp = tune.rpart(rent~.,data = new_trainset)
e.rp
?rpart
rp = best.rpart(rent~.,data = new_trainset,method = "anova")
rp.pred = predict(rp,new_testset[,-3])
e.rp = crossprod(rp.pred - unlist(new_testset[,3]))/nrow(new_testset)
e.rp
rp = best.rpart(rent~.,data = new_trainset,method = "poisson")
rp = best.rpart(rent~.,data = new_trainset,method = "class")
rp = best.rpart(rent~.,data = new_trainset,method = "exp")
rp = best.rpart(rent~.,data = new_trainset,method = "exp",control = rpart.control(cp = 0.05),
parms = list(prior = c(.65,.35), split = "information"))
rp = best.rpart(rent~.,data = new_trainset,method = "anova",control = rpart.control(cp = 0.05),
parms = list(prior = c(.65,.35), split = "information"))
rp = best.rpart(rent~.,data = new_trainset,control = rpart.control(cp = 0.05),
parms = list(prior = c(.65,.35), split = "information"))
rp = rpart(rent~.,data = new_trainset,control = rpart.control(cp = 0.05),
parms = list(prior = c(.65,.35), split = "information"))
rp.pred = predict(rp,new_testset[,-3])
e.rp = crossprod(rp.pred - unlist(new_testset[,3]))/nrow(new_testset)
rp.pred = predict(rp,new_testset[,-3])
e.rp = crossprod(rp.pred - unlist(new_testset[,3]))/nrow(new_testset)
rp = rpart(rent~.,data = new_trainset,control = rpart.control(cp = 0.5),
parms = list(prior = c(.65,.35), split = "gini"))
rp.pred = predict(rp,new_testset[,-3])
e.rp = crossprod(rp.pred - unlist(new_testset[,3]))/nrow(new_testset)
rp = rpart(rent~.,data = new_trainset,control = rpart.control(cp = 0.01),
parms = list(prior = c(.65,.35), split = "gini"))
rp.pred = predict(rp,new_testset[,-3])
e.rp = crossprod(rp.pred - unlist(new_testset[,3]))/nrow(new_testset)
rp = rpart(rent~.,data = new_trainset,control = rpart.control(cp = 0.01,minsplit = 20, minbucket = round(minsplit/3)),
parms = list(prior = c(.65,.35), split = "gini"))
rp.pred = predict(rp,new_testset[,-3])
rp = rpart(rent~.,data = new_trainset,control = rpart.control(cp = 0.01,minsplit = 20, minbucket = round(20/3)),
parms = list(prior = c(.65,.35), split = "gini"))
rp.pred = predict(rp,new_testset[,-3])
e.rp = crossprod(rp.pred - unlist(new_testset[,3]))/nrow(new_testset)
rp = rpart(rent~.,data = new_trainset,control = rpart.control(cp = 0.01,minsplit = 6, minbucket = round(6/3)),
parms = list(prior = c(.65,.35), split = "gini"))
rp.pred = predict(rp,new_testset[,-3])
e.rp = crossprod(rp.pred - unlist(new_testset[,3]))/nrow(new_testset)
rp = rpart(rent~.,data = new_trainset,control = rpart.control(cp = 0.01,minsplit = 6, minbucket = round(6/3)),
parms = list(prior = c(.65,.35), split = "gini"),method = "anova")
rp.pred = predict(rp,new_testset[,-3])
e.rp = crossprod(rp.pred - unlist(new_testset[,3]))/nrow(new_testset)
e.rp = crossprod(rp.pred - unlist(new_testset[,3]))/nrow(new_testset)
result_compare.rp = cbind(rp.pred,new_general_info[new_general_info$year == 2017,c("rent","mall_name","year")])
result_compare.rp = data.table(result_compare.rp)
result_compare.rp[,c("diff","percent"):= list(rp.pred-rent,(rp.pred-rent)/rent)]
View(result_compare.rp)
library(rpart.plot)
prp(rp)
save(list(new_trainset,new_testset),file = "~/data/rentmodel.RData")
Sys.setenv(LANG = "en")
save(list(new_trainset,new_testset),file = "~/data/rentmodel.RData")
?save
save(new_trainset,new_testset,file = "~/data/rentmodel.RData")
library(randomForest)
?randomForest
rf = randomForest(rent~.data = new_trainset)
rf = randomForest(rent~.,data = new_trainset)
rf.pred = predict(rf,new_testset[,-3])
e.rf = crossprod(rf.pred - unlist(new_testset[,3]))/nrow(new_testset)
result_compare.rf = cbind(rf.pred,new_general_info[new_general_info$year == 2017,c("rent","mall_name","year")])
result_compare.rf = data.table(result_compare.rf)
result_compare.rf[,c("diff","percent"):= list(rf.pred-rent,(rf.pred-rent)/rent)]
View(result_compare.rf)
plot(rf)
save(new_general_info,new_trainset,new_testset,file = "~/data/rentmodel.RData")
installed.packages()
View(e.test)
View(result_compare.test)
library(openxlsx)
write.xlsx(result_compare.test,"svm.xlsx")
write.xlsx(result_compare.test,"~/output/svm.xlsx")
View(new_trainset)
View(new_testset)
mall_fac
View(new_trainset)
colnames(new_trainset)
View(new_general_info)
str(new_general_info)
cities = substring(new_general_info$mall_name,1,2)
cities
cities_code = factor(cities)
cities_code
as.vector(cities_code)
as.numeric(cities_code)
cities_code = as.numeric(factor(cities))
cities_code
new_general_info$city = cities_code
colnames(new_general_info)
new_trainset = new_general_info[new_general_info$year!=2017,c(-1,-24)]
new_testset = new_general_info[new_general_info$year==2017,c(-1,-24)]
data.table(a=NULL,b=NULL,c=NULL)
library(NULL)
library(data.table)
data.table(a=NULL,b=NULL,c=NULL)
test_para = svm_para(new_trainset,new_testset)
library(readxl)
library(lattice)
library(e1071)
library(data.table)
test_para = svm_para(new_trainset,new_testset)
View(test_para)
1e+01
svm.model.city = svm(rent~.,data = new_trainset,cost = 10,gamma = 0.0078125,cross = 5)
svm.test.city = predict(svm.model.city,new_testset[,-3])
e.test.city = crossprod(svm.test.city - unlist(new_testset[,3]))/nrow(new_testset)
result_compare.test = cbind(svm.test.city,new_general_info[new_general_info$year == 2017,c("rent","mall_name","year")])
View(result_compare.test)
result_compare.test = cbind(svm.test,new_general_info[new_general_info$year == 2017,c("rent","mall_name","year")])
result_compare.city = cbind(svm.test.city,new_general_info[new_general_info$year == 2017,c("rent","mall_name","year")])
View(result_compare.city)
result_compare.city = cbind(svm.test.city,new_general_info[new_general_info$year == 2017,c("rent","mall_name","year")])
result_compare.city = data.table(result_compare.city)
result_compare.test[,c("diff","percent"):= list(svm.test.city-rent,(svm.test.city-rent)/rent)]
result_compare.city[,c("diff","percent"):= list(svm.test.city-rent,(svm.test.city-rent)/rent)]
View(result_compare.city)
result_compare.test = data.table(result_compare.test)
result_compare.test[,c("diff","percent"):= list(svm.test-rent,(svm.test-rent)/rent)]
result_compare.city[,c("vanilla_diff","vanilla_percent"):=list(result_compare.test$diff,result_compare.test$percent)]
View(result_compare.city)
View(result_compare.city)
library(readxl)
nn_test = read_xlsx('~/nn.xlsx')
View(cbind(nn_test,result_compare.city))
err1 = sum((nn_test[,1] - nn_test[,2])^2)/nrow(nn_test)
library(openxlsx)
dir.create('~/datatransfer')
write.xlsx(result_compare.city,'~/datatransfer/result_compare_city.xlsx')
iconvlist()
library(magrittr)
set.seed(12)
n1 = rnorm(10000)
n2 = abs(n1)*50
n3 = matrix(n2,ncol = 100)
n4 = round(rowMeans(n3))
hist(n4%%7)
rnorm(10000)%>%abs%>%'*'(50)%>%matrix(ncol = 100)%>%rowMeans%>%round%>%'%%'(7)%>%hist
View(new_trainset)
View(new_trainset)
View(new_trainset_with_name)
View(new_general_info)
View(testset.2016)
openxlsx::write.xlsx(new_general_info,"~/data/new_general_info.xlsx")
View(result_compare.city)
openxlsx::write.xlsx(result_compare.city,"~/data/R_projects/rental_model/data/result_compare_delicate.xlsx")
openxlsx::write.xlsx(result_compare.city,"~/R_projects/rental_model/data/result_compare_delicate.xlsx")
View(new_trainset)
View(new_testset)
View(new_general_info)
new_general_info_2005 = new_general_info[year == 2005,]
new_general_info_2005 = new_general_info[new_general_info$year == 2005,]
str(new_general_info$year)
new_general_info_2015 = new_general_info[new_general_info$year == 2015,]
rm(new_general_info_2005)
new_general_info_2016 = new_general_info[new_general_info$year == 2016,]
new_general_info_2017 = new_general_info[new_general_info$year == 2017,]
View(new_general_info_2016)
str(new_general_info_2015$mall_name)
train_next = merge(new_general_info_2015,new_general_info_2016[,c(1,4)],by = mall_name,all.x = TRUE)
train_next = merge(new_general_info_2015,new_general_info_2016[,c(1,4)],by = "mall_name",all.x = TRUE)
View(train_next)
test_next = merge(new_general_info_2016,new_general_info_2017[,c(1,4)],by = "mall_name",all.x = TRUE)
View(test_next)
train_next = train_next[,c(-1,-24)]
View(train_next)
View(test_next)
test_next = test_next[,c(-1,-24)]
source("~/Rfile/test_svm.R")
setwd("~/R_Projects/SVM")
source("./Rfile/test_svm.R")
names(train_next)
names(train_next)[24] = "rent"
names(test_next)[24] = "rent"
try_para = svm_para_percent(train_next,test_next)
View(try_para)
1e+01
1.5625e-02
View(train_next)
svm.model.next = svm(rent~.,data = train_next,cost = 10,gamma = 0.015625,cross = 5)
svm.test.next = predict(svm.model.next,test_next[,-24])
compare.result = cbind(test_next[,"rent"],svm.test.next)
View(compare.result)
compare.result = cbind(real_rent = test_next[,"rent"],svm.test.next)
View(compare.result)
compare.result = cbind(mall_name = new_general_info_2016$mall_name,real_rent = test_next[,"rent"],svm.test.next)
View(compare.result)
View(train_next)
library(scatterplot3d)
z <- seq(-10, 10, 0.01)
x <- cos(z)
y <- sin(z)
scatterplot3d(x, y, z, highlight.3d=TRUE, col.axis="blue",
col.grid="lightblue", main="scatterplot3d - 1", pch=20)
temp <- seq(-pi, 0, length = 50)
x <- c(rep(1, 50) %*% t(cos(temp)))
y <- c(cos(temp) %*% t(sin(temp)))
z <- c(sin(temp) %*% t(sin(temp)))
scatterplot3d(x, y, z, highlight.3d=TRUE,
col.axis="blue", col.grid="lightblue",
main="scatterplot3d - 2", pch=20)
seq(-pi, 0, length = 50)
my.mat <- matrix(runif(25), nrow=5)
dimnames(my.mat) <- list(LETTERS[1:5], letters[11:15])
my.mat # the matrix we want to plot ...
s3d.dat <- data.frame(cols=as.vector(col(my.mat)),
rows=as.vector(row(my.mat)),
value=as.vector(my.mat))
scatterplot3d(s3d.dat, type="h", lwd=5, pch=" ",
x.ticklabs=colnames(my.mat), y.ticklabs=rownames(my.mat),
color=grey(25:1/40), main="scatterplot3d - 4")
my.mat <- matrix(runif(25), nrow=5)
dimnames(my.mat) <- list(LETTERS[1:5], letters[11:15])
my.mat # the matrix we want to plot ...
s3d.dat <- data.frame(cols=as.vector(col(my.mat)),
rows=as.vector(row(my.mat)),
value=as.vector(my.mat))
scatterplot3d(s3d.dat, type="h", lwd=5, pch=" ",
x.ticklabs=colnames(my.mat), y.ticklabs=rownames(my.mat),
color=grey(25:1/40), main="scatterplot3d - 4")
scatterplot3d(x, y, z, highlight.3d=TRUE,
col.axis="blue", col.grid="lightblue",
main="scatterplot3d - 2", pch=20)
s3d <- scatterplot3d(trees, type="h", highlight.3d=TRUE,
angle=55, scale.y=0.7, pch=16, main="scatterplot3d - 5")
s3d$points3d(seq(10,20,2), seq(85,60,-5), seq(60,10,-10),
col="blue", type="h", pch=16)
data(trees)
attach(trees)
my.lm <- lm(Volume ~ Girth + Height)
s3d$plane3d(my.lm, lty.box = "solid")
library(plotly)
mtcars$am[which(mtcars$am == 0)] <- 'Automatic'
mtcars$am[which(mtcars$am == 1)] <- 'Manual'
mtcars$am <- as.factor(mtcars$am)
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
chart_link = plotly_POST(p, filename="scatter3d/basic")
p
source("Rfile/nn_para.R")
source("~/R_Projects/rental_model/Rfile/nn_para.R")
source("~/R_Projects/neuralNetwork/Rfile/nn_para.R")
View(new_trainset)
source("~/R_Projects/neuralNetwork/Rfile/nn_para.R")
source("~/R_Projects/neuralNetwork/Rfile/nn_para.R")
neuralnet_para_m = neuralnet_para(train_next,test_next)
View(neuralnet_para_m)
nn <- neuralnet(f,data=train.scaled,hidden = rep(6,11),act.fct = 'tanh',linear.output=T)
maxs <- apply(train_next, 2, max)
mins <- apply(new_trainset, 2, min)
train.scaled = as.data.frame(scale(new_trainset, center = mins, scale = maxs - mins))
maxs <- apply(train_next, 2, max)
mins <- apply(test_next, 2, min)
train.scaled = as.data.frame(scale(train_next, center = mins, scale = maxs - mins))
test.scaled = as.data.frame(scale(test_next,center = mins,scale = maxs - mins))
max_rent = maxs["rent"]
min_rent = mins["rent"]
nn <- neuralnet(f,data=train.scaled,hidden = rep(6,11),act.fct = 'tanh',linear.output=T)
pr.nn <- compute(nn,test.scaled[,-3])
View(test.scaled)
ncol(test.scaled)
rentind = which(names(test.scaled) %in% c("rent"))
pr.nn <- compute(nn,test.scaled[,-rentind])
nn <- neuralnet(f,data=train.scaled,hidden = rep(6,11),act.fct = 'tanh',linear.output=T)
rentind = which(names(test.scaled) %in% c("rent"))
pr.nn <- compute(nn,test.scaled[,-rentind])
nn
str(nn)
View(train.scaled)
identical(names(train.scaled),names(train_next))
n <- names(train_next)
f <- as.formula(paste("rent ~", paste(n[!n %in% "rent"], collapse = " + ")))
nn <- neuralnet(f,data=train.scaled,hidden = rep(6,11),act.fct = 'tanh',linear.output=T)
pr.nn <- compute(nn,test.scaled[,-rentind])
pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/length(test.r)
MSE.nn
nchar(train_next)
nchar(MES.nn)
nchar(MSE.nn)
nchar(70635755346895)
MSE.svm = sum((svm.test.next - test_next[,24])^2)/length(svm.test.next)
MSE.svm
nchar(10834848454301)
MSE.nn
nchar(176197904963943)
neuralnet_para_m = neuralnet_para(train_next,test_next)
View(neuralnet_para_m)
nchar(2959778934020)
source("~/R_Projects/neuralNetwork/Rfile/nn_para.R")
neuralnet_para_m = neuralnet_para(train_next,test_next)
View(neuralnet_para_m)
nchar(1455788098119)
nn <- neuralnet(f,data=train.scaled,hidden = rep(18,4),act.fct = 'tanh',linear.output=T)
rentind = which(names(test.scaled) %in% c("rent"))
pr.nn <- compute(nn,test.scaled[,-rentind])
pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/length(test.r)
compare.result2 = cbind(pr.nn_,test.r)
View(compare.result2)
View(compare.result2)
?neuralnet
nn <- neuralnet(f,data=train.scaled,hidden = rep(18,4),act.fct = 'logistic')
rentind = which(names(test.scaled) %in% c("rent"))
pr.nn <- compute(nn,test.scaled[,-rentind])
pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/length(test.r)
compare.result2 = cbind(pr.nn_,test.r)
View(compare.result2)
MSE.nn
nchar(1888045074539)
source("~/R_Projects/neuralNetwork/Rfile/nn_para.R")
neuralnet_para_m = neuralnet_para(train_next,test_next)
source("~/R_Projects/neuralNetwork/Rfile/nn_para.R")
neuralnet_para_m = neuralnet_para(train_next,test_next)
n <- names(train_next)
f <- as.formula(paste("rent ~", paste(n[!n %in% "rent"], collapse = " + ")))
maxs <- apply(train_next, 2, max)
mins <- apply(train_next, 2, min)
train.scaled = as.data.frame(scale(train_next, center = mins, scale = maxs - mins))
test.scaled = as.data.frame(scale(test_next,center = mins,scale = maxs - mins))
max_rent = maxs["rent"]
min_rent = mins["rent"]
nn <- neuralnet(f,data=train.scaled,hidden = rep(18,4),act.fct = 'logistic')
View(neuralnet_para_m)
nn <- neuralnet(f,data=train.scaled,hidden = rep(15,4),act.fct = 'logistic')
rentind = which(names(test.scaled) %in% c("rent"))
pr.nn <- compute(nn,test.scaled[,-rentind])
pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/length(test.r)
compare.result2 = cbind(pr.nn_,test.r)
View(compare.result2)
require(gbm)
rent.boost=gbm(rent ~ . ,data = train_next,distribution = "gaussian",n.trees = 10000,
shrinkage = 0.01, interaction.depth = 4)
rent.boost=gbm(rent ~ . ,data = train_next,distribution = "gaussian",n.trees = 10000)
rent.boost=gbm.simplify(rent ~ . ,data = train_next,distribution = "gaussian",n.trees = 10000)
install.packages("dismo")
library(dismo)
rent.boost = gbm.simplify(rent ~ . ,data = train_next,distribution = "gaussian",n.trees = 10000)
?gbm.simplify
?gbm
rent.boost = gbm(rent ~ . ,data = train_next,distribution = "gaussian",n.trees = 10000,bag.fraction = 0.8)
rent.boost = gbm(rent ~ . ,data = train_next,distribution = "gaussian",n.trees = 10000,bag.fraction = 0.8,n.minobsinnode = 10)
rent.boost = gbm(rent ~ . ,data = train_next,distribution = "gaussian",n.trees = 10000,nTrain = 100,bag.fraction = 0.8,n.minobsinnode = 10)
View(business_district_info)
business_district_info = read_xlsx("~/data/final_result_2017.xlsx")
library(readxl)
library(lattice)
library(e1071)
library(data.table)
business_district_info = read_xlsx("~/data/final_result_2017.xlsx")
View(business_district_info)
View(shop_info_2015)
View(shop_info)
View(traffic_info)
View(business_district_info)

{
    "collab_server" : "",
    "contents" : "data(volcano)\n# install.packages(\"rgl\")\nlibrary(rgl)\n\nz <- 2 * volcano        # Exaggerate the relief\n\nx <- 10 * (1:nrow(z))   # 10 meter spacing (S to N)\ny <- 10 * (1:ncol(z))   # 10 meter spacing (E to W)\n\nzlim <- range(y)\nzlen <- zlim[2] - zlim[1] + 1\n\ncolorlut <- terrain.colors(zlen) # height color lookup table\n\ncol <- colorlut[ z - zlim[1] + 1 ] # assign colors to heights for each point\n\nsurface3d(x, y, z, color = col, back = \"lines\") # you can also use terrain\n\nxvec = 1:10\nyvec = 3:12\nf2 = function(x,y){return(x+y)}\nfz <- outer(xvec, yvec, FUN=f2)\nf2(xvec,yvec)\n\nf1 <- function(x) x\ncurve(f1, from=-1, to=1)\n\n\ninstall.packages('scatterplot3d')\nlibrary(scatterplot3d)\n\nz <- seq(-10, 10, 0.01)\nx <- cos(z)\ny <- sin(z)\nscatterplot3d(x, y, z, highlight.3d=TRUE, col.axis=\"blue\",\n              col.grid=\"lightblue\", main=\"scatterplot3d - 1\", pch=20)\n\n#example 3\ntemp <- seq(-pi, 0, length = 50)\nx <- c(rep(1, 50) %*% t(cos(temp)))\ny <- c(cos(temp) %*% t(sin(temp)))\nz <- c(sin(temp) %*% t(sin(temp)))\nscatterplot3d(x, y, z, highlight.3d=TRUE,\n              col.axis=\"blue\", col.grid=\"lightblue\",\n              main=\"scatterplot3d - 2\", pch=20)\n\n#example 4\nmy.mat <- matrix(runif(25), nrow=5)\ndimnames(my.mat) <- list(LETTERS[1:5], letters[11:15])\nmy.mat # the matrix we want to plot ...\ns3d.dat <- data.frame(cols=as.vector(col(my.mat)),\n                      rows=as.vector(row(my.mat)),\n                      value=as.vector(my.mat))\nscatterplot3d(s3d.dat, type=\"h\", lwd=5, pch=\" \",\n              x.ticklabs=colnames(my.mat), y.ticklabs=rownames(my.mat),\n              color=grey(25:1/40), main=\"scatterplot3d - 4\")\n\n\n#example 5\ndata(trees)\ns3d <- scatterplot3d(trees, type=\"h\", highlight.3d=TRUE,\n                     angle=55, scale.y=0.7, pch=16, main=\"scatterplot3d - 5\")\n# Now adding some points to the \"scatterplot3d\"\ns3d$points3d(seq(10,20,2), seq(85,60,-5), seq(60,10,-10),\n             col=\"blue\", type=\"h\", pch=16)\n# Now adding a regression plane to the \"scatterplot3d\"\nattach(trees)\nmy.lm <- lm(Volume ~ Girth + Height)\ns3d$plane3d(my.lm, lty.box = \"solid\")\n\n## example 6; by Martin Maechler\ncubedraw <- function(res3d, min = 0, max = 255, cex = 2, text. = FALSE)\n{\n  ## Purpose: Draw nice cube with corners\n  cube01 <- rbind(c(0,0,1), 0, c(1,0,0), c(1,1,0), 1, c(0,1,1), # < 6 outer\n                  c(1,0,1), c(0,1,0)) # <- \"inner\": fore- & back-ground\n  cub <- min + (max-min)* cube01\n  ## visibile corners + lines:\n  res3d$points3d(cub[c(1:6,1,7,3,7,5) ,], cex = cex, type = 'b', lty = 1)\n  ## hidden corner + lines\n  res3d$points3d(cub[c(2,8,4,8,6), ], cex = cex, type = 'b', lty = 3)\n  if(text.)## debug\n    text(res3d$xyz.convert(cub), labels=1:nrow(cub), col='tomato', cex=2)\n}\n## 6 a) The named colors in R, i.e. colors()\ncc <- colors()\ncrgb <- t(col2rgb(cc))\npar(xpd = TRUE)\nrr <- scatterplot3d(crgb, color = cc, box = FALSE, angle = 24,\n                    xlim = c(-50, 300), ylim = c(-50, 300), zlim = c(-50, 300))\ncubedraw(rr)\n## 6 b) The rainbow colors from rainbow(201)\nrbc <- rainbow(201)\nRrb <- t(col2rgb(rbc))\nrR <- scatterplot3d(Rrb, color = rbc, box = FALSE, angle = 24,\n                    xlim = c(-50, 300), ylim = c(-50, 300), zlim = c(-50, 300))\ncubedraw(rR)\nrR$points3d(Rrb, col = rbc, pch = 16)\n\n\nlibrary(plotly)\nmtcars$am[which(mtcars$am == 0)] <- 'Automatic'\nmtcars$am[which(mtcars$am == 1)] <- 'Manual'\nmtcars$am <- as.factor(mtcars$am)\np <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%\n  add_markers() %>%\n  layout(scene = list(xaxis = list(title = 'Weight'),\n                      yaxis = list(title = 'Gross horsepower'),\n                      zaxis = list(title = '1/4 mile time')))\n\n# Create a shareable link to your chart\n# Set up API credentials: https://plot.ly/r/getting-started\nchart_link = plotly_POST(p, filename=\"scatter3d/basic\")\nchart_link\n\n#draw pic with function info\nf2 <- function(x, y) x + y\npersp3d(f2)\n\n#draw pic with function info\ncurve_3d <- function(f2, x_range=c(-1, 1), y_range=c(-1, 1), col=1:6 ){ \n  if (!require(rgl) ) {stop(\"load rgl\")}\n  xvec <- seq(x_range[1], x_range[2], len=15)\n  yvec <- seq(y_range[1], y_range[2], len=15)\n  fz <- outer(xvec, yvec, FUN=f2)\n  open3d()\n  persp3d( xvec, yvec, fz, col=col) }\ncurve_3d(f2)\nsnapshot3d(\"out3dplane.png\")\n\n#basic draw\nfdejong <- function (x, y) {\n  return (x^2 + y^2)\n}\n\nx <- seq(-10, 10, length= 30)\ny <- x\nz <- outer(x, y, fdejong)\nz[is.na(z)] <- 1\n\nrequire(lattice)\nwireframe(z, drape=T, col.regions=rainbow(100))",
    "created" : 1499845805007.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1286733544",
    "id" : "D5EDB22A",
    "lastKnownWriteTime" : 1499912681,
    "last_content_update" : 0,
    "path" : "~/R_Projects/SVM/Rfile/3dplot.R",
    "project_path" : "Rfile/3dplot.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
{
    "collab_server" : "",
    "contents" : "library(readxl)\nlibrary(lattice)\nlibrary(e1071)\nlibrary(data.table)\n\nbusiness_district_info = read_xlsx(\"~/data/final_result_2017.xlsx\")\nshop_info_2015 = read_xlsx(\"~/data/rent_recent_3years.xlsx\",sheet = '2015')\nshop_info_2016 = read_xlsx(\"~/data/rent_recent_3years.xlsx\",sheet = '2016')\nshop_info_2017 = read_xlsx(\"~/data/rent_recent_3years.xlsx\",sheet = '2017')\n\nshop_info_2017_1 = shop_info_2017[,1:15]\ntraffic_info = shop_info_2017[,c(2,22:25)] \n  \n\nshop_info_2015 = data.frame(shop_info_2015,year = 2015)\nshop_info_2016 = data.frame(shop_info_2016,year = 2016)\nshop_info_2017_1 = data.frame(shop_info_2017_1,year = 2017)\n\nshop_info = rbindlist(list(shop_info_2015,shop_info_2016,shop_info_2017_1),use.names = TRUE)\ngeneral_info = merge(shop_info,traffic_info,by = \"商场名称\")\ngeneral_info = merge(general_info,business_district_info,by.x = \"商场名称\",by.y = \"name\")\ngeneral_info_copy = general_info\nnames(general_info) = c(\"shop_name\",\"shop_code\",\"age\",\"city\",\"city_level\",\"area\",\"rent\",\"num_ordered_custom\",\n                        \"sales\",\"furniture\",\"construction\",\"soft\",\"import\",\"new_business\",\"brand_num\",\"year\",\n                        \"dist_from_highway\",\"dist_from_big_road\",\"position\",\"dist_from_subway\",\"dist_from_business_district\",\n                        \"num_business_within_2500\",\"a\",\"b\",\"c\",\"d\")\ngeneral_info = general_info[,1:22]\ngeneral_info_copy2 = general_info\ngeneral_info = general_info_copy2\n\nrm_index = c(-10,-16,-49,-50,-51,-58)\ngeneral_info = general_info[rm_index,]\n\ngeneral_info$city_level = as.numeric(as.factor(general_info$city_level))\ngeneral_info_copy3 = general_info\ngeneral_info$rent = as.numeric(general_info$rent)\ngeneral_info$num_ordered_custom = as.numeric(general_info$num_ordered_custom)\ngeneral_info$sales = as.numeric(general_info$sales)\n\nnew_general_info = read_xlsx('~/data/mall_data_0802.xlsx',sheet = 1)\n\nnames(new_general_info) = c(\"mall_name\",\"age\",\"area\",\"rent\",\"ordered_custom_num\",\"sale\",\"furniture\",\"construction\",\"soft\",\"import\",\n                            \"new_business\",\"brand_num\",\"gdp\",\"population\",\"region_area\",\"density\",\"avg_gdp\",\"avg_sale\",\"dist_from_highway\",\n                            \"dist_from_big_road\",\"position\",\"dist_from_subway\",\"dist_from_business_district\",\"num_business_within_2500\")\n\nnew_general_info = new_general_info[,-11]\nnew_general_info$year = 2017\nnew_general_info[20:38,\"year\"] = 2016\nnew_general_info[39:nrow(new_general_info),\"year\"] = 2015\ncities = substring(new_general_info$mall_name,1,2)\ncities_code = as.numeric(factor(cities))\nnew_general_info$city = cities_code\nnew_trainset = new_general_info[new_general_info$year!=2017,c(-1,-24)]\n\nmall_fac = as.numeric(as.factor(new_general_info$mall_name))\nnew_trainset_with_name = new_general_info\nnew_trainset_with_name$mall_fac = mall_fac\nnew_trainset_with_name = new_trainset_with_name[new_general_info$year!=2017,]\n\nnew_trainset$mall_fac = mall_fac\nnew_testset = new_general_info[new_general_info$year==2017,c(-1,-24)]\n\n#want to test if along with m increasing, the model get much better\nset.seed(1)\nhalf_index = sample(nrow(new_trainset),ceiling(nrow(new_trainset)/2))\nlllll = svm_para(new_trainset[half_index,],new_testset)\n\nView(svm.model.new$SV)\n\ntrainset = general_info[,c(-1,-2,-4,-16)]\nsvm.model.1 = svm(rent~.,data = trainset)  #1.41e+12\nsvm.model.1000 <- svm(rent ~ ., data = trainset, cost = 1000, gamma = 1)\n\ntrainset_var_2015_2016 = general_info[year!=2017,c(\"rent\",\"age\",\"area\",\"city_level\",\"dist_from_big_road\",\"num_ordered_custom\",\n                               \"position\",\"sales\")]\n# Variables actually used in tree construction:\n# age  area  city_level  dist_from_big_road  num_ordered_custom  position  sales     \n\nsvm.model = svm(rent~.,data = trainset,gamma = 0.5)\nsvm.model.10.2 = svm(rent ~ ., data = trainset, cost = 10, gamma = 2)\nsvm.model.new = svm(rent~.,data = new_trainset_with_name,cost = 10,gamma = 0.0078125,cross = 5)\n# svm.model.100 <- svm(rent ~ ., data = trainset, cost = 100, gamma = 1)\n# svm.model.1000 <- svm(rent ~ ., data = trainset, cost = 1000, gamma = 1)\n\ntestset = general_info[,c(-1,-2,-4,-16)]\nsvm.pred.1 = predict(svm.model.1,testset[,-4])\nsvm.pred.1000 = predict(svm.model.1000,testset[,-4])\nsvm.pred = predict(svm.model,testset[,-4])\nsvm.pred.10.2 = predict(svm.model.10.2,testset[,-4])\n\ngeneral_pred_info = data.table(general_info[,-7],rent=svm.pred.1,type='predict')\ngeneral_real_info = data.table(general_info,type = \"real\")\n\nlibrary(caret)\ninit.model = train(rent~.,data = new_trainset,method = 'rf',preProcess = \"scale\",importance=T)\nimportance <- varImp(init.model)\nprint(importance)\nsvm.model.new = svm(rent~.,data = new_trainset,cost = 10,gamma = 0.0078125,cross = 5)\nsvm.model.bigC = svm(rent~.,data = new_trainset,cost = 1000,gamma = 0.0078125,cross = 5)\nsvm.model.best = best.svm(x=new_trainset[,-3],y =new_trainset[,3])\nsvm.model.new.half = svm(rent~.,data = new_trainset[half_index,],cost = 10,gamma = 0.0078125,cross = 5)\nsvm.model.percent = svm(rent~.,data = new_trainset,cost = 1,gamma = 0.015625)\nsvm.model.city = svm(rent~.,data = new_trainset,cost = 10,gamma = 0.0078125,cross = 5)\n\nsvm.test = predict(svm.model.new,new_testset[,-3])\nsvm.train = predict(svm.model.new,new_trainset[,-3])\nsvm.test.best = predict(svm.model.best,new_testset[,-3])\nsvm.train.best = predict(svm.model.best,new_trainset[,-3])\nsvm.test.half = predict(svm.model.new.half,new_testset[,-3])\nsvm.train.half = predict(svm.model.new.half,new_trainset[half_index,-3])\nsvm.percent = predict(svm.model.percent,new_testset[,-3])\nsvm.train.bigC = predict(svm.model.bigC,new_trainset[,-3])\nsvm.test.bigC = predict(svm.model.bigC,new_testset[,-3])\nsvm.test.city = predict(svm.model.city,new_testset[,-3])\n\ne.test = crossprod(svm.test - unlist(new_testset[,3]))/nrow(new_testset)\ne.test.bigC = crossprod(svm.test.bigC - unlist(new_testset[,3]))/nrow(new_testset)\ne.train = crossprod(svm.train - unlist(new_trainset[,3]))/nrow(new_trainset)\ne.train.bigC = crossprod(svm.train.bigC - unlist(new_trainset[,3]))/nrow(new_trainset)\ne.test.best = crossprod(svm.test.best - unlist(new_testset[,3]))/nrow(new_testset)\ne.train.best = crossprod(svm.train.best - unlist(new_trainset[,3]))/nrow(new_trainset)\ne.test.half = crossprod(svm.test.half - unlist(new_testset[,3]))/nrow(new_testset)\ne.train.half = crossprod(svm.train.half - unlist(new_trainset[half_index,3]))/length(half_index)\ne.percent = crossprod(svm.percent - unlist(new_testset[,3]))/nrow(new_testset)\ne.test.city = crossprod(svm.test.city - unlist(new_testset[,3]))/nrow(new_testset)\n\nresult_compare.test = cbind(svm.test,new_general_info[new_general_info$year == 2017,c(\"rent\",\"mall_name\",\"year\")])\nresult_compare.test = data.table(result_compare.test)\nresult_compare.test[,c(\"diff\",\"percent\"):= list(svm.test-rent,(svm.test-rent)/rent)]\n\nresult_compare.percent = cbind(svm.percent,new_general_info[new_general_info$year == 2017,c(\"rent\",\"mall_name\",\"year\")])\nresult_compare.percent = data.table(result_compare.percent)\nresult_compare.percent[,c(\"diff\",\"percent\"):= list(svm.percent-rent,(svm.percent-rent)/rent)]\n\nresult_compare.city = cbind(svm.test.city,new_general_info[new_general_info$year == 2017,c(\"rent\",\"mall_name\",\"year\")])\nresult_compare.city = data.table(result_compare.city)\nresult_compare.city[,c(\"diff\",\"percent\"):= list(svm.test.city-rent,(svm.test.city-rent)/rent)]\nresult_compare.city[,c(\"vanilla_diff\",\"vanilla_percent\"):=list(result_compare.test$diff,result_compare.test$percent)]\n\nresult_compare = cbind(svm.pred.1,svm.pred.1000,general_info[,c(\"rent\",\"shop_name\",\"year\")])\n# e.1 = crossprod(result_compare[year == 2017,svm.pred.1] - unlist(result_compare[year == 2017,rent])) / nrow(result_compare[year==2017,])\ne.1000 = crossprod(svm.pred.1000 - unlist(testset[,4])) / nrow(testset)\ne = crossprod(svm.pred - unlist(testset[,4]))/nrow(testset)\ne.1 = crossprod(svm.pred.1 - unlist(testset[,4]))/nrow(testset)\ne.10.2 = crossprod(svm.pred.10.2 - unlist(testset[,4]))/nrow(testset)\n\nplot3dset = rbind(trainset,testset)\n\nrealvspred = rbind(general_pred_info,general_real_info)\n\nlibrary(plotly)\nplot_ly(realvspred[year==2017], x = ~dist_from_business_district, y = ~position, z = ~rent, color = ~type, colors = c('red', 'blue')) %>%\n  add_markers() %>%\n  layout(scene = list(xaxis = list(title = 'dist_from_business_district'),\n                      yaxis = list(title = 'position'),\n                      zaxis = list(title = 'rent')))\n\nplot_ly(general_info, x = ~city_level, y = ~num_ordered_custom, z = ~rent, color = ~year, colors = c('red', 'blue','purple')) %>%\n  add_markers() %>%\n  layout(scene = list(xaxis = list(title = 'city_level'),\n                      yaxis = list(title = 'num_ordered_custom'),\n                      zaxis = list(title = 'rent')))\n\nplot_ly(general_info, x = ~dist_from_highway, y = ~dist_from_big_road, z = ~rent, color = ~year, colors = c('red', 'blue','purple')) %>%\n  add_markers() %>%\n  layout(scene = list(xaxis = list(title = 'dist_from_highway'),\n                      yaxis = list(title = 'dist_from_big_road'),\n                      zaxis = list(title = 'rent')))\n\nplot_ly(general_info, x = ~num_business_within_2500, y = ~dist_from_business_district, z = ~rent, color = ~year, colors = c('red', 'blue','purple')) %>%\n  add_markers() %>%\n  layout(scene = list(xaxis = list(title = 'num_business_within_2500'),\n                      yaxis = list(title = 'dist_from_business_district'),\n                      zaxis = list(title = 'rent')))\n\nplot_ly(plot3dset, x = ~area, y = ~avg_gdp, z = ~rent, color = ~year, colors = c('#BF382A', '#0C4B8E')) %>%\n  add_markers() %>%\n  layout(scene = list(xaxis = list(title = 'area'),\n                      yaxis = list(title = 'people income'),\n                      zaxis = list(title = 'rent')))\n\n# 如图论推理算法（Graph Inference）或者拉普拉斯支持向量机（Laplacian SVM.）等。 \n\n#检测出异常值，并把其脱离开模型\n\n#决策树并没有产生更好的模型\nlibrary(rpart)\n# rp = rpart(rent~.,data = new_trainset)\n# rp = best.rpart(rent~.,data = new_trainset)\nrp = rpart(rent~.,data = new_trainset,control = rpart.control(cp = 0.01,minsplit = 6, minbucket = round(6/3)),\n                parms = list(prior = c(.65,.35), split = \"gini\"),method = \"anova\")\nrp.pred = predict(rp,new_testset[,-3])\ne.rp = crossprod(rp.pred - unlist(new_testset[,3]))/nrow(new_testset)\nresult_compare.rp = cbind(rp.pred,new_general_info[new_general_info$year == 2017,c(\"rent\",\"mall_name\",\"year\")])\nresult_compare.rp = data.table(result_compare.rp)\nresult_compare.rp[,c(\"diff\",\"percent\"):= list(rp.pred-rent,(rp.pred-rent)/rent)]\nlibrary(rpart.plot)\nprp(rp)\n\n#尝试随机森林,效果好于决策树，但不如支持向量机\nlibrary(randomForest)\nrf = randomForest(rent~.,data = new_trainset)\nrf.pred = predict(rf,new_testset[,-3])\ne.rf = crossprod(rf.pred - unlist(new_testset[,3]))/nrow(new_testset)\nresult_compare.rf = cbind(rf.pred,new_general_info[new_general_info$year == 2017,c(\"rent\",\"mall_name\",\"year\")])\nresult_compare.rf = data.table(result_compare.rf)\nresult_compare.rf[,c(\"diff\",\"percent\"):= list(rf.pred-rent,(rf.pred-rent)/rent)]\nplot(rf)\n\n#               maxcompete = 4, maxsurrogate = 5, usesurrogate = 2, xval = 10,\n#               surrogatestyle = 0, maxdepth = 30, ...)",
    "created" : 1501145537768.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1741242736",
    "id" : "C26E5927",
    "lastKnownWriteTime" : 1510208456,
    "last_content_update" : 1510208456607,
    "path" : "~/R_Projects/SVM/Rfile/rent_svm2.R",
    "project_path" : "Rfile/rent_svm2.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
install.packages("RJDBC")
library(DBI)
library(rJava)
library(RJDBC)
cp = c(list.files("~/libs",pattern="jar$",full.names=T))
drv <- JDBC("org.apache.hive.jdbc.HiveDriver", cp)
con <- dbConnect(drv, "jdbc:hive2://172.16.107.129:10000/user_center", "", "")
source('~/Rfile/toolfunc.R')
source2('~/Rfile/R_hive.R',7,17)
query = "select * from dl.fct_ordr d where to_date(ordr_date)>='2017-05-01'
and  to_date(ordr_date)<='2017-05-31'
and ((d.ordr_status not in ('1','7','19') and d.sale_type<>'oms') or (d.ordr_status ='Y' and d.sale_type='oms'))"
order_list = dbGetQuery(query)
order_list = dbGetQuery(con,query)
query = "select * from dl.fct_ordr d where to_date(ordr_date)>='2017-05-01'
and  to_date(ordr_date)<='2017-05-07'
and ((d.ordr_status not in ('1','7','19') and d.sale_type<>'oms') or (d.ordr_status ='Y' and d.sale_type='oms'))"
order_list = dbGetQuery(con,query)
query = "select * from dl.fct_ordr d where to_date(ordr_date)>='2017-06-26'
and  to_date(ordr_date)<='2017-06-27'
and ((d.ordr_status not in ('1','7','19') and d.sale_type<>'oms') or (d.ordr_status ='Y' and d.sale_type='oms'))"
order_list = dbGetQuery(con,query)
query = "select ordr_date,mall_name,shop_name,ordr_id,d.open_id,cust_id,cust_name,is_promotion,address,ordr_status,d.mobile,d.prov_name,d.city,cat3_name,
prod_id,prod_name,amt,discnt_amt,is_coupon,coupon_type,coupon_theme_name,coupon_amt,coupon_theme_desc,partner_code,partner_name,booth_id,
booth_desc,cont_cat1_name,cont_cat2_name,cont_cat3_name,cont_main_brand_name,cont_series_name,cont_floor_name,sale_type,ordr_type,
c.u_mid from dl.fct_ordr d left join ods.ods_db_user_center_users_dt b on d.mobile=b.mobile left join(select * from dl.dl_channel_umid where dt='20170601') c on b.openid=c.openid
where to_date(ordr_date)>='2017-05-01' and to_date(ordr_date)<='2017-05-07'"
order_list = dbGetQuery(con,query)
query = "select mobile,prod_name,to_date(ordr_date) from dl.fct_ordr
where to_date(ordr_date) = '2017-06-26'"
order_list = dbGetQuery(con,query)
Sys.which(java)
Sys.which('java')
?rjava
source('~/Rfile/R_impala.R')
source('~/Rfile/toolfunc.R')
source2('~/Rfile/R_hive.R',7,17)
library(data.table)
if(!require(arules)){
install.packages('arules')
library(arules)
}
query = "select mobile,prod_name,cont_cat1_name,cont_cat2_name,cont_cat3_name,to_date(ordr_date) from dl.fct_ordr d
where to_date(ordr_date) >= '2017-06-21' and to_date(ordr_date) <= '2017-06-27'
and ((d.ordr_status not in (1,7,19) and d.sale_type<>'oms') or (d.ordr_status ='Y' and d.sale_type='oms'))"
order_list = dbGetQuery(con,query)
order_list = data.table(order_list)
order.list.nona = order_list[!is.na(cont_cat3_name),]
?duplicated
View(order.list.nona)
unique(order.list.nona, by=c("mobile", "cont_cat3_name"))
?unique
order.list.nodup = unique(order.list.nona, by=c("mobile", "cont_cat3_name"))
prepare.list = aggregate(cont_cat3_name~mobile,data = order.list.nona,paste)
frequentsets=eclat(prepare.list$cont_cat3_name,parameter=list(support=0.01,maxlen=20))  #求频繁项集
inspect(frequentsets)
inspect(frequentsets)
View(prepare.list)
View(order.list.nodup)
order.list.nodup[order(mobile),]
data("Groceries")
library(Groceries)
library("arulesViz")
data("Groceries")
?data
(.packages())
data()
summary('Groceries')
rules <- apriori(Groceries, parameter = list(support = 0.001, confidence = 0.5))
rules
rules = apriori(Groceries,parameter = list(support = 0.001,confidence = 0.5))
inspect(head(sort(rules, by = "lift"), 30))
plot(rules)
plot(rules)
plot(rules, measure = c("support", "lift"), shading = "confidence")
plot(rules, shading = "order", control = list(main = "Two-key plot"))
str(rules)
sel <- plot(rules, measure = c("support", "lift"), shading = "confidence",interactive = TRUE)
plot(rules, method = "grouped")
plot(rules, method = "grouped",control = list(k = 50))
subrules2 <- head(sort(rules, by = "lift"), 10)
plot(subrules2, method = "graph")
library(arulesSequences)
data(zaki)
frequent_sequences <- cspade(zaki, parameter=list(support=0.5))
frequent_sequences
inspect(frequent_sequences)
zaki@data
zaki@itemInfo
zaki@itemsetInfo
data(zaki)
s0 <- cspade(zaki, parameter = list(support = 0,
maxsize = 1, maxlen = 1),
control   = list(verbose = TRUE))
as(s0,"data.frame")
as(zaki,"data.frame")
plot(rules, method = "grouped",control = list(k = 50))
library(arulesViz)
plot(rules, method = "grouped",control = list(k = 50))
s1 <- cspade(zaki, parameter = list(support = 0.4),
control   = list(verbose = TRUE, tidLists = TRUE))
summary(s1)
as(s1,"data.frame")
?read_baskets
as(zaki,"data.frame")
?cspade
s1
as(s1,"data.frame")
s2 <- cspade(zaki, parameter = list(support = 0.4),
control   = list(verbose = TRUE, tidLists = FALSE))
as(s2,"data.frame")
s1 <- cspade(zaki, parameter = list(support = 0.4),
control   = list(verbose = TRUE, tidLists = TRUE))
s1 <- cspade(zaki, parameter = list(support = 0),
control   = list(verbose = TRUE, tidLists = TRUE))
as(s1,"data.frame")
as(zaki,"data.frame")
summary(tidLists(s1))
tidLists(s1)
as(tidLists(s1),'data.frame')
class(tidLists(s1))
?tidLists
data <- list(
c("a","b","c"),
c("a","b"),
c("a","b","d"),
c("b","e"),
c("b","c","e"),
c("a","d","e"),
c("a","c"),
c("a","b","d"),
c("c","e"),
c("a","b","d","e")
)
data <- as(data, "transactions")
tl <- as(data, "tidLists")
t1
tl
inspect(tl)
tl0 = tidLists(zaki)
tl0 = as(zaki,"tidLists")
tl0
inspect(tl0)
class(s1)
inspect(s1)
summary(tidLists(s1))
head(inspect(tidLists(s1)))
inspect(tl0)
inspect(tidLists(s2))
s2 <- cspade(zaki, parameter = list(support = 0.3),
control   = list(verbose = TRUE, tidLists = FALSE))
inspect(tidLists(s2))
s2 <- cspade(zaki, parameter = list(support = 0.3),
control   = list(verbose = TRUE, tidLists = TRUE))
head(inspect(tidLists(s2)))
transactionInfo(tidLists(s1))
t <- zaki
transactionInfo(t)$classID <-
as.integer(transactionInfo(t)$sequenceID) %% 2 + 1L
transactionInfo(t)
s3 <- cspade(t, parameter = list(support = 0.4, maxgap = 5))
as(s3, "data.frame")
s2 <- cspade(zaki, parameter = list(support = 0.4, maxgap = 5))
as(s2, "data.frame")
as(s1,"data.frame")
as(frequent_sequences,"data.frame")
zaki
as(s2, "data.frame")
zaki
inspect(zaki)
class(zaki)
t <- zaki
transactionInfo(t)
seq(t)
transactionInfo(t)$sequenceID
transactionInfo(t)$eventID <-
unlist(tapply(seq(t), transactionInfo(t)$sequenceID,
function(x) x - min(x) + 1), use.names = FALSE)
as(t, "data.frame")
s4 <- cspade(t, parameter = list(support = 0.4))
identical(as(s1, "data.frame"), as(s4, "data.frame"))
s4
inspect(s4)
as(s4, "data.frame")
s5 <- cspade(zaki, parameter = list(support = .25, maxgap = 5))
length(s5)
?support
k <- support(s5, zaki, control   = list(verbose = TRUE,
parameter = list(maxwin = 5)))
as(s5,"data.frame")
head(as(s5,"data.frame"))
table(size(s5[k == 0]))
size(s5[k == 0])
s5[k == 0]
inspect(s5)
names(as(s5,"data.frame"))
str(s5)
item = factor(c("A","B","B","A","B","A","C","A","B","C","B","A","B","A","A","B","A","B"))
rep(1,4)
seqid = c(rep(1,5),rep(2,6),rep(3,3),rep(4,4))
eventid = c(10,10,20,30,30,20,20,30,30,30,50,10,30,40,30,30,40,50)
data = data.frame(item = item)
data.tran = as(data,"transactions")
transactionInfo(data.tran)$sequenceID = seqid
transactionInfo(data.tran)$eventID = eventid
transactionInfo(data.tran)
data.frame(item = item)
result = cspade(data.tran,parameter = list(support = 0.5),control = list(verbose = TRUE))
eventids = c(10,15,20,30,35,20,25,30,35,40,50,10,30,40,30,35,40,50)
transactionInfo(data.tran)$eventID = eventids
result = cspade(data.tran,parameter = list(support = 0.5),control = list(verbose = TRUE))
result = sort(result,by = "support")
inspect(result)
result.1 = result[grep(".*item=B.*",as(result,"data.frame")$sequence)]
as(result.1,"data.frame")
as(result,"data.frame")
result.2 = result[grep(".*item=B.*[^\\}]*\\}>",as(result,"data.frame")$sequence)]
as(result.2,"data.frame")
result.2 = result[grep(".*item=B[^\\}]*\\}>",as(result,"data.frame")$sequence)]
as(result.2,"data.frame")
result.3 = result[grep("<\\{[^\\}]*item=B.*",as(result,"data.frame")$sequence)]
as(result.3,"data.frame")
tmpp = read.fwf("~/data/anonymous-msweb.test",widths = c(60))
View(tmpp)
?read.fwf
train_list = tmpp$V1
length(train_list)
nrow(train_list)
str(train_list)
class(train_list)
View(tmpp)
View(tmpp)
tmp_page = c(0)
tmp_sequenceid = c(0)
tmp_eventid = c(0)
m = 0
sequenceid = 0
train_length = length(train_list)
for(i in 302:train_length){
tmp = unlist(strsplit(as.character(train_list[i]),","))
if(tmp[1]=="C"){
sequenceid = sequenceid + 1
eventid = 0
}
else if(tmp[1]=="V"){
m = m+1
eventid = eventid + 1
tmp_sequenceid[m] = sequenceid
tmp_eventid[m] = eventid
tmp_page[m] = as.numeric(tmp[2])
}
}
tmp_page = factor(tmp_page)
data
data = data.frame(page = tmp_page,seqid = tmp_sequenceid,eventid = tmp_eventid)
View(data)
data$seqid[which(data$page == 1034)]
data.user = data[data$page==user.page,]
user.page = 1034
data.user = data[data$page==user.page,]
View(data.user)
unique(data.user$page)
unique(data.user$seqid)
data.user = data[data$seqid == unique(data$seqid[which(data$page==user.page)]),]
data.user = data[data$seqid %in% unique(data$seqid[which(data$page==user.page)]),]
tmp_data = data.frame(page=data.user$page,sequenceID=data.user$seqid,eventID=data.user$eventid)
data.tran = as(tmp_data,"transactions")
tmp_data = data.frame(page=data.user$page)
data.tran = as(tmp_data,"transactions")
data.tran$sequenceID = data.user$seqid
transactionInfo(data.tran)$sequenceID = data.user$seqid
transactionInfo(data.tran)$eventID = data.user$eventid
result = cspade(data.tran,parameter = list(support = 0,maxlen = 2),control = list(verbose = TRUE))
result = sort(result,by = "support")
inspect(result)
result.2 = result[grep(paste0(".*page=",user.page,"[^\\}]*\\}"),as(result,"data.frame")$sequence)]
inspect(result.2)
result.data.frame = as(result.2[-1],"data.frame")
persent = result.data.frame$support/sum(result.data.frame$support)
View(result.data.frame)
sum(result.data.frame$support)
sum.persent = cumsum(persent)
sum.persent
result.data.frame = cbind(result.data.frame,persent,sum.persent)
View(result.data.frame)
user.page
result.2 = result[grep(paste0(".*page=",user.page,"[^\\}]*\\}>"),as(result,"data.frame")$sequence)]
result.data.frame = as(result.2[-1],"data.frame")
persent = result.data.frame$support/sum(result.data.frame$support)
sum.persent = cumsum(persent)
result.data.frame = cbind(result.data.frame,persent,sum.persent)
View(result.data.frame)
?regexpr
regexpr("<\\{page=",result.data.frame$sequence[1])
regexpr("\\}",result.data.frame$sequence[1])[1]-1
regexpr("<\\{page=",result.data.frame$sequence[1])+7
page = 0;i=1
for(i.seq in result.data.frame$sequence){
real_seq1 = regexpr("<\\{page=",i.seq)+7
real_seq2 = regexpr("\\}",i.seq)[1]-1
page[i] = substr(i.seq,real_seq1,real_seq2)
i = i+1
}
?substr
result.data.frame$sequence[1]
for(i.seq in result.data.frame$sequence){
real_seq1 = regexpr("<\\{page=",i.seq)[1]+7
real_seq2 = regexpr("\\}",i.seq)[1]-1
page[i] = substr(i.seq,real_seq1,real_seq2)
i = i+1
}
length("<\\{page=")
nchar("<\\{page=")
nchar("<\{page=")
i=1;uv=0
for(i.page in page){
uv[i]=length(unique(data$seqid[which(data$page==i.page)]))
i=i+1
}
conf=result.data.frame$support*result@info$sequences/uv
conf
result@info$sequences
conf=result.data.frame$support*result@info$nsequences/uv
?lines
?barplot
barplot(as.matrix(result.data.frame$persent,nrow = 1),ylim = c(0,1),beside = TRUE,xlab ="page name",main = "ability to introduce user to page 1034")
barplot(as.matrix(result.data.frame$persent,nrow = 1),ylim = c(0,1),beside = F,xlab ="page name",main = "ability to introduce user to page 1034")
result.data.frame = cbind(result.data.frame,conf=conf,page=page)
text(0.5+1:nrow(result.data.frame),result.data.frame$conf,labels = paste0(round(result.data.frame$conf*100,2),"%"))
barplot(as.matrix(result.data.frame$persent,nrow = 1),ylim = c(0,1),beside = TRUE,xlab ="page name",main = "ability to introduce user to page 1034")
lines(0.5+1:nrow(result.data.frame),result.data.frame$conf,col = "red",type = "b")
text(0.5+1:nrow(result.data.frame),result.data.frame$conf,labels = paste0(round(result.data.frame$conf*100,2),"%"))
barplot(as.matrix(result.data.frame$persent,nrow = 1),ylim = c(0,1),beside = TRUE,xlab ="page name",main = "ability to introduce user to page 1034")
View(result.data.frame)
as.matrix(result.data.frame$persent,nrow = 1)
result.data.frame = result.data.frame[1:165,]
barplot(as.matrix(result.data.frame$persent,nrow = 1),ylim = c(0,1),beside = TRUE,xlab ="page name",main = "ability to introduce user to page 1034")
lines(0.5+1:nrow(result.data.frame),result.data.frame$conf,col = "red",type = "b")
barplot(as.matrix(result.data.frame$persent,nrow = 1),ylim = c(0,1),beside = TRUE,xlab ="page name",main = "ability to introduce user to page 1034")
lines(0.5+1:nrow(result.data.frame),result.data.frame$conf,col = "red",type = "b")
text(0.5+1:nrow(result.data.frame),result.data.frame$conf,labels = paste0(round(result.data.frame$conf*100,2),"%"))
barplot(as.matrix(result.data.frame[1:20,]$persent,nrow = 1),ylim = c(0,1),beside = TRUE,xlab ="page name",main = "ability to introduce user to page 1034")
lines(0.5+1:nrow(result.data.frame[1:20,]),result.data.frame$conf,col = "red",type = "b")
text(0.5+1:nrow(result.data.frame[1:20,]),result.data.frame$conf,labels = paste0(round(result.data.frame$conf*100,2),"%"))
barplot(as.matrix(result.data.frame[1:20,]$persent,nrow = 1),ylim = c(0,1),beside = TRUE,xlab ="page name",main = "ability to introduce user to page 1034")
lines(0.5+1:nrow(result.data.frame[1:20,]),result.data.frame$conf,col = "red",type = "b")
lines(0.5+1:nrow(result.data.frame[1:20,]),result.data.frame[1:20,]$conf,col = "red",type = "b")
text(0.5+1:nrow(result.data.frame[1:20,]),result.data.frame[1:20,]$conf,labels = paste0(round(result.data.frame$conf*100,2),"%"))
barplot(as.matrix(result.data.frame[1:20,]$persent,nrow = 1),ylim = c(0,1),beside = TRUE,xlab ="page name",main = "ability to introduce user to page 1034")
lines(0.5+1:nrow(result.data.frame[1:20,]),result.data.frame[1:20,]$conf,col = "red",type = "b")
text(0.5+1:nrow(result.data.frame[1:20,]),result.data.frame[1:20,]$conf,labels = paste0(round(result.data.frame$conf*100,2),"%"))
barplot(as.matrix(result.data.frame[1:20,]$persent,nrow = 1),ylim = c(0,1),beside = TRUE,xlab ="page name",main = "ability to introduce user to page 1034")
lines(0.5+1:nrow(result.data.frame[1:20,]),result.data.frame[1:20,]$conf,col = "red",type = "b")
text(0.5+1:nrow(result.data.frame[1:20,]),result.data.frame[1:20,]$conf,labels = paste0(round(result.data.frame[1:20,]$conf*100,2),"%"))
axis(1,at=0.5+1:nrow(result.data.frame[1:20,]),labels = result.data.frame[1:20,]$page,tick = F)
barplot(as.matrix(result.data.frame[1:20,]$persent,nrow = 1),ylim = c(0,1),beside = TRUE,xlab ="page name",main = "ability to introduce user to page 1034")
lines(0.5+1:nrow(result.data.frame[1:20,]),result.data.frame[1:20,]$conf,col = "red",type = "b")
text(0.5+1:nrow(result.data.frame[1:20,]),result.data.frame[1:20,]$conf,labels = paste0(round(result.data.frame[1:20,]$conf*100,2),"%"))
axis(1,at=0.5+1:nrow(result.data.frame[1:20,]),labels = result.data.frame[1:20,]$page,tick = F)
dates = 20170501:20170531
dates_str = as.character(dates)
dates = as.Date(dates_str,'%Y%m%d')
dates_fm = format(dates,'%Y-%m-%d')
assignorderbydates = function(dates){
for(date in dates){
query_temp = "select mobile,prod_name,cont_cat1_name,cont_cat2_name,cont_cat3_name,to_date(ordr_date) from dl.fct_ordr d
where ((d.ordr_status not in ('1','7','19') and d.sale_type<>'oms') or (d.ordr_status ='Y' and d.sale_type='oms')) and to_date(ordr_date) = '"
query = paste0(query_temp,date,"'")
result = read_data_impala_general(query)
assign(paste0('order',date),result,envir = .GlobalEnv)
}}
source('~/Rfile/R_impala.R')
source('~/Rfile/toolfunc.R')
source2('~/Rfile/R_hive.R',7,17)
library(data.table)
if(!require(arules)){
install.packages('arules')
library(arules)
}
assignorderbydates(dates_fm)
ln = lapply(lll,'eval')
ll = paste0('order',dates_fm)
lll = lapply(ll,'as.name')
ln = lapply(lll,'eval')
data_hive = rbindlist(ln)
data_hive = data.table(data_hive)
order.list.nona = data_hive[!is.na(cont_cat3_name),]
order.list.nodup = unique(order.list.nona, by=c("mobile", "cont_cat3_name"))
prepare.list = aggregate(cont_cat3_name~mobile,data = order.list.nodup,paste)
View(prepare.list)
frequentsets=eclat(prepare.list$cont_cat3_name,parameter=list(support=0.001,maxlen=20))  #求频繁项集
inspect(frequentsets)
rules <- apriori(prepare.list$cont_cat3_name, parameter = list(supp=0.0001,confidence=0.1, minlen = 2))
inspect(head(sort(rules), n=10))
quality(rules)
inspect(head(sort(rules, by = "lift"), n=200))
library(xlsx)
write.xlsx(data_hive,"~/data/order_data_may.xlsx")
?write_xlsx
library(openxlsx)
write_xlsx(data_hive,"~/data/order_data_may.xlsx")
?"openxlsx"
write.xlsx(data_hive,"~/data/order_data_may.xlsx")
dir.create("./data")
save.image(file = "./data/order.RData")
rm(list = ll)
plot(head(sort(rules, by = "lift"), n=50), method = "graph", control=list(cex=.8))
plot(head(sort(rules, by = "lift"), n=50), method = "graph", control=list(cex=1.8))
plot(head(sort(rules, by = "lift"), n=50), method = "graph", control=list(cex=1.8))
plot(head(sort(rules, by = "lift"), n=50), method = "graph", control=list(cex=1.2))
plot(rules)
itemFrequencyPlot(items(rules), topN=30, cex.names=.6)
itemFrequencyPlot(items(rules), topN=30, cex.names=.6,col = "red")
inspect(head(sort(rules, by = "support"), n=200))
plot(rules, measure = c("support", "lift"), shading = "confidence")
plot(rules, shading = "order", control = list(main = "Two-key plot"))
sel <- plot(rules, measure = c("support", "lift"), shading = "confidence",interactive = TRUE)
0.3
plot(rules, method = "grouped")
plot(rules, method = "grouped",control = list(k = 50))
plot(rules, method = "grouped",control = list(k = 50),interactive = TRUE)
subrules2 <- head(sort(rules, by = "lift"), 10)
plot(subrules2, method = "graph")
plot(subrules2, method = "graph",cex = 1.8)
plot(subrules2, method = "graph",control=list(cex=1.2))
inspect(subrules2)
plot(head(sort(rules, by = "lift"), n=50), method = "graph", control=list(cex=1.2))
?plot.rules
plot(subrules2, method="paracoord")
plot(rules, method="matrix", measure=c("lift", "confidence"))
plot(rules, method="matrix3D", measure="lift")
plot(rules, method="matrix3D", measure="lift", control=list(reorder=TRUE))
plot(rules, shading="order", control = list(main = "Two-key plot",
col=rainbow(max(size(rules))-1L)))
plot(subrules2, method="doubledecker")
plot(subrules2, method = "graph", control = list(type = "items",edgeCol = 'red'))
png('./pics/graph1')
plot(subrules2, method = "graph", control = list(type = "items",edgeCol = 'red'))
dev.off()
png('./pics/graph1.png')
plot(subrules2, method = "graph", control = list(type = "items",edgeCol = 'red'))
dev.off()
plot(subrules2, method="paracoord")
rules = apriori(Groceries,parameter = list(support = 0.001,confidence = 0.5))
subrules2 <- head(sort(rules, by = "lift"), 10)
oneRule = sample(rules,1)
inspect(oneRule)
plot(oneRule, method="doubledecker", data = Groceries)
oneRule = sample(rules,1)
inspect(oneRule)
plot(oneRule, method="doubledecker", data = Groceries)
itemsets <- eclat(Groceries, parameter = list(support = 0.02, minlen=2))
plot(itemsets, method="graph")
plot(itemsets, method="paracoord", control=list(alpha=.5, reorder=TRUE))
plot(itemsets, method="paracoord", control=list(alpha=.5, reorder=TRUE))
plot(oneRule, method = "mosaic", data = Groceries)
plot(subrules2, method="paracoord")
plot(rules, method="matrix", measure=c("lift", "confidence"))
plotly_arules(x, method = "scatterplot", measure = c("support", "confidence"),
shading = "lift", max = 1000, ...)
plotly_arules(rules, method = "scatterplot", measure = c("support", "confidence"),
shading = "lift", max = 1000)
rules <- apriori(prepare.list$cont_cat3_name, parameter = list(supp=0.0001,confidence=0.1, minlen = 2))
plotly_arules(rules, method = "scatterplot", measure = c("support", "confidence"),
shading = "lift", max = 1000)
plotly_arules(rules, method = "matrix")
p <- plotly_arules(rules)
htmlwidgets::saveWidget(p, "arules.html", selfcontained = FALSE)
library(htmlwidgets)
?"htmlwidgets"
browseURL("arules.html")
plotly_arules(rules, jitter = 10, opacity = .7, size = 10, symbol = 1,
colors = c("blue", "green"))
inspectDT(rules)
saveAsGraph(rules, "rules.graphml")
View(data_hive)
library(readxl)
View(data_hive)
>
# library(arules)
?rules
?plot.rules
frequentsets=eclat(prepare.list$cont_cat3_name,parameter=list(support=0.001,maxlen=20))  #求频繁项集
rules <- apriori(prepare.list$cont_cat3_name, parameter = list(supp=0.0001,confidence=0.1, minlen = 2))
sel <- plot(rules, measure = c("support", "lift"), shading = "confidence",interactive = TRUE)
plotly_arules(rules, method = "scatterplot", measure = c("support", "confidence"),
shading = "lift", max = 1000)
p <- plotly_arules(rules)
htmlwidgets::saveWidget(p, "./Rmarkdown/arules.html", selfcontained = FALSE)
htmlwidgets::saveWidget(p, "~/Rmarkdown/arules.html", selfcontained = FALSE)
path.expand("./Rmarkdown")
dir.exists("./Rmarkdown")
dir.exists("./Rmarkdown/a")
debugger()
traceback()
?grid.raster
1
itemFrequencyPlot(items(rules), topN=30, cex.names=.6,col = "red")
itemFrequencyPlot(items(rules), topN=30, cex.names=.6,col = "purple")
?inspect
data("Adult")
rules <- apriori(Adult)
inspect(rules[1000])
inspect(rules[1000], ruleSep = "---->", itemSep = " + ", setStart = "", setEnd ="",
linebreak = FALSE)
?plot.rules
plot(subrules2,method = "graph",control = list(type = 'itemsets'))
plot(subrules2,method = "graph",control = list(type = 'itemsets',col = "red"))
plot(subrules2,method = "graph",control = list(type = 'itemsets',edgeCol = "red"))
saveDot(head(sort(rules,by="lift"),1000),file="rules.dot")
plot(subrules2,method="graph",control=list(type="bipartite"))
plot(subrules2,method="graph",control=list(type="bipartite"))

source('~/R_Projects/test_project/test/test_file.R')
debug(f)
debug(f)
debug(g)
debug(f)
f()
source('~/R_Projects/test_project/test/test_file.R')
f()
debug(f)
f
f()
source('~/R_Projects/test_project/test/test_file.R')
f()
debug(g)
g()
g()
g()
where
q
source('~/R_Projects/test_project/test/test_file.R')
undebug(g)
g()
undebug(f)
f()
f = function(){
x = 1
y = x+1
d = 2
browser(y<1)
return(x/y+d)
}
g()
source('~/R_Projects/test_project/test/test_file.R')
f*()
f()
g()
source('~/R_Projects/test_project/test/test_file.R')
f()
source('~/R_Projects/test_project/test/test_file.R')
f()
source('~/R_Projects/test_project/test/test_file.R')
f()
i
sum
source('~/R_Projects/test_project/test/test_file.R')
source('~/R_Projects/test_project/test/test_file.R')
f()
i
?browser
source('~/R_Projects/test_project/test/test_file.R')
f()
i
source('~/R_Projects/test_project/test/test_file.R')
class(i>49)
class((i>49))
class(expression(i>49))
source('~/R_Projects/test_project/test/test_file.R')
f()
setBreakpoint('./Rfile/test_file.R',5)
setBreakpoint('test_file.R',5)
f()
i
untrace(f)
f()
i
untrace(f)
f()
trace(f,print(1))
f()
trace(f,print)
source('~/R_Projects/test_project/test/test_file.R')
trace(f,print)
f()
trace(f,print,x)
trace(f,print,1)
f()
trace(f,browser)
f()
untrace(f)
tracingState()
f()
g()
?tracingState
tracingState(T)
f()
tracingState(F)
f()
tracingState(T)
f()
tracingState(T)
tracingState(T)
tracingState(F)
f()
f()
tracingState()
f()
tracingState()
waring()
warning()
debugger()
debugSource('~/R_Projects/test_project/test/test_file.R')
f()
debugger()
options()$error
options()
option = options()
option$error
traceback()
f()
traceback()
options(error = dump.frames)
f()
debugger()
Rprof()
source('~/R_Projects/test_project/test/test_file.R')
invisible(f)
Rprof(NULL)
summaryRprof()
e=function() for(i in 1:length(x)){z[i]=x[i]+y[i]}
x=runif(1000000)
y=runif(1000000)
system.time(e())
z=vector(mode = 'numeric',length = 1000000)
system.time(e())
library(compiler)
ce = cmpfun(e)
system.time(ce())
ce
setClass('employee',representation(name = 'character',salary = 'numeric',union = 'logical'))
employee
joe = new('employee','joe',55000,T)
joe = new('employee',name = 'joe',salary = 55000,union = T)
joe@salary
slot(joe,"salary")
joe@salary = 65000
joe
slot(joe,"salary") = 88000
joe
joe@salry = 50000
show(joe)
setMethod("showDetail","employee",function(object){
inorout = ifelse(object@union,"is","isnot")
cat(object@name,"has a salary of",object@salary,"and",inorout,"in the union","\n")
}
}
setMethod("showDetail","employee",function(object){
inorout = ifelse(object@union,"is","is not")
cat(object@name,"has a salary of",object@salary,"and",inorout,"in the union","\n")
})
setMethod("show","employee",function(object){
inorout = ifelse(object@union,"is","is not")
cat(object@name,"has a salary of",object@salary,"and",inorout,"in the union","\n")
})
show(joe)
search()
(.packages())
ls()
ls(pattern="jo")
a = 1
a
b
b=2
c
d
d = 4
rm(list = c('a','b','d'))
z = rnorm(10000)
hz = hist(z)
plot(hz)
str(hz)
save(hz,'hzfile')
save(hz,'hzfile.RData')
file.create("hzfile.RData")
save(hz,'hzfile.RData')
save(hz,'./hzfile.RData')
getwd()
save(hz,'~/hzfile.RData')
path.expand('~/hzfile.RData')
path.expand('./hzfile.RData')
save(hz,'hzfile.RData')
?save
save(hz,file = 'hzfile.RData')
rm(hz)
load("hzfile.RData")
names(joe)
attributes(joe)
exists('hz')
?lm
x = c(1,2,3)
y = c(1,3,8)
lmout = lm(y~x)
class(lmout)
lmout
class(lmout$call)
?call
call("round", 10.5)
class(call("round", 10.5))
eval(call("round", 10.5))
parse(call("round", 10.5))
class(lmout)
class(unclass(lmout))
unclass(lmout)
install.packages("Ropencv")
library(githubinstall)
githubinstall("Ropencv")
methods()
methods("print")
?cat
cat('we are the champons','spell')
cat('we are the champons',file = 'spell')
aspell("spell")
library(aspell)
install.packages("aspell")
?aspell
files <- Sys.glob("spell")
aspell(files)
j = list(name = "joe",salary = 55000,union = T)
class(j) = "employee"
attributes(j)
j
methods(,"employee")
print.employee = function(wrk){
cat(wrk$name,"\n")
cat("salary",wrk$salary,"\n")
cat("union member",wrk$union,"\n")
}
method(,"employee")
methods(,"employee")
print(j)
k = list(name = "Kate",salary = 68000,union = F,hrsthismonth = 2)
class(k) = c("hrlyemployee","employee")
k
?cspade
library(arulesSequences)
a<-c(1.55, 3.18 ,1.92, 2.83 ,2.84, 2.98 ,4.20, 1.05 ,3.69, 0.74 ,1.84 ,3.22 ,3.77 ,2.91,4.72, 1.90,2.03, 3.70 ,4.10, 4.05, 5.54, 3.18 ,2.89, 4.31, 4.62, 5.45, 1.88 ,2.79,
4.14, 1.02, 7.95, 7.22 ,4.68, 2.26, 2.38, 2.12, 4.25, 1.94 ,2.03, 3.70 ,2.01)
b<-rgamma(41,4.472,1.3726)
qqplot(a,b)
qqplot
qqplot(a,b)
?qqplot
norms = rnorm(1000)
?ks.test
ks.test(norms,'pnorm')
x <- rnorm(50)
y <- runif(30)
# Do x and y come from the same distribution?
ks.test(x, y)
?t.test
?"stats"
library(help = "stats").
library(help = "stats")
install.packages("tabulizer")
library(dplyr)
Sys.setenv(LANG = "en")
library(tools)
?install_github
?github_install
library(devtools)
install_github("ropensci/tabulizer")
library(tabulizer)
location <- 'http://www.edd.ca.gov/jobs_and_training/warn/WARN-Report-for-7-1-2016-to-10-25-2016.pdf'
out <- extract_tables(location)
location = "C:\Users\qingye.yuan\Desktop\教程下载\1312.6184.pdf"
location = "C:/Users/qingye.yuan/Desktop/教程下载/1312.6184.pdf"
out <- extract_tables(location)
View(out[[1]])
?extract_tables
location = "C:/Users/qingye.yuan/Desktop/教程下载/R语言与网站分析.pdf"
out <- extract_tables(location,method = "data.frame",pages = 32)
out <- extract_tables(location,method = "data.frame",pages = 33)
location = "C:/Users/qingye.yuan/Desktop/教程下载/机器学习实战.pdf"
out <- extract_tables(location,method = "data.frame",pages = 9)
out <- extract_tables(location,method = "data.frame",pages = 9,columns = 6)
out <- extract_tables(location,method = "data.frame",pages = 9,columns = list(6))
sos_url <- "http://elections.cdn.sos.ca.gov/sov/2016-general/sov/04-historical-voter-reg-participation.pdf"
out <- extract_tables(sos_url,method = "data.frame")
View(out[[1]])
colnames(out[[1]]) = out[[1]][1,]
View(out[[1]])
out[[1]] = NULL
View(out[[1]])
out <- extract_tables(sos_url,method = "data.frame")
colnames(out[[1]]) = out[[1]][1,]
out[[1]][1,] = NULL
out[[1]] = out[[1]][-1,]
View(out[[1]])
install_github("ropensci/tesseract")
library(tesseract)
install_github("ropensci/tesseract")
library(curl)
library(Rcpp)
install.packages("curl")
install.packages("curl")
library(curl)
library(dplyr)
library(devtools)
installed_packages = installed.packages()
View(installed_packages)
remove.packages("curl")
install.packages("curl")
install_github("ropensci/tesseract")
library(devtools)
library(curl)
install.packages("Rcpp")
library(Rcpp)
install_github("ropensci/tesseract")
install_github("ropensci/tesseract")
library(tesseract)
library(tesseract)
text = ocr("http://jeroen.github.io/images/testocr.png")
text
help(package = tesseract())
help(package = tesseract)
table = ocr("http://img5.imgtn.bdimg.com/it/u=2065876944,3765551109&fm=26&gp=0.jpg")
table = ocr("D://Downloads/view.jpg")
table
tesseract_info()
tesseract_download("chi_sim")
chinese = tesseract("chi_sim")
table = ocr("D://Downloads/view.jpg")
tabel
table
text <- ocr("http://ocrapiservice.com/static/images/examples/french_text.png", engine = french)
table = ocr("D://Downloads/view.jpg",engine = chinese)
table
?ocr
cat(table)
text1 <- ocr("http://jeroen.github.io/files/dog_lq.png")
cat(text1)
text2 <- ocr("http://jeroen.github.io/files/dog_hq.png")
cat(text2)
digits = ocr("D://Downloads/view2.jpg")
digits = ocr("D://Downloads/view2.png")
digits
library(tabulizer)
out <- extract_tables("D://Downloads/view2.png",method = "data.frame")
out <- extract_tables("D://Downloads/view2.png")
sos_url <- "http://elections.cdn.sos.ca.gov/sov/2016-general/sov/04-historical-voter-reg-participation.pdf"
out <- extract_tables(sos_url,method = "data.frame")
?extract_tables
zhejiang_mall = extract_tables("C://Users/qingye.yuan/Downloads/mall.pdf",pages = 10)
zhejiang_mall = extract_tables("C://Users/qingye.yuan/Downloads/mall.pdf",pages = 10,encoding = "utf-8")
zhejiang_mall[[1]]
zhejiang_mall = extract_tables("C://Users/qingye.yuan/Downloads/mall.pdf",pages = 10,encoding = "UTF-8")
zhejiang_mall[[1]]
malls = extract_tables("C://Users/qingye.yuan/Downloads/mall.pdf")
malls = extract_tables("C://Users/qingye.yuan/Downloads/mall.pdf",encoding = "UTF-8")
malls[[2]]
library(tesseract)
text = ocr("http://jeroen.github.io/images/testocr.png")
chinese = tesseract("chi_sim")
table = ocr("D://Downloads/view.jpg",engine = "chi_sim")
?ocr

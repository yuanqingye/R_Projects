data ("BostonHousing", package="mlbench")
original <- BostonHousing  # backup original data
set.seed(100)
BostonHousing[sample(1:nrow(BostonHousing), 40), "rad"] <- NA
BostonHousing[sample(1:nrow(BostonHousing), 40), "ptratio"] = NA
library(mice)
#check missing value pattern
md.pattern(BostonHousing)  # pattern or missing values in data.
lm(medv ~ ptratio + rad, data=BostonHousing, na.action=na.omit)
library(rpart)
class_mod <- rpart(rad ~ . - medv, data=BostonHousing[!is.na(BostonHousing$rad), ], method="class", na.action=na.omit)  # since rad is a factor
anova_mod <- rpart(ptratio ~ . - medv, data=BostonHousing[!is.na(BostonHousing$ptratio), ], method="anova", na.action=na.omit)  # since ptratio is numeric.
rad_pred <- predict(class_mod, BostonHousing[is.na(BostonHousing$rad), ])
ptratio_pred <- predict(anova_mod, BostonHousing[is.na(BostonHousing$ptratio), ])
View(rad_pred)
colnames(BostonHousing)
rad_pred <- predict(class_mod, BostonHousing[is.na(BostonHousing$rad), c(-"medv",-"rad")])
rad_pred <- predict(class_mod, BostonHousing[is.na(BostonHousing$rad),!(colnames(BostonHousing) %in%c("medv","rad")])
rad_pred <- predict(class_mod, BostonHousing[is.na(BostonHousing$rad),!(colnames(BostonHousing)%in%c("medv","rad"))])
rad_pred <- predict(class_mod, BostonHousing[is.na(BostonHousing$rad),-(colnames(BostonHousing)%in%c("medv","rad"))])
colnames(BostonHousing)%in%c("medv","rad")
!names(BostonHousing) %in% "medv"
BostonHousing[is.na(BostonHousing$rad),!(colnames(BostonHousing)%in%c("medv","rad"))]
View(BostonHousing[is.na(BostonHousing$rad)])
View(BostonHousing[is.na(BostonHousing$rad),])
rad_pred <- predict(class_mod, BostonHousing[is.na(BostonHousing$rad),!(colnames(BostonHousing)%in%c("medv","rad"))])
rad ~ . - medv
rad_pred <- predict(class_mod, BostonHousing[is.na(BostonHousing$rad),!(colnames(BostonHousing)%in%c("rad"))])
actuals <- original$ptratio[is.na(BostonHousing$ptratio)]
predicteds <- ptratio_pred
regr.eval(actuals, predicteds)
library(DMwR)
regr.eval(actuals, predicteds)
apply(BostonHousing,1,which.max)
apply(rad_pred,1,which.max)
apply(rad_pred,1,colnames(rad_pred)[which.max])
colnames(rad_pred)[apply(rad_pred,1,which.max)]
actuals <- original$rad[is.na(BostonHousing$rad)]
predicteds <- miceOutput[is.na(BostonHousing$rad), "rad"]
mean(actuals != predicteds)  # compute misclass error.
library(mice)
miceMod <- mice(BostonHousing[, !names(BostonHousing) %in% "medv"], method="rf")  # perform mice imputation, based on random forests.
?mice
miceOutput <- complete(miceMod)  # generate the completed data.
View(miceOutput)
actuals <- original$rad[is.na(BostonHousing$rad)]
actuals
rad_pred
!names(BostonHousing) %in% "medv"
BostonHousing[, !names(BostonHousing) %in% "medv"]
anyNA(miceOutput)
md.pattern(BostonHousing)  # pattern or missing values in data.
library(mice)
md.pattern(BostonHousing)  # pattern or missing values in data.
options()
0.4^4*0.6^6
0.3^4*0.7^6
0.5^4*0.5^6
656/750
library(zoo)
a = 1:7
a[4] = NA
y1 = na.approx(a)
y2 = na.spline(a)
y1
y2
?na.spline
Sys.getenv()
?knnImputation
help(package = "DMwR")
help(package = "DMwR")
View(BostonHousing[, !names(BostonHousing) %in% "medv"])
?regr.eval
library(DMwR)
?regr.eval

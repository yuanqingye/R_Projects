ceiling(1385/5)
?rep
rep(1:5,ceiling(1385/5))
rep(1:4,each = 2)
rep(1:4, each = 2, len = 4)
library(rpart.plot)
n=1385
zz1=1:n
zz2=rep(1:5,ceiling(1385/5))[1:n]
set.seed(100)
zz2=sample(zz2,n) #有放回抽样
NMSE=rep(0,5)
NMSE0=NMSE
library(rpart.plot)
for(i in 1:5){
m=zz1[zz2==i]
#决策树回归
library(rpart.plot)
a=rpart(w$y~.,w[,-m])
rpart.plot(a,type=2,faclen=T) #画决策树回归图
y0<-predict(a,w[-m,]) #对训练集集预测
y1=predict(a,w[m,])  #对测试集预测
NMSE0[i]=mean((w$y[-m]-y0)^2)/mean((w$y[-m]-mean(w$y[-m]))^2)
NMSE[i]=mean((w$y[m]-y1)^2)/mean((w$y[m]-mean(w$y[m]))^2)
}
data("bodyfat", package = "TH.data")
dim(bodyfat)
View(bodyfat)
attributes(bodyfat)
bodyfat[1:5,]
set.seed(1234)
ind <- sample(2, nrow(bodyfat), replace=TRUE, prob=c(0.7, 0.3))
ind
?sample
bodyfat.train <- bodyfat[ind==1,]
bodyfat.test <- bodyfat[ind==2,]
library(rpart)
myFormula <- DEXfat ~ age + waistcirc + hipcirc + elbowbreadth + kneebreadth
bodyfat_rpart <- rpart(myFormula, data = bodyfat.train,control = rpart.control(minsplit = 10))
plot(bodyfat_rpart)
text(bodyfat_rpart, use.n=T)
opt <- which.min(bodyfat_rpart$cptable[,"xerror"])
bodyfat_rpart$cptable
library(rpart.plot)
prp(bodyfat_rpart)
plot(bodyfat_rpart)
prp(bodyfat_rpart)
opt <- which.min(bodyfat_rpart$cptable[,"xerror"])
cp <- bodyfat_rpart$cptable[opt, "CP"]
bodyfat_prune <- prune(bodyfat_rpart, cp = cp)
plot(bodyfat_rpart)
text(bodyfat_rpart, use.n=T)
prp(bodyfat_rpart)
bodyfat_rpart <- rpart(myFormula, data = bodyfat.train,control = rpart.control(minsplit = 10))
prp(bodyfat_rpart)
bodyfat_rpart$cptable
opt
opt <- which.min(bodyfat_rpart$cptable[,"xerror"])
opt
?prune
prune(bodyfat_rpart, cp = cp)
prp(bodyfat_prune)
help("complexity parameter")
help(cp)
help("cp")
help("rpart")
DEXfat_pred <- predict(bodyfat_prune, newdata=bodyfat.test)
xlim <- range(bodyfat$DEXfat)
plot(DEXfat_pred ~ DEXfat, data=bodyfat.test, xlab="Observed",ylab="Predicted", ylim=xlim, xlim=xlim)
abline(a=0, b=1)
printcp(bodyfat_rpart)
?plotcp
plotcp(bodyfat_rpart)
set.seed(4321)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
library(randomForest)
rf <- randomForest(Species ~ ., data=trainData, ntree=100, proximity=TRUE)
table(predict(rf), trainData$Species)
table(predict(rf,testData),testData$Species)
ct = ctree(Species~.,data=trainData)
library(party)
Sys.setenv(LANG = "en")
detach(party)
?detach
detach(package:party)
library(party)
ct = ctree(Species~.,data=trainData)
table(predict(ct,testData),testData$Species)
rf <- randomForest(Species ~ ., data=trainData, ntree=100, proximity=TRUE)
table(predict(rf), trainData$Species)
table(predict(rf,testData), testData$Species)
plot(rf)
plot(margin(rf, testData$Species))
margin(rf, testData$Species)
?margin
data(Glass, package="mlbench")
View(Glass)
testindex <- sample(index, trunc(length(index)/3))
index     <- 1:nrow(Glass)
testindex <- sample(index, trunc(length(index)/3))
testset   <- Glass[testindex,]
trainset  <- Glass[-testindex,]
svm.model <- svm(Type ~ ., data = trainset, cost = 100, gamma = 1)
library(e1071)
library(rpart)
svm.model <- svm(Type ~ ., data = trainset, cost = 100, gamma = 1)
svm.pred  <- predict(svm.model, testset[,-10])
rpart.model <- rpart(Type ~ ., data = trainset)
rpart.pred  <- predict(rpart.model, testset[,-10], type = "class")
?classAgreement
svm.table = table(pred = svm.pred, true = testset[,10])
svm.table = table(pred = svm.pred, true = testset[,10])
rpart.table = table(pred = rpart.pred,true = testset[,10])
classAgreement(svm.table)
classAgreement(rpart.table)
svm.table = table(pred = svm.pred, true = testset[,10])
rpart.table = table(pred = rpart.pred,true = testset[,10])
classAgreement(svm.table)
svm.table
svm.model <- svm(Type ~ ., data = trainset, cost = 100, gamma = 1)
svm.pred  <- predict(svm.model, testset[,-10])
svm.table = table(pred = svm.pred, true = testset[,10])
svm.table
rpart.table
best.svm(trainset[,-10],trainset[,10])
best.svm(x = trainset[,-10],y = trainset[,10])
svm.model <- svm(Type ~ ., data = trainset, cost = 1, gamma = 0.1111111)
svm.pred  <- predict(svm.model, testset[,-10])
svm.table = table(pred = svm.pred, true = testset[,10])
svm.table
classAgreement(svm.table)
classAgreement(rpart.table)
ct = ctree(Species~.,data=trainData)
library(party)
ct = ctree(Species~.,data=trainData)
D(expression(x^2+y*x),"x")
D(call(x^2+y*x),"x")

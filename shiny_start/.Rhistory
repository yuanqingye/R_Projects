library(shiny)
ui <- fluidPage("Hello World")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui = fluidpage(sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100))
ui = fluidPage(sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100))
shinyApp(ui = ui, server = server)
ui = fluidPage(sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
testInput())
ui = fluidPage(sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = 'text',label = 'please type in the input',value = 'default value is not valid'))
shinyApp(ui=ui,server=server())
shinyApp(ui=ui,server=server)
ui = fluidPage(
#   sliderInput(inputId = "num",
#             label = "Choose a number",
#             value = 25, min = 1, max = 100),
textInput(inputId = 'text',label = 'please type in the input',
value = 'default value is not valid'),
textInput(inputId = 'username',label = 'username'),
passwordInput(inputId = 'password',label = 'password'),
submitButton(inputId = 'submit', label = 'submit')
)
ui = fluidPage(
#   sliderInput(inputId = "num",
#             label = "Choose a number",
#             value = 25, min = 1, max = 100),
textInput(inputId = 'text',label = 'please type in the input',
value = 'default value is not valid'),
textInput(inputId = 'username',label = 'username'),
passwordInput(inputId = 'password',label = 'password'),
submitButton(text = 'submit')
)
shinyApp(ui=ui,server=server)
shiny::runApp()
shiny::runApp()
ui = fluidPage(
#   sliderInput(inputId = "num",
#             label = "Choose a number",
#             value = 25, min = 1, max = 100),
textInput(inputId = 'text',label = 'please type in the input',
value = 'default value is not valid'),
textInput(inputId = 'username',label = 'username'),
passwordInput(inputId = 'password',label = 'password'),
submitButton(text = 'submit'),
plotOutput("hist")
)
shinyApp(ui=ui,server=server)
server = function(input,output){
output$hist = renderPlot(hist(rnorm(100)))
}
shinyApp(ui=ui,server=server)
server = function(input,output){
output$hist = renderPlot({
title = 'norm distribution'
hist(rnorm(100),main = title)
})
}
shinyApp(ui=ui,server=server)
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
# textInput(inputId = 'text',label = 'please type in the input',
#           value = 'default value is not valid'),
# textInput(inputId = 'username',label = 'username'),
# passwordInput(inputId = 'password',label = 'password'),
# submitButton(text = 'submit'),
plotOutput("hist")
)
server = function(input,output){
output$hist = renderPlot({
title = 'norm distribution'
hist(rnorm(input$num),main = title)
})
}
shinyApp(ui=ui,server=server)
shiny::runApp('drilldown')
library("dplyr")
library("DT")
runApp('drilldown')
png()
?png
plot(cars)
?xtable::xtable
data(tli)
dt = installed.packages()
dt = installed.packages()
View(dt)
dt = data.table(dt)
dt[,.I]
?density
??version
R.Version()
install.packages('shiny', repos='https://cran.rstudio.com/')
library(shiny)
shiny::runApp()
runApp('drilldown')
ui = fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
# textInput(inputId = 'text',label = 'please type in the input',
#           value = 'default value is not valid'),
# textInput(inputId = 'username',label = 'username'),
# passwordInput(inputId = 'password',label = 'password'),
# submitButton(text = 'submit'),
plotOutput("hist")
)
server = function(input,output){
output$hist = renderPlot({
title = 'norm distribution'
hist(rnorm(input$num),main = title)
})
}
shinyServer(server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='yuanqingye',
token='5D0E02F6D731C683FF120382F92621BC',
secret='9loJXOopk/JBkT13fD3OAyTvicnJsPA+0uZXBFLm')
Hide secret   Copy to clipboard
rsconnect::setAccountInfo(name='yuanqingye', token='5D0E02F6D731C683FF120382F92621BC', secret='9loJXOopk/JBkT13fD3OAyTvicnJsPA+0uZXBFLm')
getwd()
rsconnect::deployApp('./drilldown/app.R')
rsconnect::deployApp('./markdown_shiny.Rmd')
rsconnect::deployApp('./markdown_shiny.Rmd')
proxy_url <- "http://127.0.0.1:61387/"
Sys.setenv(http_proxy = proxy_url, https_proxy = proxy_url, ftp_proxy = proxy_url)
rsconnect::deployApp('./markdown_shiny.Rmd')
rsconnect::deployApp('./markdown_shiny.Rmd')
runApp()
head(faithful)
hist(rnorm(5))
hist(rnorm(100))
runApp('rnorm')
?dataTableOutput
??summary_rows_selected
?selectInput
help(package = "shiny")
?iris
runApp('rnorm/app2.R')
runApp('rnorm/app2.R')
?switch
?reactive
runApp('rnorm/app2.R')
proxy_url <- "http://127.0.0.1:61387/"
Sys.setenv(http_proxy = proxy_url, https_proxy = proxy_url, ftp_proxy = proxy_url)
proxy_url <- "http://127.0.0.1:16823/proxy_on.pac"
Sys.setenv(http_proxy = proxy_url, https_proxy = proxy_url, ftp_proxy = proxy_url)
rsconnect::deployApp('./markdown_shiny.Rmd')
getwd()
rsconnect::setAccountInfo(name='yuanqingye', token='5D0E02F6D731C683FF120382F92621BC', secret='9loJXOopk/JBkT13fD3OAyTvicnJsPA+0uZXBFLm')
Sys.getenv()
Sys.setenv(http_proxy = NULL, https_proxy = NULL, ftp_proxy = NULL)
?Sys.unsetenv
Sys.unsetenv(http_proxy,https_proxy,ftp_proxy)
Sys.unsetenv(http_proxy)
Sys.unsetenv(https_proxy)
Sys.unsetenv("https_proxy")
Sys.unsetenv("http_proxy")
Sys.unsetenv("ftp_proxy")
rsconnect::setAccountInfo(name='yuanqingye', token='5D0E02F6D731C683FF120382F92621BC', secret='9loJXOopk/JBkT13fD3OAyTvicnJsPA+0uZXBFLm')
rsconnect::deployApp('./markdown_shiny.Rmd')
shiny::runApp('drilldown')
runApp('rnorm')
runApp('rnorm/app2.R')
demo(package = "rvest")
demo(tripadvisor)
demo(tripadvisor,package = "rvest")
repeat([1,2,3],2)
repeat(c(1,2,3),2)
rep(c(1,2,3),2)
rep(c(1,2,3),c(2,3,4))
rep(c("A","B","C","D","E"))
df
View(df)
df1 <- data.frame(first = rep(c("A","B","C","D","E")), second = rep(c(1,2),each=5),
third = rnorm(10))
dcast(df1, first ~ second, value.var="third")
?dcast
names(airquality) <- tolower(names(airquality))
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
View(aqm)
dcast(aqm, month ~ variable, mean, margins = c("month", "variable"))
sessionInfo()
m
m = matrix(c(1,2,3,4),nrow = 2)
m
library(plyr)
alply(m,1)
?alply
dirname(rstudioapi::getActiveDocumentContext()$path)

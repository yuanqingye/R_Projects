install.packages("Rattle")
library(rattle)
?rattle
help(package = rattle)
set.seed(7)
library(mlbench)
library(caret)
data(PimaIndiansDiabetes)
correlationMatrix <- cor(PimaIndiansDiabetes[,1:8])
View(PimaIndiansDiabetes)
correlationMatrix <- cor(PimaIndiansDiabetes[,1:8])
View(correlationMatrix)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
print(highlyCorrelated)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
control
model <- train(diabetes~., data=PimaIndiansDiabetes, method="lvq", preProcess="scale", trControl=control)
importance <- varImp(model, scale=FALSE)
print(importance)
?train
# ensure the results are repeatable
set.seed(7)
# load the library
library(mlbench)
library(caret)
# load the data
data(PimaIndiansDiabetes)
# define the control using a random forest selection function
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
# run the RFE algorithm
results <- rfe(PimaIndiansDiabetes[,1:8], PimaIndiansDiabetes[,9], sizes=c(1:8), rfeControl=control)
# summarize the results
print(results)
# list the chosen features
predictors(results)
?rfe
plot(results, type=c("g", "o"))
dev.new()
plot(results, type=c("g", "o"))
dim(USArrests)
dimnames(USArrests)
View(USArrests)
pca.out<-prcomp(USArrests,scale=TRUE)
apply(USArrests,2,mean)
apply(USArrests,2,var)
pca.out<-prcomp(USArrests,scale=TRUE)
pca.out
summary(pca.out)
names(pca.out)
biplot(pca.out,scale = 0, cex=0.65)
ï¼ŸvarImp
?varImp
class(model)
?caret::train
View(getModelInfo())
?getModelInfo
getModelInfo()
library(caret)
View(getModelInfo())
modelLookup(model = "lvq")
getModelInfo("lvq")
?dcast
?varImp
?findCorrelation
?cor
print(correlationMatrix)
print(highlyCorrelated)
?rfeControl
?rfe
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
library(caret)
data(PimaIndiansDiabetes)
??mlbench
help(package="mlbench")
library(mlbench)
data(PimaIndiansDiabetes)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
results <- rfe(PimaIndiansDiabetes[,1:8], PimaIndiansDiabetes[,9], sizes=c(1:8), rfeControl=control)
print(results)
predictors(results)
10%%3
test_model <- train(diabetes~., data=PimaIndiansDiabetes, method="lvq", preProcess="scale", trControl=control,
importance = T)
set.seed(7)
library(mlbench)
library(caret)
data(PimaIndiansDiabetes)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
test_model <- train(diabetes~., data=PimaIndiansDiabetes, method="lvq", preProcess="scale", trControl=control,
importance = T)
data(PimaIndiansDiabetes)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
test_model <- train(diabetes~., data=PimaIndiansDiabetes, method="lvq", preProcess="scale", trControl=control,
importance = T)
View(PimaIndiansDiabetes)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
results <- rfe(PimaIndiansDiabetes[,1:8], PimaIndiansDiabetes[,9], sizes=c(1:8), rfeControl=control)
print(results)
predictors(results)
plot(results, type=c("g", "o"))
# ensure results are repeatable
set.seed(7)
# load the library
library(mlbench)
library(caret)
# load the dataset
data(PimaIndiansDiabetes)
# prepare training scheme
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
model <- train(diabetes~., data=PimaIndiansDiabetes, method="lvq", preProcess="scale", trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)
shiny::runApp('test')
predictors(results)
print(results)
results$fit$importance
sort(results$fit$importance,decreasing = T)
results$fit$importance[order(results$fit$importance,decreasing = T),]
?rfe

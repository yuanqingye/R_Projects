{
    "collab_server" : "",
    "contents" : "library(rgeos)\n#gArea\ngArea(readWKT(\"POINT(1 1)\"))\ngArea(readWKT(\"LINESTRING(0 0,1 1,2 2)\"))\ngArea(readWKT(\"LINEARRING(0 0,3 0,3 3,0 3,0 0)\"))\np1 = readWKT(\"POLYGON((0 0,3 0,3 3,0 3,0 0))\")\np2 = readWKT(\"POLYGON((0 0,3 0,3 3,0 3,0 0),(1 1,2 1,2 2,1 2,1 1))\")\ngArea(p1)\np1@polygons[[1]]@area\ngArea(p2)\np2@polygons[[1]]@area\n\nx = readWKT(\"POLYGON((0 0,10 0,10 10,0 10,0 0))\")\nb = gBoundary(x)\nplot(x,col='black')\nplot(b,col='red',lwd=3,add=TRUE)\n# mod-2 rule example\nx1 = readWKT(\"MULTILINESTRING((2 2,2 0),(2 2,0 2))\")\nx2 = readWKT(\"MULTILINESTRING((2 2,2 0),(2 2,0 2),(2 2,4 2))\")\nx3 = readWKT(\"MULTILINESTRING((2 2,2 0),(2 2,0 2),(2 2,4 2),(2 2,2 4))\")\nx4 = readWKT(\"MULTILINESTRING((2 2,2 0),(2 2,0 2),(2 2,4 2),(2 2,2 4),(2 2,4 4))\")\nb1 = gBoundary(x1)\nb2 = gBoundary(x2)\nb3 = gBoundary(x3)\nb4 = gBoundary(x4)\npar(mfrow=c(2,2))\nplot(x1); plot(b1,pch=16,col='red',add=TRUE)\nplot(x2); plot(b2,pch=16,col='red',add=TRUE)\nplot(x3); plot(b3,pch=16,col='red',add=TRUE)\nplot(x4); plot(b4,pch=16,col='red',add=TRUE)\n\n\n#gBuffer\np1 = readWKT(\"POLYGON((0 1,0.95 0.31,0.59 -0.81,-0.59 -0.81,-0.95 0.31,0 1))\")\np2 = readWKT(\"POLYGON((2 2,-2 2,-2 -2,2 -2,2 2),(1 1,-1 1,-1 -1,1 -1,1 1))\")\npar(mfrow=c(2,3))\nplot(gBuffer(p1,width=-0.2),col='black',xlim=c(-1.5,1.5),ylim=c(-1.5,1.5))\nplot(p1,border='blue',lwd=2,add=TRUE);title(\"width: -0.2\")\nplot(gBuffer(p1,width=0),col='black',xlim=c(-1.5,1.5),ylim=c(-1.5,1.5))\nplot(p1,border='blue',lwd=2,add=TRUE);title(\"width: 0\")\nplot(gBuffer(p1,width=0.2),col='black',xlim=c(-1.5,1.5),ylim=c(-1.5,1.5))\nplot(p1,border='blue',lwd=2,add=TRUE);title(\"width: 0.2\")\nplot(gBuffer(p2,width=-0.2),col='black',pbg='white',xlim=c(-2.5,2.5),ylim=c(-2.5,2.5))\nplot(p2,border='blue',lwd=2,add=TRUE);title(\"width: -0.2\")\nplot(gBuffer(p2,width=0),col='black',pbg='white',xlim=c(-2.5,2.5),ylim=c(-2.5,2.5))\nplot(p2,border='blue',lwd=2,add=TRUE);title(\"width: 0\")\nplot(gBuffer(p2,width=0.2),col='black',pbg='white',xlim=c(-2.5,2.5),ylim=c(-2.5,2.5))\nplot(p2,border='blue',lwd=2,add=TRUE);title(\"width: 0.2\")\np3 <- readWKT(paste(\"GEOMETRYCOLLECTION(\",\n                    \"POLYGON((0 1,0.95 0.31,0.59 -0.81,-0.59 -0.81,-0.95 0.31,0 1)),\",\n                    \"POLYGON((2 2,-2 2,-2 -2,2 -2,2 2),(1 1,-1 1,-1 -1,1 -1,1 1)))\"))\npar(mfrow=c(1,1))\nplot(gBuffer(p3, byid=TRUE, width=c(-0.2, -0.1)),col='black',pbg='white',\n     xlim=c(-2.5,2.5),ylim=c(-2.5,2.5))\nplot(p3,border=c('blue', 'red'),lwd=2,add=TRUE);title(\"width: -0.2, -0.1\")\n\n\n\nlibrary(sp)\np3df <- SpatialPolygonsDataFrame(p3, data=data.frame(i=1:length(p3),\n                                                     row.names=row.names(p3)))\ndim(p3df)\nrow.names(p3df)\ndropEmpty = gBuffer(p3df, byid=TRUE, id=letters[1:nrow(p3df)], width=c(-1, 0))\ndim(dropEmpty)\nrow.names(dropEmpty)\nrow.names(slot(dropEmpty, \"data\"))\nplot(dropEmpty, col='black', pbg='white', xlim=c(-2.5,2.5),ylim=c(-2.5,2.5))\nplot(p3df,border=c('blue'),lwd=2,add=TRUE);title(\"width: -1, 0\")\npar(mfrow=c(2,3))\n#Style options\nl1 = readWKT(\"LINESTRING(0 0,1 5,4 5,5 2,8 2,9 4,4 6.5)\")\npar(mfrow=c(2,3))\nplot(gBuffer(l1,capStyle=\"ROUND\"));plot(l1,col='blue',add=TRUE);title(\"capStyle: ROUND\")\nplot(gBuffer(l1,capStyle=\"FLAT\"));plot(l1,col='blue',add=TRUE);title(\"capStyle: FLAT\")\nplot(gBuffer(l1,capStyle=\"SQUARE\"));plot(l1,col='blue',add=TRUE);title(\"capStyle: SQUARE\")\nplot(gBuffer(l1,quadsegs=1));plot(l1,col='blue',add=TRUE);title(\"quadsegs: 1\")\nplot(gBuffer(l1,quadsegs=2));plot(l1,col='blue',add=TRUE);title(\"quadsegs: 2\")\nplot(gBuffer(l1,quadsegs=5));plot(l1,col='blue',add=TRUE);title(\"quadsegs: 5\")\nl2 = readWKT(\"LINESTRING(0 0,1 5,3 2)\")\npar(mfrow=c(2,3))\nplot(gBuffer(l2,joinStyle=\"ROUND\"));plot(l2,col='blue',add=TRUE);title(\"joinStyle: ROUND\")\nplot(gBuffer(l2,joinStyle=\"MITRE\"));plot(l2,col='blue',add=TRUE);title(\"joinStyle: MITRE\")\nplot(gBuffer(l2,joinStyle=\"BEVEL\"));plot(l2,col='blue',add=TRUE);title(\"joinStyle: BEVEL\")\nplot(gBuffer(l2,joinStyle=\"MITRE\",mitreLimit=0.5));plot(l2,col='blue',add=TRUE)\ntitle(\"mitreLimit: 0.5\")\nplot(gBuffer(l2,joinStyle=\"MITRE\",mitreLimit=1));plot(l2,col='blue',add=TRUE)\ntitle(\"mitreLimit: 1\")\nplot(gBuffer(l2,joinStyle=\"MITRE\",mitreLimit=3));plot(l2,col='blue',add=TRUE)\ntitle(\"mitreLimit: 3\")\n\n#gCentroid\nx = readWKT(paste(\"GEOMETRYCOLLECTION(POLYGON((0 0,10 0,10 10,0 10,0 0)),\",\n                  \"POLYGON((15 0,25 15,35 0,15 0)))\"))\n# Centroids of both the square and circle independently\nc1 = gCentroid(x,byid=TRUE)\n# Centroid of square and circle together\nc2 = gCentroid(x)\nplot(x)\nplot(c1,col='red',add=TRUE)\nplot(c2,col='blue',add=TRUE)\n\n#gContains\nl1 = readWKT(\"LINESTRING(0 3,1 1,2 2,3 0)\")\nl2 = readWKT(\"LINESTRING(1 3.5,3 3,2 1)\")\nl3 = readWKT(\"LINESTRING(1 3.5,3 3,4 1)\")\npt1 = readWKT(\"MULTIPOINT(1 1,3 0)\")\npt2 = readWKT(\"MULTIPOINT(0 3,3 0)\")\npt3 = readWKT(\"MULTIPOINT(1 1,2 2,3 1)\")\np1 = readWKT(\"POLYGON((0 0,0 2,1 3.5,3 3,4 1,3 0,0 0))\")\np2 = readWKT(\"POLYGON((1 1,1 2,2 2,2 1,1 1))\")\npar(mfrow=c(2,3))\nplot(l1,col='blue');plot(pt1,add=TRUE,pch=16)\ntitle(paste(\"Contains:\",gContains(l1,pt1),\n            \"\\nContainsProperly:\",gContainsProperly(l1,pt1),\n            \"\\nCovers:\",gCovers(l1,pt1)))\nplot(l1,col='blue');plot(pt2,add=TRUE,pch=16)\ntitle(paste(\"Contains:\",gContains(l1,pt2),\n            \"\\nContainsProperly:\",gContainsProperly(l1,pt2),\n            \"\\nCovers:\",gCovers(l1,pt2)))\nplot(p1,col='blue',border='blue');plot(pt3,add=TRUE,pch=16)\ntitle(paste(\"Contains:\",gContains(p1,pt3),\n            \"\\nContainsProperly:\",gContainsProperly(p1,pt3),\n            \"\\nCovers:\",gCovers(p1,pt3)))\nplot(p1,col='blue',border='blue');plot(l2,lwd=2,add=TRUE,pch=16)\ntitle(paste(\"Contains:\",gContains(p1,l2),\n            \"\\nContainsProperly:\",gContainsProperly(p1,l2),\n            \"\\nCovers:\",gCovers(p1,l2)))\nplot(p1,col='blue',border='blue');plot(l3,lwd=2,add=TRUE,pch=16)\ntitle(paste(\"Contains:\",gContains(p1,l3),\n            \"\\nContainsProperly:\",gContainsProperly(p1,l3),\n            \"\\nCovers:\",gCovers(p1,l3)))\nplot(p1,col='blue',border='blue');plot(p2,col='black',add=TRUE,pch=16)\ntitle(paste(\"Contains:\",gContains(p1,p2),\n            \"\\nContainsProperly:\",gContainsProperly(p1,p2),\n            \"\\nCovers:\",gCovers(p1,p2)))\n\n#gConvexHull\n\nx = readWKT(paste(\"POLYGON((0 40,10 50,0 60,40 60,40 100,50 90,60 100,60\",\n                  \"60,100 60,90 50,100 40,60 40,60 0,50 10,40 0,40 40,0 40))\"))\nch = gConvexHull(x)\nplot(x,col='blue',border='blue')\nplot(ch,add=TRUE)\n\n\n#gCross\nl1 = readWKT(\"LINESTRING(0 3,1 1,2 2,3 0)\")\nl2 = readWKT(\"LINESTRING(0 0.5,1 1,2 2,3 2.5)\")\nl3 = readWKT(\"LINESTRING(1 3,1.5 1,2.5 2)\")\npt1 = readWKT(\"MULTIPOINT(1 1,3 0)\")\npt2 = readWKT(\"MULTIPOINT(1 1,3 0,1 2)\")\np1 = readWKT(\"POLYGON((0 0,0 2,1 3.5,3 3,4 1,3 0,0 0))\")\np2 = readWKT(\"POLYGON((2 2,3 4,4 1,4 0,2 2))\")\npar(mfrow=c(2,3))\nplot(l1,col='blue');plot(pt1,add=TRUE,pch=16)\ntitle(paste(\"Crosses:\",gCrosses(l1,pt1),\n            \"\\nOverlaps:\",gOverlaps(l1,pt1)))\nplot(l1,col='blue');plot(pt2,add=TRUE,pch=16)\ntitle(paste(\"Crosses:\",gCrosses(l1,pt2),\n            \"\\nOverlaps:\",gOverlaps(l1,pt2)))\nplot(l1,col='blue');plot(l2,add=TRUE)\ntitle(paste(\"Crosses:\",gCrosses(l1,l2),\n            \"\\nOverlaps:\",gOverlaps(l1,l2)))\nplot(l1,col='blue');plot(l3,add=TRUE)\ntitle(paste(\"Crosses:\",gCrosses(l1,l3),\n            \"\\nOverlaps:\",gOverlaps(l1,l3)))\nplot(p1,border='blue',col='blue');plot(l1,add=TRUE)\ntitle(paste(\"Crosses:\",gCrosses(p1,l1),\n            \"\\nOverlaps:\",gOverlaps(p1,l1)))\nplot(p1,border='blue',col='blue');plot(p2,add=TRUE)\ntitle(paste(\"Crosses:\",gCrosses(p1,p2),\n            \"\\nOverlaps:\",gOverlaps(p1,p2)))\n\n#gDelaunayTriangulation\nif (version_GEOS0() > \"3.4.0\") {\n  library(sp)\n  data(meuse)\n  coordinates(meuse) <- c(\"x\", \"y\")\n  plot(gDelaunayTriangulation(meuse))\n  points(meuse)\n  out <- gDelaunayTriangulation(meuse, onlyEdges=TRUE)\n  lns <- slot(slot(out, \"lines\")[[1]], \"Lines\")\n  out1 <- SpatialLines(lapply(seq(along=lns), function(i) Lines(list(lns[[i]]),\n                                                                ID=as.character(i))))\n  out2 <- lapply(1:length(out1), function(i) which(gTouches(meuse, out1[i],\n                                                            byid=TRUE)))\n  out3 <- do.call(\"rbind\", out2)\n  o <- order(out3[,1], out3[,2])\n  out4 <- out3[o,]\n  out5 <- data.frame(from=out4[,1], to=out4[,2], weight=1)\n  head(out5)\n  ## Not run:\n  if (require(spdep)) {\n    class(out5) <- c(\"spatial.neighbour\", class(out5))\n    attr(out5, \"n\") <- length(meuse)\n    attr(out5, \"region.id\") <- as.character(1:length(meuse))\n    nb1 <- sn2listw(out5)$neighbours\n    nb2 <- make.sym.nb(nb1)\n  }\n  ## End(Not run)\n}\n\n#gDifference\nx = readWKT(\"POLYGON ((0 0, 0 10, 10 10, 10 0, 0 0))\")\ny = readWKT(\"POLYGON ((3 3, 7 3, 7 7, 3 7, 3 3))\")\nd = gDifference(x,y)\nplot(d,col='red',pbg='white')\n# Empty geometry since y is completely contained with x\nd2 = gDifference(y,x)\n\npt1 = readWKT(\"POINT(0.5 0.5)\")\npt2 = readWKT(\"POINT(2 2)\")\np1 = readWKT(\"POLYGON((0 0,1 0,1 1,0 1,0 0))\")\np2 = readWKT(\"POLYGON((2 0,3 1,4 0,2 0))\")\ngDistance(pt1,pt2)\ngDistance(p1,pt1)\ngDistance(p1,pt2)\ngDistance(p1,p2)\np3 = readWKT(\"POLYGON((0 0,2 0,2 2,0 2,0 0))\")\np4 = readWKT(\"POLYGON((0 0,2 0,2 1.9,1.9 2,0 2,0 0))\")\np5 = readWKT(\"POLYGON((0 0,2 0,2 1.5,1.5 2,0 2,0 0))\")\np6 = readWKT(\"POLYGON((0 0,2 0,2 1,1 2,0 2,0 0))\")\np7 = readWKT(\"POLYGON((0 0,2 0,0 2,0 0))\")\ngDistance(p3,hausdorff=TRUE)\ngDistance(p3,p4,hausdorff=TRUE)\ngDistance(p3,p5,hausdorff=TRUE)\ngDistance(p3,p6,hausdorff=TRUE)\ngDistance(p3,p7,hausdorff=TRUE)\n",
    "created" : 1504686422715.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2106904307",
    "id" : "2574E07E",
    "lastKnownWriteTime" : 1504709450,
    "last_content_update" : 1504709451571,
    "path" : "~/R_Projects/map/Rfile/rgeo.R",
    "project_path" : "Rfile/rgeo.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 26,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
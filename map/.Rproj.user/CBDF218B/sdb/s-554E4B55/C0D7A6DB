{
    "collab_server" : "",
    "contents" : "library(ggmap)\ng=c(121.754252477584,24.7528993303431)\nc=c(121.752751736839,24.7554214120371)\nmapdist(g,c,mode=c(\"driving\",\"walking\",\"bicycling\"),output=c(\"simple\"))\n\n\nwh <- as.numeric(geocode(\"the white house, dc\"))\nmapdist(\"waco, texas\", \"houston, texas\")\n\nmapdist(\"san diego,california\",'los angeles,california')\nmapdist(\"luding Rd,Shanghai\",'nujiangbeilu 598,shanghai')\nmapdist(\"beiwa Rd 46,beijing\",\"No 4 highschool,beijing\",mode = \"walking\")\nmapdist(\"beiwa Rd 46,beijing\",\"No 35 middleschool,beijing\",mode = \"bicycling\")\n\ngoogle_results <- rbind.fill(apply(subset(sample, select=c(\"location\", \"locMall\")), 1, function(x) mapdist(x[1], x[2], mode=\"driving\")))\n\ng = c(36.841287,-76.218922)\nc = c(121.752751736839,24.7554214120371)\nmapdist(g,c,output = c(\"simple\"))\n\nfrom <- c(\"houston\", \"houston\", \"dallas\")\nto <- c(\"waco, texas\", \"san antonio\", \"houston\")\nmapdist(from, to)\n\n#计算多边形之间的距离\nlibrary(OasisR)\nlibrary(data.table)\nprovince_dist = distance(chn_mapdata_1)\nprovince_dist = data.table(province_dist)\nrownames(province_dist) = chn_mapdata_1@data$NL_NAME_1\ncolnames(province_dist) = chn_mapdata_1@data$NL_NAME_1\n\n# You could use the rgeos package and the gDistance method. \n# This will require you to prepare your geometries, \n# creating spgeom objects from the data you have (I assume it is a data.frame or something \n# similar). The rgeos documentation is very detailed \n# (see the PDF manual of the package from the CRAN page), \n# this is one relevant example from the gDistance documentation:\n\nlibrary(rgeos)\npt1 = readWKT(\"POINT(0.5 0.5)\")\npt2 = readWKT(\"POINT(2 2)\")\np1 = readWKT(\"POLYGON((0 0,1 0,1 1,0 1,0 0))\")\np2 = readWKT(\"POLYGON((2 0,3 1,4 0,2 0))\")\ngDistance(pt1,pt2)\ngDistance(p1,pt1)\ngDistance(p1,pt2)\ngDistance(p1,p2)\n\nmapply(gDistance,c(p1,p2),c(pt1,pt2))\n\nredstar_points = read_xlsx(\"~/data/selfmanaged_business.xlsx\",sheet = '商场总名单')\nredstar_points = data.table(redstar_points)\nredstar_points = redstar_points[商场类型=='自营',]\nredstar_location = redstar_points[,c('商场名称','longitude','latitude')]\n\nmydf = as.data.frame(redstar_location)\nxy <- mydf[,c(2,3)]\n\nspdf <- SpatialPointsDataFrame(coords = xy, data = mydf,\n                               proj4string = CRS(\"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"))\n\n\n# province.proj   <- spTransform(chn_mapdata_1,CRS(epsg.27700))\n# shop.proj     <- spTransform(spdf,CRS(epsg.27700))\n\n\ncentroids=gCentroid(chn_mapdata_1, byid=TRUE, id = NULL)\nplot(centroids)\n\ngDistance(spdf,centroids)\n\n# europeRG <- readOGR(dsn = patheurope, layer = \"NUTS_RG_60M_2013\", stringsAsFactors = FALSE)\n# europewmercator <- spTransform(europeRG, CRS(\"+init=epsg:3035\"))\n\nproj4string(centroids) <- CRS(\"+proj=longlat +ellps=WGS84 +datum=WGS84\")\ncentroidsp <- spTransform(centroids, CRS(\"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\"))\ncentroids1 <- spTransform(centroids[2,], CRS(\"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\"))\ncentroids2 <- spTransform(centroids[2,], CRS(\"+init=epsg:3035\"))\n\n\n# sp = SpatialPoints(coords)\nproj4string(spdf) <- CRS(\"+proj=longlat +ellps=WGS84 +datum=WGS84\")\nsp <- spTransform(spdf, CRS(\"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\"))\nsp1 <- spTransform(spdf[57,], CRS(\"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\"))\nsp2 <- spTransform(spdf[57,], CRS(\"+init=epsg:3035\"))\n\ngDistance(centroids2,sp2)\nm = gDistance(sp,centroidsp,byid = TRUE)\nlibrary(data.table)\nmdt = data.table(m)\n\nmap <- get_map(location = 'Beijing', zoom = 10, maptype = 'roadmap')\n\n\n# S = example(\"SpatialPoints-class\", ask=FALSE, echo=FALSE)\n# S1 = example(\"SpatialLines-class\", ask=FALSE, echo=FALSE)\n# m <- gDistance(S, Sl, byid=TRUE)\n# apply(m, 2, function(X) rownames(m)[order(X)][1])       ## Finds single closest\n\ng1=readWKT(\"POINT(6 10)\")\ng2=readWKT(\"LINESTRING(3 4,10 50,20 25)\")\ng3=readWKT(\"POLYGON((1 1,5 1,5 5,1 5,1 1),(2 2,2 3,3 3,3 2,2 2))\")\ng4=readWKT(\"MULTIPOINT((3.5 5.6),(4.8 10.5))\")\ng5=readWKT(\"MULTILINESTRING((3 4,10 50,20 25),(-5 -8,-10 -8,-15 -4))\")\ng6=readWKT(\"MULTIPOLYGON(((1 1,5 1,5 5,1 5,1 1),(2 2,2 3,3 3,3 2,2 2)),((6 3,9 2,9 4,6 3)))\")\ntry(readWKT(\"POINT EMPTY\"))\ntry(readWKT(\"MULTIPOLYGON EMPTY\"))\ng9=readWKT(\"GEOMETRYCOLLECTION(POINT(4 6),LINESTRING(4 6,7 10))\")\n\nwriteWKT(g1)\nwriteWKT(g2)\nwriteWKT(g3)\nwriteWKT(g4)\nwriteWKT(g5)\nwriteWKT(g6)\nwriteWKT(g9,byid=FALSE)\nwriteWKT(g9,byid=TRUE)\n\n# Instead of gDistance (for planar coordinates) You can use dist2Line \n# (for angular coordinates), from the geosphere package. Although it is called dist2Line, \n# the function also works for (Spatial) Polygons*.\nlibrary(geosphere)\ndist2Line(spdf[57,],chn_mapdata_1[2,])\n\n#计算北京地理面积\nareaPolygon(chn_mapdata_1[2,])\n#计算北京周长\nperimeter(chn_mapdata_1[2,])\n\nraster::distance(spdf[57,],map)\nraster_map = map\nclass(raster_map) = \"raster\"\nraster::distance(spdf[57,],raster_map)\n\n\n#create a new raster and set all its values to unity.\nrt <- raster(nrows=18, ncols=36) \nrt <- setValues(rt,runif(ncell(rt),0,1))\n#create a Transition object from the raster\ntrt <- transition(rt,function(x) 1/mean(x),8)\n\n#asymmetric\nncf <- function(x) max(x) - x[1] + x[2]\ntrt2 <- transition(rt,ncf,8, symm=FALSE)\n\n#create two sets of coordinates\nsP1 <- cbind(c(65,5,-65),c(55,35,-35))\nsP2 <- cbind(c(50,15,-40),c(80,20,-5))\n\n#from and to identical\ncostDistance(trt,sP1)\ncostDistance(trt2,sP1)\n\n#from and to different\ncostDistance(trt2,sP1,sP2)\ncostDistance(trt2,sP1,sP2)\n\nmall_detail = read_xlsx(\"~/data/mall_detail.xlsx\")\nself_managed_business = read_xlsx(\"~/data/selfmanaged_business.xlsx\")\n\nlibrary(geosphere)\ndistHaversine\n",
    "created" : 1500258162805.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2535012381",
    "id" : "C0D7A6DB",
    "lastKnownWriteTime" : 1501038438,
    "last_content_update" : 0,
    "path" : "~/R_Projects/map/Rfile/testDistance.R",
    "project_path" : "Rfile/testDistance.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
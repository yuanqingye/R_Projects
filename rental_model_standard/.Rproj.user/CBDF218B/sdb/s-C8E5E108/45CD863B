{
    "collab_server" : "",
    "contents" : "main = function(){\n  temp = getMisplacedData()\n  mall_names = temp[[1]]\n  train_set = temp[[2]]\n  test_set = temp[[3]]\n  train_mall_names = temp[[4]]\n  #SVM part\n  ptm <- proc.time()\n  svm_result = getSVMResult()\n  ptm = proc.time() - ptm\n  #random forest part\n  ptm <- proc.time()\n  rf_result = getRandomForestResult()\n  ptm2 = proc.time() - ptm\n  #GBM part\n  ptm <- proc.time()\n  gbm_result = getGBMResult()\n  ptm3 = proc.time() - ptm\n  #Neural network part\n  ptm <- proc.time()\n  nn_result = getNeuralNetworkResult()\n  ptm4 = proc.time() - ptm\n  MSE.rf.MALLS = rf_result[[3]]\n  MSE.nn.MALLS = nn_result[[3]]\n  MSE.svm.MALLS = svm_result[[3]]\n  MSE.gbm.MALLS = gbm_result[[3]]\n  MSE.all.MALLS = cbind.data.frame(MSE.rf.MALLS,nn_perc = MSE.nn.MALLS$perc,svm_perc = MSE.svm.MALLS$perc,gbm_perc = MSE.gbm.MALLS$perc)\n  temp_median = lapply(lapply(MSE.all.MALLS[,-1],abs),median)\n  temp_min = apply(abs(MSE.all.MALLS[,5:8]),1,min)\n  temp_mean = lapply(lapply(MSE.all.MALLS[,-1],abs),mean)\n  temp_sd = lapply(MSE.all.MALLS[,-1],sd)\n  temp_min_index = apply(abs(MSE.all.MALLS[,5:8]),1,which.min)\n  MSE.all.MALLS = cbind.data.frame(MSE.all.MALLS,temp_min,temp_min_index)\n  rentind = which(names(train_set) %in% c(\"rent\"))\n  rf.model = rf_result[[1]]\n  rf.train.result= predict(rf.model,train_set[-rentind])\n  svm.model = svm_result[[1]]\n  svm.train.result = predict(svm.model,train_set[-rentind])\n  gbm.model = gbm_result[[1]]\n  gbm.train.result = predict(gbm.model,train_set,n.trees = 100000)\n  nn.model = nn_result[[1]]\n  maxs <- apply(train_set, 2, max)\n  mins <- apply(train_set, 2, min)\n  train.scaled = as.data.frame(scale(train_set, center = mins, scale = maxs - mins))\n  max_rent = maxs[\"rent\"]\n  min_rent = mins[\"rent\"]\n  nn.train.result = compute(nn.model,train.scaled[,-rentind])\n  nn.train.result = nn.train.result$net.result*(max_rent-min_rent)+min_rent\n  train_view = cbind.data.frame(mall_names = train_mall_names,train_set[rentind],rf_rent = rf.train.result,nn_rent = nn.train.result,svm_rent = svm.train.result,gbm_rent = gbm.train.result)\n  train_view = data.table(train_view)\n  train_view_focus = train_view[,lapply(.SD[(.N-5):.N],sum),by = \"mall_names\"]\n  train_view_focus[,`:=`(rf_diff=abs(rf_rent-rent)/rent,nn_diff=abs(nn_rent-rent)/rent,svm_diff=abs(svm_rent-rent)/rent,gbm_diff=abs(gbm_rent-rent)/rent)]\n  new_row = data.table(mall_names = \"昆明广福路商场\")\n  train_view_focus = rbind.fill(train_view_focus[1:23,],new_row,train_view_focus[24:nrow(train_view_focus),])\n  temp_min_index_train = apply(abs(train_view_focus[,7:10]),1,which.min)\n  temp = MSE.all.MALLS[,5:8]\n  temp = as.matrix(temp)\n  temp_min_index_train = as.numeric(temp_min_index_train)\n  temp_decision = temp[cbind(1:nrow(temp), temp_min_index_train)]\n  MSE.all.MALLS = cbind.data.frame(MSE.all.MALLS,temp_min_index_train,temp_decision)\n  # temp_decision = mapply(`[`,temp,temp_min_index_train)\n  train_view_time = cbind.data.frame(mall_names = train_mall_names,age = train_set[\"AGE\"])\n  train_view_time = data.table(train_view_time)\n  mall_view_time = train_view_time[,.(age = sapply(.SD[.N,\"AGE\"],sum)),by = \"mall_names\"]\n  MSE.all.MALLS.time = merge(MSE.all.MALLS,mall_view_time,by.x = \"mall_name\",by.y = \"mall_names\",all.x = TRUE)\n}\n\nmain2 = function(timespan = 6){\n  cross_result = makeCrossValidation(timespan)\n  e = new.env()\n  e$rent_data_year =  cross_result[[1]]\n  e$MSE.all.MALLS = cross_result[[2]]\n  \n  e$min_index = apply(abs(e$MSE.all.MALLS[,5:8]),1,which.min)\n  e$min_index = as.numeric(e$min_index)\n  \n  e$rentind = which(names(dest_rent) %in% c(\"rent\"))\n  e$dest_rent = e$rent_data_year[[6]]\n  e$dest_mall_names = e$rent_data_year[[3]]\n  e$dest_view = predict_by_set(cross_result,e$dest_rent,e$dest_mall_names,e$rentind)\n  e$matrix = as.matrix(e$dest_view[,3:6])\n  # temp_decision = temp[cbind(1:nrow(temp),temp_min_index)]\n  # MSE.all.MALLS_mixed = setDT(MSE.all.MALLS)[dest_view, on=\"mall_name\"]\n  # MSE.all.MALLS_final = MSE.all.MALLS_mixed[!is.na(pred_rent),]\n  # MSE.all.MALLS_final = MSE.all.MALLS_final[,c(\"rf_rent\",\"nn_rent\",\"svm_rent\",\"gbm_rent\")]\n  # MSE.all.MALLS_final = as.matrix(MSE.all.MALLS_final)\n  e$decision = e$matrix[cbind(1:nrow(e$dest_view), e$min_index)]\n  e$MSE.all.MALLS_final = cbind.data.frame(e$dest_view,pred_rent = e$decision)\n  second_part = e$MSE.all.MALLS_final[e$MSE.all.MALLS_final$mall_name %in%un_mature_mall,]\n  second_part = cbind.data.frame(second_part$mall_name,second_part[,-1]*2)\n  second_part$rent = NULL\n  second_part = data.table(second_part)\n  setnames(second_part,\"V1\",\"mall_name\")\n  MSE.all.MALLS_final$pred_rent = MSE.all.MALLS_final$temp_decision\n  MSE.all.MALLS_final$temp_decision = NULL\n  final_result = rbind(MSE.all.MALLS_final,second_part)\n  }\n\nmakeCrossValidation = function(timespan = 12){\n  rent_year_data = getyearModeData(timespan)\n  train_rent = rent_year_data[[4]]\n  test_rent = rent_year_data[[5]]\n  dest_rent = rent_year_data[[6]]\n  train_mall_names = rent_year_data[[1]]\n  test_mall_names = rent_year_data[[2]]\n  dest_mall_names = rent_year_data[[3]]\n  #SVM part\n  ptm <- proc.time()\n  svm_result = getSVMResult(test_mall_names, train_rent, test_rent)\n  ptm = proc.time() - ptm\n  #random forest part\n  ptm <- proc.time()\n  rf_result = getRandomForestResult(test_mall_names, train_rent, test_rent)\n  ptm2 = proc.time() - ptm\n  #GBM part\n  ptm <- proc.time()\n  gbm_result = getGBMResult(test_mall_names, train_rent, test_rent)\n  ptm3 = proc.time() - ptm\n  #Neural network part\n  ptm <- proc.time()\n  nn_result = getNeuralNetworkResult(test_mall_names, train_rent, test_rent)\n  ptm4 = proc.time() - ptm\n  MSE.rf.MALLS = rf_result[[3]]\n  MSE.nn.MALLS = nn_result[[3]]\n  MSE.svm.MALLS = svm_result[[3]]\n  MSE.gbm.MALLS = gbm_result[[3]]\n  MSE.all.MALLS = cbind.data.frame(\n    MSE.rf.MALLS,\n    nn_perc = MSE.nn.MALLS$perc,\n    svm_perc = MSE.svm.MALLS$perc,\n    gbm_perc = MSE.gbm.MALLS$perc\n  )\n  result = list(rent_year_data,MSE.all.MALLS,svm_result,rf_result,gbm_result,nn_result)\n  return(result)\n}\n\ngetMisplacedData = function(file_location = \"~/data/rental_raw_data.csv\",test_time = 201710:201712,predict = TRUE){\n  big_general_info_original = read.csv(file_location,stringsAsFactors = FALSE)\n  big_general_info = big_general_info_original[!is.na(big_general_info_original$rent) & big_general_info_original$rent != 0,]\n  # some special cases\n  big_general_info[big_general_info$MALL_NAME==\"上海汶水商场\" & big_general_info$DATE_ID == 201409,\"XINYETAI_NUM\"] = 0.5\n  big_general_info[big_general_info$MALL_NAME==\"杭州古墩商场\" & big_general_info$DATE_ID == 201410,\"XINYETAI_NUM\"] = 6/31\n  big_general_info = data.table(big_general_info)\n  if(predict){\n  big_general_info[,rent := c(rent[-1:-3],rep(NA,3)),by = \"MALL_NAME\"]\n  }\n  big_general_info = as.data.frame(big_general_info)\n  big_general_info$MALL_NAME =  str_replace(big_general_info$MALL_NAME,\"北京至尊Mall\",\"北京东四环商场\")\n  train_df = big_general_info[(big_general_info$DATE_ID < min(test_time)),]\n  test_df = big_general_info[big_general_info$DATE_ID %in% test_time,]\n  train_mall_names = train_df[,\"MALL_NAME\"]\n  test_mall_names = test_df[,\"MALL_NAME\"]\n  train_rent = train_df[,!(names(big_general_info) %in% c(\"MALL_NAME\",\"MALL_CODE\",\"DATE_ID\",\"OPEN_DATE\",\"PRICE\",\"YEAR\",\"city\"))]\n  test_rent = test_df[,!(names(big_general_info) %in% c(\"MALL_NAME\",\"MALL_CODE\",\"DATE_ID\",\"OPEN_DATE\",\"PRICE\",\"YEAR\",\"city\"))]\n  result = list(test_mall_names,train_rent,test_rent,train_mall_names)\n  return(result)\n}\n\ngetyearModeData = function(timespan = 12,file_location = \"~/data/rental_raw_data.csv\",dest_date = 201712){\n  rent_data_month_raw = read.csv(file_location,stringsAsFactors = FALSE,fileEncoding = \"GBK\")\n  rent_data_month_raw = data.table(rent_data_month_raw)\n  rent_data_month_raw$MALL_NAME = enc2utf8(rent_data_month_raw$MALL_NAME)\n  rent_data_month = rent_data_month_raw[MALL_NAME != \"昆明广福路商场\",]\n  # rent_data_month[,.SD[1:(.N-12),by = \"MALL_NAME\"]]\n  # rent_data_month[,seq := 1:.N,by = \"MALL_NAME\"]\n  # rent_data_month[,getYearPara(DATE_ID,min),by = \"MALL_NAME\"]\n  # View(rent_data_1219[,.(startmon = getYearPara(date_id,min)),by = \"mall_name\"])\n  unuse_col = c(\"MALL_NAME\",\"MALL_CODE\",\"YEAR\",\"city\",\"OPEN_DATE\")\n  sum_col = c(\"CUSTOMER_NUM\",\"SALE\",\"rent\")\n  max_col = c(\"AGE\",\"DATE_ID\")\n  avg_col = c(\"BRAND_NUM\",\"RENT_AREA\",\"PRICE\",\"AREA_JIAJU\",\"JIAJU_NUM\",             \n              \"AREA_JIANCAI\",\"JIANCAI_NUM\",\"AREA_RUANZHUANG\",\"RUANZHUANG_NUM\",\"AREA_JINKOU\",\n              \"JINKOU_NUM\",\"AREA_XINYETAI\",\"XINYETAI_NUM\",\"GDP\",\"POPULATION\",\"SALARY\")\n  future_col = c(\"rent\")\n  freeze_col = colnames(rent_data_month)[!(colnames(rent_data_month) %in% c(unuse_col,sum_col,max_col,avg_col,future_col))]\n  rent_data_year = rent_data_month[,c(lapply(.SD[,sum_col,with=FALSE],getYearPara,sum,timespan),lapply(.SD[,avg_col,with=FALSE],getYearPara,mean,timespan),lapply(.SD[,max_col,with = FALSE],getYearPara,max,timespan),\"predprice\"=lapply(.SD[,future_col,with = FALSE],getYearReal,sum,timespan),.SD[.N,freeze_col,with=FALSE]),by = \"MALL_NAME\"]\n  # setnames(rent_data_year,\"predprice.finalprice\",\"predprice\")\n  un_mature_mall = rent_data_year[,.(record_num = .N),by = MALL_NAME][record_num<=timespan,]$MALL_NAME\n  setnames(rent_data_year,\"rent\",\"current_rent\")\n  rent_data_year[!(MALL_NAME %in% un_mature_mall),rent:=c(predprice.rent[1:(.N-timespan)],rep(NA,timespan)),by = \"MALL_NAME\"]\n  # rent_data_year[(MALL_NAME %in% un_mature_mall),predprice:=NA,by = \"MALL_NAME\"]\n  rent_data_year$predprice.rent = NULL\n  # base_rent = rent_data_year[,!(names(rent_data_year)%in%c(\"mall_name\",\"date_id\"))]\n  dest_rent = rent_data_year[DATE_ID == dest_date,]\n  rest_rent = rent_data_year[!is.na(rent),]\n  test_rent = rest_rent[,.SD[.N,],by = \"MALL_NAME\"]\n  train_rent = rest_rent[,.SD[1:(.N-1),],by = \"MALL_NAME\"]\n  train_mall_names = train_rent$MALL_NAME\n  test_mall_names = test_rent$MALL_NAME\n  dest_mall_names = dest_rent$MALL_NAME\n  train_rent = train_rent[,!(names(train_rent)%in%c(\"MALL_NAME\",\"DATE_ID\")),with = FALSE]\n  test_rent = test_rent[,!(names(test_rent)%in%c(\"MALL_NAME\",\"DATE_ID\")),with = FALSE]\n  dest_rent = dest_rent[,!(names(dest_rent)%in%c(\"MALL_NAME\",\"DATE_ID\")),with = FALSE]\n  train_rent = data.frame(train_rent)\n  test_rent = data.frame(test_rent)\n  dest_rent = data.frame(dest_rent)\n  result = list(train_mall_names,test_mall_names,dest_mall_names,train_rent,test_rent,dest_rent)\n  return(result)\n}\n\ngetRandomForestResult = function(test_mall_names = mall_names,train_rent = train_set,test_rent = test_set){\n  library(randomForest)\n  rf <- randomForest(rent ~ ., data=train_rent, ntree=500, proximity=TRUE)\n  rentind = which(names(test_rent) %in% c(\"rent\"))\n  rf.test.next= predict(rf,test_rent[-rentind])\n  compare.result.rf = cbind.data.frame(mall_name = test_mall_names,real_rent = test_rent$rent,pred_rent = rf.test.next)\n  compare.result.rf = data.table(compare.result.rf)\n  # compare.result.rf[,c(\"real_rent\",\"pred_rent\"):=.(as.numeric(real_rent),as.numeric(pred_rent))]\n  compare.result.rf[,diff:=(real_rent-pred_rent)]\n  MSE.rf.MALLS = compare.result.rf[,.(pred_rent=sum(pred_rent),real_rent=sum(real_rent),rf_err = abs(sum(diff)),perc = sum(diff)/sum(real_rent)),by = \"mall_name\"]\n  MSE.rf <- sum((test_rent$rent - rf.test.next)^2)/length(test_rent$rent)\n  result = list(rf,compare.result.rf,MSE.rf.MALLS,MSE.rf)\n  return(result)\n}\n\ngetNeuralNetworkResult = function(test_mall_names = mall_names,train_rent = train_set,test_rent = test_set){\n  #neural net part\n  source(\"~/R_Projects/neuralNetwork/Rfile/nn_para.R\")\n  neuralnet_para_m = neuralnet_para(train_rent,test_rent)\n  k = nrow(neuralnet_para_m)\n  n <- names(train_rent)\n  f <- as.formula(paste(\"rent ~\", paste(n[!n %in% \"rent\"], collapse = \" + \")))\n  maxs <- apply(train_rent, 2, max)\n  mins <- apply(train_rent, 2, min)\n  train.scaled = as.data.frame(scale(train_rent, center = mins, scale = maxs - mins))\n  test.scaled = as.data.frame(scale(test_rent,center = mins,scale = maxs - mins))\n  max_rent = maxs[\"rent\"]\n  min_rent = mins[\"rent\"]\n  # first get the proper parameter then apply to method\n  nn <- neuralnet(f,data=train.scaled,hidden = rep(neuralnet_para_m$size[k],neuralnet_para_m$depth[k]),act.fct = 'logistic') \n  rentind = which(names(test.scaled) %in% c(\"rent\"))\n  pr.nn <- compute(nn,test.scaled[,-rentind])\n  pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent\n  test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent\n  compare.result.nn = cbind.data.frame(mall_name = test_mall_names,pred_rent = pr.nn_,real_rent = test.r,diff = test.r - pr.nn_)\n  compare.result.nn = data.table(compare.result.nn)\n  MSE.nn.MALLS = compare.result.nn[,.(pred_rent=sum(pred_rent),real_rent=sum(real_rent),rf_err = abs(sum(diff)),perc = sum(diff)/sum(real_rent)),by = \"mall_name\"]\n  MSE.nn <- sum((test.r - pr.nn_)^2)/length(test.r)\n  result = list(nn,compare.result.nn,MSE.nn.MALLS,MSE.nn)\n  return(result)\n}\n\ngetSVMResult = function(test_mall_names = mall_names,train_rent = train_set,test_rent = test_set){\n  setwd(\"~/R_Projects/SVM\")\n  source(\"./Rfile/test_svm.R\")\n  try_para = svm_para_percent(train_rent,test_rent)\n  k = nrow(try_para) \n  svm.model = svm(rent~.,data = train_rent,cost = try_para$C[k-1],gamma = try_para$sigma[k-1],cross = 5)\n  svm.test = predict(svm.model,test_rent[,!(colnames(test_rent)%in%c(\"rent\"))])\n  compare.result.svm = cbind.data.frame(mall_name = test_mall_names,real_rent = test_rent$rent,pred_rent = svm.test,diff = test_rent$rent - svm.test)\n  compare.result.svm = data.table(compare.result.svm)\n  MSE.svm.MALLS = compare.result.svm[,.(pred_rent=sum(pred_rent),real_rent=sum(real_rent),rf_err = abs(sum(diff)),perc = sum(diff)/sum(real_rent)),by = \"mall_name\"]\n  MSE.svm = sum((svm.test - test_rent[,\"rent\"])^2)/length(svm.test)\n  result = list(svm.model,compare.result.svm,MSE.svm.MALLS,MSE.svm)\n}\n\ngetGBMResult = function(test_mall_names = mall_names,train_rent = train_set,test_rent = test_set){\n  require(gbm)\n  # rent.boost = gbm(rent ~ . ,data = train_rent,distribution = \"gaussian\",n.trees = 10000,nTrain = 100,bag.fraction = 0.8,n.minobsinnode = 10)\n  source('~/R_Projects/ensemble_method/Rfile/boosting_para.R')\n  # gbm_para_m = boosting_para(train_rent,test_rent) #takes a lot time\n  rent.boost = gbm(rent ~ . ,data = train_rent,distribution = \"gaussian\",n.trees = 100000,interaction.depth = 4)\n  n.trees = seq(from=100 ,to=100000, by=100) #num of trees-a vector of 100 values \n  #Generating a Prediction matrix for each Tree\n  predmatrix<-predict(rent.boost,test_rent,n.trees = n.trees)\n  #Calculating The Mean squared Test Error\n  test.error<-with(test_rent,apply((predmatrix-rent)^2,2,mean))\n  head(test.error) #contains the Mean squared test error for each of the 100 trees averaged\n  compare.result.gbm = cbind.data.frame(mall_name = test_mall_names,real_rent = test_rent$rent,pred_rent = predmatrix[,1000])\n  compare.result.gbm = data.table(compare.result.gbm)\n  compare.result.gbm[,c(\"real_rent\",\"pred_rent\"):=.(as.numeric(real_rent),as.numeric(pred_rent))]\n  compare.result.gbm[,diff:=(real_rent-pred_rent)]\n  MSE.gbm.MALLS = compare.result.gbm[,.(pred_rent=sum(pred_rent),real_rent=sum(real_rent),gbm_err = abs(sum(diff)),perc = sum(diff)/sum(real_rent)),by = \"mall_name\"]\n  MSE.gbm = test.error[1000]\n  result = list(rent.boost,compare.result.gbm,MSE.gbm.MALLS,MSE.gbm)\n  return(result)\n}\n\npredict_by_set = function(cross_result,dest_rent,dest_mall_names,rentind){\n  train_rent = cross_result[[1]][[4]]\n  rf_result = cross_result[[3]]\n  svm_result = cross_result[[4]]\n  gbm_result = cross_result[[5]]\n  nn_result = cross_result[[6]]\n  rentind = which(names(dest_rent) %in% c(\"rent\"))\n  rf.model = rf_result[[1]]\n  rf.dest.result= predict(rf.model,dest_rent[-rentind])\n  svm.model = svm_result[[1]]\n  svm.dest.result = predict(svm.model,dest_rent[-rentind])\n  gbm.model = gbm_result[[1]]\n  gbm.dest.result = predict(gbm.model,dest_rent,n.trees = 100000)\n  nn.model = nn_result[[1]]\n  nn.dest.result = predict.nn(nn.model,train_rent,dest_rent,rentind)\n  dest_view = cbind.data.frame(mall_name = dest_mall_names,dest_rent[rentind],rf_rent = rf.dest.result,nn_rent = nn.dest.result,svm_rent = svm.dest.result,gbm_rent = gbm.dest.result)\n  dest_view = data.table(dest_view)\n  return(dest_view)\n}\n\npredict.nn = function(nn.model,train_rent,dest_rent,rentind){\n  maxs <- apply(train_rent, 2, max)\n  mins <- apply(train_rent, 2, min)\n  dest.scaled = as.data.frame(scale(dest_rent, center = mins, scale = maxs - mins))\n  max_rent = maxs[\"rent\"]\n  min_rent = mins[\"rent\"]\n  nn.dest.result = compute(nn.model,dest.scaled[,-rentind])\n  nn.dest.result = nn.dest.result$net.result*(max_rent-min_rent)+min_rent\n  return(nn.dest.result)\n}\n\n`%=%` = function(var,value){\n  e <<- new.env()\n  varname = deparse(substitute(var))\n  assign(varname,value,envir = e)\n}",
    "created" : 1526373763891.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4079685245",
    "id" : "45CD863B",
    "lastKnownWriteTime" : 1526617476,
    "last_content_update" : 1526617476195,
    "path" : "~/R_Projects/rental_model_standard/Rfile/datapreparation&modeltrain.R",
    "project_path" : "Rfile/datapreparation&modeltrain.R",
    "properties" : {
        "docOutlineVisible" : "1",
        "tempName" : "Untitled1"
    },
    "relative_order" : 26,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
{
    "collab_server" : "",
    "contents" : "library(readxl)\nlibrary(data.table)\nlibrary(pinyin)\nlibrary(geosphere)\nlibrary(openxlsx)\n#mall code is key info for updating, need to make sure new info in the excel\nmall_code = m$商场代码\noptions(timeout= 4000000)\n\naddupdate = function(mall_code = NULL){\n  #this programm need to be run after the main programm\n  load(\"redstar_result.RData\")\n  redstar_location_update <<- getRedstarMallLocationSet(mallcode = mall_code) \n  # city_update = unique(redstar_location_update$city)\n  # city_update = paste0(city_update,\"市\")\n  #find the closest subways around the mall(need update cause new subways get build fast)\n  source(\"~/R_Projects/rental_model_standard/Rfile/functions.R\",encoding = \"utf-8\")\n  #put in the proxy setting in R\n  redstar_result_update <<- redstar_location_update\n  city_pinyin_update <<- getCityPinyinList(redstar_location_update)\n  business_region_update <<- scrap_business_info(city_pinyin_update)\n  Sys.setenv(http_proxy = proxy_url, https_proxy = proxy_url, ftp_proxy = proxy_url)\n  redstar_result_update <<- calSubwayDistance(redstar_location_update,redstar_result_update)\n  calBusinessDistanceGeocode(business_region_update$location)\n  commerce_cord_result_update <<- calBusinessDistanceAPI(business_region_update$location)\n  redstar_result_update <<- calBusinessDistance(commerce_cord_result_update,redstar_location_update,redstar_result_update)\n  redstar_result_update <<- calClosestWayDistance(redstar_location_update,redstar_result_update)\n  redstar_result_update <<- calHighWayDistance(redstar_location_update,redstar_result_update)\n  redstar_result_update <<- calCommunityInfo(redstar_location_update,redstar_result_update)\n  redstar_result_update <<- data.frame(redstar_result_update)\n  if(!exists('redstar_result')){\n    redstar_result = redstar_result_update\n  }\n  else{\n    redstar_result = data.frame(redstar_result)\n    for (mallname in redstar_location_update$mall_name) {\n      if (mallname %in% redstar_result$mall_name) {\n        for (colname in colnames(redstar_result)) {\n          # print(redstar_result[[redstar_result$mall_name == mallname,colname]])\n          redstar_result[[which(redstar_result$mall_name == mallname), colname]] = redstar_result_update[[which(redstar_result_update$mall_name == mallname), colname]]\n        }\n      }\n      else{\n        redstar_result = rbind(redstar_result, redstar_result_update[redstar_result_update$mall_name == mallname,])\n      }\n    }\n  }\n  save(redstar_result,file = \"redstar_result.RData\")\n  write.xlsx(redstar_result,\"~/data/redstar_result.xlsx\")\n  return(redstar_result)\n    }\n\ngetRedstarMallLocationSet = function(default_path = \"~/data/selfmanaged_business.xlsx\",sheet_name = \"商场总名单\",mallcode = NULL,pickedtype = '自营'){\n  redstar_points = read_xlsx(default_path,sheet = sheet_name)\n  redstar_points = data.table(redstar_points)\n  redstar_points = redstar_points[商场类型==pickedtype,]\n  redstar_location = redstar_points[,c('商场名称','商场代码','city','longitude','latitude')]\n  colnames(redstar_location)[colnames(redstar_location) == '商场名称'] = 'mall_name'\n  colnames(redstar_location)[colnames(redstar_location) == '商场代码'] = 'mall_code'\n  if(!is.null(mallcode)){\n    redstar_location = redstar_location[mall_code %in% mallcode,]\n  }\n  return(redstar_location)\n}\n\ncalSubwayDistance <- function(redstar_location,redstar_result) {\n  #get the closest subway's longitude and latitude(some city missing some)\n  closest_subway = find_closest_subways(redstar_location,place_key)\n  #get the distance between the mall and the closest subway\n  subway_distance = distHaversine(redstar_location[,c('longitude','latitude')],closest_subway[,c('X2','X1')])\n  #put mall_name and distance together\n  result_subway = cbind(mall_name = redstar_location$mall_name,subway_distance)\n  #combine the final result----redstar_result with subway distance result\n  redstar_result = merge(redstar_result,result_subway,by = \"mall_name\")\n  return(redstar_result)\n}\n\ngetCityPinyinList = function(redstar_location){\n  #get city pin dictionary\n  all_city_pin = read.table(\"C:/Users/qingye.yuan/Desktop/工作需要/工作信息/city_pinyin.txt\",sep = \" \",fileEncoding = \"utf-8\",nrows = 500)\n  colnames(all_city_pin) = c(\"city_name\",\"city_pinyin\",\"city_abbr\")\n  all_city_pin$city_pinyin = tolower(all_city_pin$city_pinyin)\n  #get the unique city list about the mall\n  city_list = unique(redstar_location$city)\n  city_list = data.frame(city_name = city_list)\n  #combind city name and its pinyin name\n  city_pinyin_df = merge(city_list,all_city_pin,by = \"city_name\",all.x = TRUE)\n  return(city_pinyin_df)\n}\n\nscrap_business_info = function(city_pinyin_df) {\n  #source the file contains the web scraping coding\n  source(\"~/R_Projects/page_destructure/Rfile/Rvest.R\")\n  #unsetting proxy setting before web scraping, since that may slow down the scraping speed\n  Sys.unsetenv(\"http_proxy\")\n  Sys.unsetenv(\"https_proxy\")\n  Sys.unsetenv(\"ftp_proxy\")\n  #get each city's famous business name(may need to update due to city's expansion)\n  business_region = dianping_scrapper2(city_pinyin_df$city_pinyin)\n  #combine city and region name using city's pinyin\n  business_region_final = merge(business_region,\n                                city_pinyin_df,\n                                by.x = \"city\",\n                                by.y = \"city_pinyin\")\n  #get full region name using city name and region name\n  pv = paste0(business_region_final$city_name,\n              business_region_final$region)\n  business_region_final$location = pv\n  return(business_region_final)\n}\n\ncalBusinessDistanceGeocode = function(pv){\n  Sys.setenv(http_proxy = proxy_url, https_proxy = proxy_url, ftp_proxy = proxy_url)\n  num = length(pv)%/%2000+1\n  for(i in 1:num){\n    if(i<num){\n       commerce_cord_ch[[i]] <<- lapply(pv[((i-1)*2000+1):(i*2000)],geocode_general)\n    }\n    else{\n       commerce_cord_ch[[i]] <<- lapply(pv[((i-1)*2000+1):length(pv)],geocode_general)\n    }\n      commerce_cord_ch[[i]] <<- rbindlist(commerce_cord_ch[[i]])\n  }\n}\n  \ncalBusinessDistanceAPI = function(pv){\n  Sys.setenv(http_proxy = proxy_url, https_proxy = proxy_url, ftp_proxy = proxy_url)\n  num = length(pv)%/%2000+1\n  # combine four part together with column filling(if less than 4 columns then expand automatically)\n  commerce_cord_result = rbindlist(commerce_cord_ch[1:num],fill = TRUE)\n  # put commercial center's name and position together\n  commerce_cord_result = cbind(pv,commerce_cord_result)\n  # find name of commercial center with no position\n  extra_pv = commerce_cord_result[apply(is.na(commerce_cord_result[,-1]),1,all),]$pv\n  if(length(extra_pv)>0){\n  commerce_cord_ch[[num+1]] <<- lapply(extra_pv,getSimplifiedGeoData)\n  commerce_cord_ch[[num+1]] <<- rbindlist(commerce_cord_ch[[num+1]])\n  colnames(commerce_cord_ch[[num+1]]) <<- c(\"lat\",\"lon\",\"lat2\",\"lon2\")\n  # put the requested answer back to original location-coordinate table\n  commerce_cord_result[apply(is.na(commerce_cord_result[,-1]),1,all),c(\"lat\",\"lon\",\"lat2\",\"lon2\")] = commerce_cord_ch[[num+1]][,c(\"lat\",\"lon\",\"lat2\",\"lon2\")]\n  }\n  Sys.unsetenv(\"http_proxy\")\n  Sys.unsetenv(\"https_proxy\")\n  Sys.unsetenv(\"ftp_proxy\")\n  # if still missing, using gaode API to fill in\n  extra_pv2 = commerce_cord_result[apply(is.na(commerce_cord_result[,-1]),1,all),]$pv\n  if(length(extra_pv2)>0){\n  commerce_cord_ch[[num+2]] <<- lapply(extra_pv2,getDaodeGeoData)\n  commerce_cord_ch[[num+2]] <<- rbindlist(commerce_cord_ch[[num+2]])\n  commerce_cord_ch[[num+2]] <<- cbind(commerce_cord_ch[[num+2]],lat2 = NA,lon2 = NA)\n  # put the requested answer back to original location-coordinate table\n  commerce_cord_result[apply(is.na(commerce_cord_result[,-1]),1,all),c(\"lat\",\"lon\",\"lat2\",\"lon2\")] = commerce_cord_ch[[num+2]][,c(\"lat\",\"lon\",\"lat2\",\"lon2\")]\n  }\n  # replace \"其他\" with \"中心\" and using gaode to request coordination.\n  extra_pv3 = commerce_cord_result[str_detect(commerce_cord_result$pv,\"其他$\"),]$pv\n  if(length(extra_pv3)>0){\n  extra_pv3 = str_replace_all(extra_pv3,\"其他\",\"中心\")\n  commerce_cord_ch[[num+3]] <<- lapply(extra_pv3,getDaodeGeoData) # using proxy it is hard and slow to get\n  commerce_cord_ch[[num+3]] <<- rbindlist(commerce_cord_ch[[num+3]])\n  commerce_cord_ch[[num+3]] <<- cbind(commerce_cord_ch[[num+3]],lat2 = NA,lon2 = NA)\n  # put the requested answer back to original location-coordinate table(using regexpr)\n  commerce_cord_result[str_detect(commerce_cord_result$pv,\"其他$\"),c(\"lat\",\"lon\",\"lat2\",\"lon2\")] = commerce_cord_ch[[num+3]][,c(\"lat\",\"lon\",\"lat2\",\"lon2\")]\n  }\n  return(commerce_cord_result)\n}\n\ncalBusinessDistance = function(commerce_cord_result,redstar_location,redstar_result){\n  # extract city,commercial center name,and coordinate together\n  commerce_cord_final_result = commerce_cord_result[,c(\"pv\",\"lon\",\"lat\")]\n  commerce_cord_final_result = cbind(city = business_region_update$city_name,commerce_cord_final_result)\n  commerce_cord_final_result$city = as.character(commerce_cord_final_result$city)\n  # merge the shopping mall's info and commercial center info\n  commerce_cord_final_result = merge(redstar_location,commerce_cord_final_result,by = \"city\",allow.cartesian=TRUE)\n  # calculate the distance between them\n  commerce_cord_final_result$commerce_distance = distHaversine(commerce_cord_final_result[,c('longitude','latitude')],commerce_cord_final_result[,c('lon','lat')])\n  # get the closest commercial center distance from the shopping mall\n  commerce_distance_df = commerce_cord_final_result[,.(commerce_distance = min(commerce_distance)),by = \"mall_name\"]\n  # merge closest distance back to the final result set(may disturb the original order)\n  redstar_result = merge(redstar_result,commerce_distance_df,by = \"mall_name\")\n  # make mall_name vector a factor which ordered by original order(in case we can always trace)\n  redstar_result$mall_name = factor(redstar_result$mall_name,levels = redstar_location$mall_name,ordered = TRUE)\n  redstar_result = redstar_result[order(redstar_result$mall_name),]\n  # compile statistics of the commercial center inside 2500 meter\n  # shop_commerce_count = commerce_cord_final_result[commerce_distance<2500,.N,by = mall_name]\n  shop_commerce_count = commerce_cord_final_result[,.(distance_commerce_in_2500 = sum(commerce_distance<2500)),by = mall_name]\n  # merge number inside 2500 m back to the final result set(need to consider order???)\n  redstar_result = merge(redstar_result,shop_commerce_count,by = \"mall_name\")\n  return(redstar_result)\n}\n\ncalClosestWayDistance <- function(redstar_location, redstar_result) {\n  Sys.setenv(http_proxy = proxy_url, https_proxy = proxy_url, ftp_proxy = proxy_url)\n  # get closest road from shopping mall's location\n  closest_road_list = getClosestRoadPointFromDF(redstar_location)\n  closest_road_df = rbindlist(closest_road_list)\n  # calculate the distance between the closest road and shopping mall\n  closest_road_distance = distHaversine(redstar_location[, c('longitude', 'latitude')], closest_road_df[, c('lng', 'lat')])\n  closest_road_distance_df = cbind(mall_name = redstar_location$mall_name, closest_road_distance)\n  # merge closest distance result with final result set\n  redstar_result = merge(redstar_result, closest_road_distance_df, by = \"mall_name\")\n}\n\ncalHighWayDistance <- function(redstar_location, redstar_result) {\n  # get every city's district info(name,coordinate) from gaode map system api\n  Sys.unsetenv(\"http_proxy\")\n  Sys.unsetenv(\"https_proxy\")\n  Sys.unsetenv(\"ftp_proxy\")\n  city_list = unique(redstar_location$city)\n  district_location_list = lapply(city_list,getGaoDeDistrictInfo)\n  district_location_df = rbindlist(district_location_list)\n  district_lat_lon_matrix = str_split_fixed(district_location_df$center_location,\",\",2)\n  class(district_lat_lon_matrix) = \"numeric\"\n  district_location_df$lon = district_lat_lon_matrix[,1]\n  district_location_df$lat = district_lat_lon_matrix[,2]\n  # merge shopping mall info with city's district info\n  redstar_district_mixed_df = merge(redstar_location,district_location_df,by = \"city\",allow.cartesian=TRUE)\n  # get distance from shopping mall and city's district center(mainly for the highway access info)\n  availablenum = nrow(redstar_district_mixed_df)\n  redstar_direction_df = list()\n  availabletime = availablenum %/% 40\n  Sys.setenv(http_proxy = proxy_url, https_proxy = proxy_url, ftp_proxy = proxy_url)\n  for(i in 0:availabletime){\n    redstar_direction_df[[i+1]] = getDirectionInfoFromDF(redstar_district_mixed_df[(40*i+1):(40*(i+1)),])\n  }\n  redstar_direction_final_df = rbindlist(redstar_direction_df)\n  redstar_direction_final_df = redstar_direction_final_df[1:availablenum,]\n  # get coordinate for the four direction from shopping mall about 0.5 degree diff in lon or lat\n  redstar_four_direction_df = makeFourDirectionFromDF(redstar_location)\n  redstar_four_direction_mixed_df = merge(redstar_location,redstar_four_direction_df,by = \"mall_name\",allow.cartesian=TRUE)\n  redstar_four_direction_mixed_df = as.data.frame(redstar_four_direction_mixed_df)\n  # get distance from shopping mall and its four direction expand(mainly for the highway access info)\n  redstar_four_direction_df = list()\n  availablenum2 = nrow(redstar_four_direction_mixed_df)\n  availabletime2 = availablenum2 %/% 40\n  for(i in 1:(availabletime2+1)){\n    redstar_four_direction_df[[i]] = getDirectionInfoFromDF(redstar_four_direction_mixed_df[(40*(i-1)+1):(40*i),])\n  }\n  redstar_four_direction_final_df = rbindlist(redstar_four_direction_df)\n  redstar_four_direction_final_df = redstar_four_direction_final_df[1:availablenum2,]\n  #combine district info and four direction info together to get closest highway\n  combined_highway_raw_df = rbind(redstar_direction_final_df,redstar_four_direction_final_df)\n  combined_highway_raw_dt = data.table(combined_highway_raw_df)\n  # get shortest distance from highway\n  shortest_distance_result = combined_highway_raw_dt[,.(highway_distance = min(highway_distance),district_center_distance = min(distance,na.rm = TRUE)),by = \"start_point\"]\n  # merge highway distance info back to final result set\n  redstar_result = merge(redstar_result,shortest_distance_result,by.x = \"mall_name\",by.y = \"start_point\")\n}\n\ncalCommunityInfo <- function(redstar_location,redstar_result) {\n  city = unique(redstar_location$city)\n  city = paste0(city,\"市\")\n  source(\"~/Rfile/R_impala.R\") ##!!need to include that file\n  community_data_sql = \"select id,city,province,area,name,address,plate,areamonut,roommount,buildingdate,longitude,latitude,buildingamount,pricesection,ownermallname from ods.ods_db_dragoneye_xiwa_redstar_community_dt\"\n  community_data = read_data_impala_general(community_data_sql)\n  # always takes string before \"市\" to do the check\n  community_data$join_city = ifelse(!str_detect(community_data$city,\"(\\\\w+)市$\"),community_data$city,str_extract(community_data$city,\"(\\\\w+)(?=市)\"))\n  # merge shopping mall info with community's info\n  redstar_community_mixed_df = merge(y=redstar_location,x=community_data,by.y = \"city\",by.x = \"join_city\",all.y = TRUE)\n  # calculate distance from shopping mall to community\n  redstar_community_distance = distHaversine(redstar_community_mixed_df[,c('longitude.x','latitude.x')],redstar_community_mixed_df[,c('longitude.y','latitude.y')])\n  redstar_community_distance = cbind(redstar_community_mixed_df[,c(\"city\",\"province\",\"mall_name\",\"area\",\"name\",\"address\",\"plate\",\"roommount\",\"pricesection\")],distance = redstar_community_distance)\n  redstar_community_distance = data.table(redstar_community_distance)\n  redstar_community_distance = redstar_community_distance[(!(city %in% c('北京市','上海市','深圳市','厦门市')) & pricesection < 100000)|(pricesection < 250000),]\n  # redstar_community_5km_number = redstar_community_distance[,sum(distance<=5000,na.rm = TRUE),by = mall_name]\n  # redstar_community_50km_number = redstar_community_distance[,sum(distance<=50000,na.rm = TRUE),by = mall_name]\n  redstar_community_5km_roominfo = redstar_community_distance[distance<=5000,.(communitynum = .N,roomnum = sum(roommount,na.rm = TRUE),roomnumavailablerate = sum(roommount!=0)/.N,pricemorethan50k = sum(pricesection>50000)/sum(pricesection!=0),pricemorethan10k = sum(pricesection>10000)/sum(pricesection!=0)),by = mall_name]\n  redstar_community_50km_roominfo = redstar_community_distance[distance<=50000,.(communitynum = .N,roomnum = sum(roommount,na.rm = TRUE),roomnumavailablerate = sum(roommount!=0)/.N,pricemorethan50k = sum(pricesection>50000)/sum(pricesection!=0),pricemorethan10k = sum(pricesection>10000)/sum(pricesection!=0)),by = mall_name]\n  # calculate community's average price data\n  temp_5km = redstar_community_distance[distance<=5000,.(totalprice = sum(roommount*pricesection,na.rm = TRUE),totalnum = sum(.SD[(roommount*pricesection!=0),roommount])),by = mall_name]\n  temp_5km[,avg_price:=totalprice/totalnum]\n  temp_50km = redstar_community_distance[distance<=50000,.(totalprice = sum(roommount*pricesection,na.rm = TRUE),totalnum = sum(.SD[(roommount*pricesection!=0),roommount])),by = mall_name]\n  temp_50km[,avg_price:=totalprice/totalnum]\n  redstar_community_5km_roominfo$avg_price = temp_5km$avg_price\n  redstar_community_50km_roominfo$avg_price = temp_50km$avg_price\n  redstar_community_50km_roominfo = data.frame(communitynum50 = redstar_community_50km_roominfo$communitynum,roomnum50 = redstar_community_50km_roominfo$roomnum,avg_price_50 = redstar_community_50km_roominfo$avg_price)\n  community_result = cbind(redstar_community_5km_roominfo,redstar_community_50km_roominfo)\n  redstar_result = merge(redstar_result,community_result,by = \"mall_name\")\n  return(redstar_result)\n}\n\ntestfun = function(redstar_result, redstar_location_update) {\n  for (mallname in redstar_location_update$mall_name) {\n    for (colname in colnames(redstar_result)) {\n      # print(redstar_result[[redstar_result$mall_name == mallname, colname]])\n      redstar_result[[which(redstar_result$mall_name == mallname),colname]] = redstar_result_update[[which(redstar_result_update$mall_name == mallname),colname]]\n    }\n  }\n}",
    "created" : 1524796116608.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3108081756",
    "id" : "B993CD04",
    "lastKnownWriteTime" : 1526373624,
    "last_content_update" : 1526373624742,
    "path" : "~/R_Projects/rental_model_standard/Rfile/addupdate.R",
    "project_path" : "Rfile/addupdate.R",
    "properties" : {
        "docOutlineVisible" : "1",
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
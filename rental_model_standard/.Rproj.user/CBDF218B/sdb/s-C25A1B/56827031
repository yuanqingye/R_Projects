{
    "collab_server" : "",
    "contents" : "library(ggmap)\nlibrary(geosphere)\nlibrary(googleway)\nlibrary(baidumap)\nlibrary(plyr)\nlibrary(RJSONIO)\nlibrary(RCurl)\n\nplace_key = \"AIzaSyCW6btatRC9nXwaMI06bgV5iHZbsX4H034\"\n# proxy_url <- \"http://127.0.0.1:59327/\" #蓝灯\nproxy_url <- \"http://127.0.0.1:50837/\" #Psiphon 3\noptions(baidumap.key = '4SY3dY8GrhfU5ChOeqFMvhcaf9DWo7dc')\nbaidu_key = '4SY3dY8GrhfU5ChOeqFMvhcaf9DWo7dc'\ngaode_key = 'de4e66af67591588df24da020bb3d3eb'\ntencent_key = 'IESBZ-JKIRS-XVTOJ-6A2LQ-F2NAT-OABVW'\n\n# Sys.setenv(http_proxy = proxy_url, https_proxy = proxy_url, ftp_proxy = proxy_url)\n\n# get the closest subway station from the coordination of the mall,without input for subway stations\n# The key method google_places need latitude first and longitude next\nfind_closest_subways = function(coordinate_df,place_key){\n  coordinate_df$lat_lon <- do.call(Map, c(f= c, unname(coordinate_df[,c(\"latitude\",\"longitude\")])))\n  i = 1\n  result_df = data.frame(matrix(,nrow=nrow(coordinate_df), ncol=2))\n  for(v in coordinate_df$lat_lon){\n    df = google_places(key = place_key,place_type = \"subway_station\",location = v,radius = 5000,rankby = \"distance\")\n    if(!is.na(df$results$geometry$location$lat) && length(df$results$geometry$location$lat)>0){\n      result_df[i,] = c(df$results$geometry$location$lat[1],df$results$geometry$location$lng[1])\n    }\n    i = i+1\n  }\n  return(result_df)\n  #apply(DF[, c(\"height\", \"weight\")], 1, f)\n}\n\n\ngetGeoData <- function(location,key = place_key){\n  location <- gsub(' ','+',location)\n  geo_data <- getURL(paste(\"https://maps.googleapis.com/maps/api/geocode/json?address=\",location,\"&key=\",place_key,sep=\"\"))\n  raw_data_2 <- fromJSON(geo_data)\n  #fromJSON get back a not so friendly result, seperate the longitude and latitude\n  return(raw_data_2)\n}\n\ngetSimplifiedGeoData = function(location,key = place_key){\n  v = vector(mode = \"numeric\",length = 0L)\n  raw_data = google_geocode(location,key = place_key)\n  if(length(raw_data$results) == 0){\n    result = data.frame(lat = NA,lng = NA,lat2 = NA,lng2 = NA)\n  }\n  else if(nrow(raw_data$results) == 1){\n    result = raw_data$results$geometry$location\n    result = cbind(result,lat2 = NA,lng2 = NA)\n  }\n  else if(nrow(raw_data$results) >1){\n    result = raw_data$results[1,]$geometry$location\n    result2 = raw_data$results[2,]$geometry$location\n    result = cbind(result,lat2 = result2$lat,lng2 = result2$lng)\n  }\n  else{\n    result = data.frame(lat = NA,lng = NA,lat2 = NA,lng2 = NA)\n  }\n  return(result)\n}\n\ngetBaiduGeoData = function(location,key = baidu_key){\n  location <- gsub(' ','+',location)\n  geo_data <- getURL(paste(\"http://api.map.baidu.com/geocoder/v2/?address=\",location,\"&output=json&ak=\",key,\"&callback=showLocation\",sep=\"\"))\n  raw_data_2 <- fromJSON(geo_data)\n  #fromJSON get back a not so friendly result, seperate the longitude and latitude\n  return(raw_data_2)\n}\n\ngetDaodeGeoData = function(location,key = gaode_key){\n  location <- gsub(' ','+',location)\n  geo_data <- getURL(paste(\"http://restapi.amap.com/v3/geocode/geo?address=\",location,\"&output=json&key=\",key,sep=\"\"))\n  raw_data <- fromJSON(geo_data)\n  #fromJSON get back a not so friendly result, seperate the longitude and latitude\n  result = data.frame(lon = NA,lat = NA)\n  if (exists(\"raw_data\")) {\n    if (!is.atomic(raw_data)) {\n      if (length(raw_data$geocodes) > 0) {\n        result = raw_data$geocodes[[1]]$location\n        result = str_split_fixed(result, \",\", 2)\n        class(result) = \"numeric\"\n        result = as.data.frame(result)\n        colnames(result) = c(\"lon\", \"lat\")\n      }\n    }\n  }\n  return(result)\n}\n\ngeocode_like = function(search_string){\n  \n}\n\ngetClosestRoadPoint = function(start_location,end_location = start_location,key = place_key){\n  result = NA\n  response = google_directions(origin = start_location,destination = end_location,key = place_key)\n  result = response$routes$legs[[1]]$end_location\n  print(result)\n  return(result)\n}\n\ngetClosestRoadPointFromDF = function(location_df){\n  result_df = data.frame(matrix(,nrow=nrow(location_df), ncol=2))\n  location_df$lat_lon = do.call(Map, c(f= c, unname(location_df[,c(\"latitude\",\"longitude\")])))\n  result = lapply(location_df$lat_lon,getClosestRoadPoint)\n  return(result)\n}\n\ngetGaoDeDistrictInfo = function(city,key = gaode_key){\n  city = enc2utf8(city)\n  location <- gsub(' ','+',city)\n  # http://restapi.amap.com/v3/config/district?keywords=北京&subdistrict=2&key=<用户的key>\n  geo_data <- getURL(paste(\"http://restapi.amap.com/v3/config/district?keywords=\",location,\"&subdistrict=1&key=\",key,sep=\"\"))\n  raw_data <- fromJSON(geo_data)\n  n = length(raw_data$districts)\n  result = raw_data$districts[[n]]$districts  \n  result_df = data.frame(matrix(,nrow=length(result), ncol=3))\n  colnames(result_df) = c(\"city\",\"district\",\"center_location\")\n  result_df$city = city\n  i = 1\n  for(ele in result){\n   result_df[i,\"district\"] = ele$name\n   result_df[i,\"center_location\"] = ele$center\n   i = i+1\n  }\n  return(result_df)\n}\n#寻找高速，先要使用限速应用,用不了则只能间接使用导航API的距离与时间 \ngetTencentRouteInfo = function(start_location,end_location,key = tencent_key){\n  geo_data = getURL(paste(\"http://apis.map.qq.com/ws/distance/v1/?mode=driving&from=\",start_location,\"&to=\",end_location,\"&key=\",key,sep = \"\"))\n  raw_data <- fromJSON(geo_data)\n  result = raw_data\n  return(result)\n}\n\ngetDirectionInfo = function(city,start_location,end_location,start_point = start_location,end_point = end_location,speed_limit = 65,key = place_key){\n  raw_data = google_directions(start_location,end_location,key = key)\n  result = raw_data$routes$legs[[1]]$steps[[1]]\n  speed = result$distance$value/result$duration$value*3.6\n  indexes = which(speed>speed_limit)\n  if (length(indexes) > 0) {\n    highway_index = indexes[1]\n    if (highway_index > 1) {\n      highway_distance = sum(result$distance$value[1:(highway_index-1)])\n    }\n    else{\n      highway_distance = 0\n    }\n  }\n  else{\n    highway_distance = Inf\n  }\n  distance = raw_data$routes$legs[[1]]$distance$value\n  duration = raw_data$routes$legs[[1]]$duration$value\n  if(is.null(distance)){\n    distance = NA\n  }\n  if(is.null(duration)){\n    duration = NA\n  }\n  result_df = data.frame(city = city,start_point = start_point,end_point = end_point,\n                         distance = distance,duration = duration,highway_distance = highway_distance)\n}\n\ngetDirectionInfoFromDF = function(location_df){\n  nv = vector(mode = \"numeric\",length = 0L)\n  cv = vector(mode = \"character\",length = 0L)\n  result_df = data.frame(city = cv,start_point = cv,end_point = cv,\n                         distance = nv,duration = nv,highway_distance = nv)\n  location_df$start_location = do.call(Map, c(f= c, unname(location_df[,c(\"latitude\",\"longitude\")])))\n  location_df$end_location = do.call(Map, c(f= c, unname(location_df[,c(\"lat\",\"lon\")])))\n  location_df$end_point = paste0(location_df$city,location_df$district)\n# result = mapply(getDirectionInfo,location_df$city,location_df$start_location,location_df$end_location,location_df$mall_name,location_df$end_point,SIMPLIFY = FALSE)\n  pbar <- create_progress_bar('text')\n  pbar$init(nrow(location_df))\n  for(i in 1:nrow(location_df)){\n    if(i %% 50 ==0){\n    ptm <- proc.time()\n    }\n    temp_df = getDirectionInfo(location_df$city[i],location_df$start_location[[i]],\n                               location_df$end_location[[i]],location_df$mall_name[i],location_df$end_point[i])\n    result_df = rbind(result_df,temp_df)\n    pbar$step()\n    if(i %% 50 == 0){\n    print(proc.time() - ptm)\n    }\n  }\n  return(result_df)\n}\n\nmakeFourDirection = function(shop_location){\n  east = data.frame(district=paste0(shop_location$mall_name,\"东\"),mall_name = shop_location$mall_name,lat = shop_location$latitude,lon = shop_location$longitude+0.5)\n  west = data.frame(district=paste0(shop_location$mall_name,\"西\"),mall_name = shop_location$mall_name,lat = shop_location$latitude,lon = shop_location$longitude-0.5)\n  south = data.frame(district=paste0(shop_location$mall_name,\"南\"),mall_name = shop_location$mall_name,lat = shop_location$latitude-0.5,lon = shop_location$longitude)\n  north = data.frame(district=paste0(shop_location$mall_name,\"北\"),mall_name = shop_location$mall_name,lat = shop_location$latitude+0.5,lon = shop_location$longitude)\n  result = rbind(east,west,south,north)\n  return(result)\n}\n\nmakeFourDirectionFromDF = function(shop_location_df){\n  nv = vector(mode = \"numeric\",length = 0L)\n  cv = vector(mode = \"character\",length = 0L)\n  result_df = data.frame(district = cv,mall_name = cv,lat = nv,lon = nv)\n  for(i in 1:nrow(shop_location_df)){\n    temp_df = makeFourDirection(shop_location_df[i,])\n    result_df = rbind(result_df,temp_df)\n  }\n  return(result_df)\n}\n",
    "created" : 1520848515019.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2132282232",
    "id" : "56827031",
    "lastKnownWriteTime" : 1521786510,
    "last_content_update" : 1521786510502,
    "path" : "~/R_Projects/rental_model_standard/Rfile/functions.R",
    "project_path" : "Rfile/functions.R",
    "properties" : {
        "docOutlineVisible" : "1",
        "tempName" : "Untitled1"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
dest_df = big_general_info[big_general_info$date_id %in% dest_time_index,]
test_df = big_general_info[big_general_info$date_id %in% test_time_index,]
train_df = train_df[complete.cases(train_df),]
dest_df = dest_df[complete.cases(dest_df[,!(names(dest_df) %in% "rent")]),]
test_df = test_df[complete.cases(test_df),]
test_mall_names = test_df[,"mall_name"]
train_rent = train_df[,!(names(big_general_info) %in% c("mall_name","mall_code","date_id"))]
dest_rent = dest_df[,!(names(big_general_info) %in% c("mall_name","mall_code","date_id"))]
test_rent = test_df[,!(names(big_general_info) %in% c("mall_name","mall_code","date_id"))]
return(list("train_rent"=train_rent,"test_rent"=test_rent,"dest_rent"=dest_rent,"test_mall_names"=test_mall_names))
}
rentModelDataList = getTrainTestData(rentModelData)
train_rent_1219 = rentModelDataList$train_rent
test_rent_1219 = rentModelDataList$test_rent
dest_rent_1219 = rentModelDataList$dest_rent
test_mall_names_1219 = rentModelDataList$test_mall_names
rentModelCor = cor(rbindlist(train_rent_1219,test_rent_1219))
?rbindlist
rentModelCor = cor(rbindlist(list(train_rent_1219,test_rent_1219)))
View(rentModelCor)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
library(caret)
rentModelHighlyCorrelated <- findCorrelation(rentModelCor, cutoff=0.5)
print(rentModelHighlyCorrelated)
?findCorrelation
rentModelHighlyCorrelated <- findCorrelation(rentModelCor, cutoff=0.5,names = TRUE)
rentModelHighlyCorrelated
?train
names(getModelInfo())
control <- trainControl(method="repeatedcv", number=10, repeats=3)
getModelInfo()
model <- train(rent~., data=cor(rbindlist(list(train_rent_1219,test_rent_1219))), method="lvq", preProcess="scale", trControl=control,
importance = T)
model
rentModel
rentModel <- train(rent~., data=cor(rbindlist(list(train_rent_1219,test_rent_1219))), method="rf", preProcess="scale", trControl=control,
importance = T)
?varImp
importance <- varImp(rentModel, scale=FALSE)
print(importance)
plot(importance)
importanceRF = importance
rm(importance)
a
importance = a = 1
importance
a
rentModel <- train(rent~., data=cor(rbindlist(list(train_rent_1219,test_rent_1219))), method="gbm", preProcess="scale", trControl=control,
importance = T)
rentModel <- train(rent~., data=cor(rbindlist(list(train_rent_1219,test_rent_1219))), method="svm", preProcess="scale", trControl=control,
importance = T)
rentModel <- train(rent~., data=cor(rbindlist(list(train_rent_1219,test_rent_1219))), method="svmRadial", preProcess="scale", trControl=control,
importance = T)
importance = importanceSVM <- varImp(rentModel, scale=FALSE)
importanceSVM <- varImp(rentModel, scale=FALSE)
importanceSVM <- varImp(rentModel, scale=FALSE)
varImp(rentModel, scale=FALSE)
varImp(rentModel)
str(rbindlist(list(train_rent_1219,test_rent_1219)))
rentModel <- train(rent~., data=train_rent_1219), method="svmRadial", preProcess="scale", trControl=control,importance = T)
rentModel <- train(rent~., data=train_rent_1219, method="svmRadial", preProcess="scale", trControl=control,importance = T)
importance = importanceSVM <- varImp(rentModel, scale=FALSE)
print(importance)
rentModel <- train(rent~., data=cor(rbindlist(list(train_rent_1219,test_rent_1219))), method="gbm_h2o", preProcess="scale", trControl=control,
importance = T)
rentModel <- train(rent~., data=cor(rbindlist(list(train_rent_1219,test_rent_1219))), method="neuralnet", preProcess="scale", trControl=control,
importance = T)
md.pattern(test_rent_1219)
View(test_rent_1219)
rentModel <- train(rent~., data=rbindlist(list(train_rent_1219,test_rent_1219)), method="neuralnet", preProcess="scale", trControl=control,
importance = T)
importance = importancenn <- varImp(rentModel, scale=FALSE)
print(importance)
View(cbind(importancenn,importanceSVM))
View(cbind(importancenn$importance,importanceSVM$importance))
rentModel <- train(rent~., data=rbindlist(list(train_rent_1219,test_rent_1219)), method="neuralnet", preProcess="scale", trControl=control,
importance = T)
rentModel <- train(rent~., data=train_rent_1219, method="neuralnet", preProcess="scale", trControl=control,
importance = T)
str(train_rent_1219)
rentModel = gbm(rent ~ . ,data = train_rent_1219,distribution = "gaussian",n.trees = 100000,interaction.depth = 4)
importance = importancegbm <- varImp(rentModel, scale=FALSE)
rentModel
importancegbm <- varImp(rentModel, scale=FALSE,numTrees = 100000)
importance = importancegbm
print(importance)
View(importance)
View(importance[order(importance$Overall,decreasing = TRUE)])
View(importance[order(importance$Overall,decreasing = TRUE),])
str(importance)
View(sort(importance$Overall))
str(sort(importance$Overall))
View(data.frame(sort(importance$Overall,decreasing = TRUE)))
importance[order(importance$Overall,decreasing = TRUE),]
importance[order(importance$Overall,decreasing = TRUE),drop = FALSE]
importance[order(importance$Overall,decreasing = TRUE),1,drop = FALSE]
train_rent = train_rent_1219
test_rent = test_rent_1219
dest_rent = dest_rent_1219
source("~/R_Projects/SVM/Rfile/test_svm.R")
try_para = svm_para_percent(train_rent,test_rent)
svm.model.next = svm(rent~.,data = train_rent,cost = 10,gamma = 0.00391,cross = 5)
rentind = names(test_rent) == "rent"
svm.test.next = predict(svm.model.next,test_rent[,!rentind])
compare.result.svm = cbind(mall_name = test_mall_names,real_rent = test_rent$rent,pred_rent = svm.test.next)
test_mall_names
compare.result.svm = data.table(compare.result.svm)
compare.result.svm[,c("real_rent","pred_rent"):=.(as.numeric(real_rent),as.numeric(pred_rent))]
compare.result.svm[,diff:=(real_rent-pred_rent)]
MSE.svm.MALLS = compare.result.svm[,.(pred_rent=sum(pred_rent),real_rent=sum(real_rent),svm_err = abs(sum(diff)),perc = sum(diff)/sum(real_rent)),by = "mall_name"]
MSE.svm = sum((svm.test.next - test_rent[,rentind])^2)/length(svm.test.next)
View(MSE.svm.MALLS)
rent_data_1219 = read_xlsx("~/data/rent_data/new_rent_data.xlsx")
rent_data_1219 = data.table(rent_data_1219)
View(rent_data_1219)
rent_data_1219[,.N,by = "mall_name"]
View(rent_data_1219[,.SD[1:(.N-12),],by = "mall_name"])
rent_data_1219[,seq := 1:.N,by = "mall_name"]
View(rent_data_1219)
?vector
getYearPara = function(v,f){
t = vector(mode = "numeric",length = 0L)
for(i in 1:length(v)-12){
t[i] = f(v[i:i+11])
}
return(t)
}
getYearPara(1:30)
getYearPara(1:30,sum)
sum(1:12)
source2
source2("./Rfile/data_process3.R",16,22)
debugSource2 = function (file, start, end, ...)
{
file.lines <- scan(file, what = character(), skip = start -
1, nlines = end - start + 1, sep = "\n")
file.lines.collapsed <- paste(file.lines, collapse = "\n")
debugSource(textConnection(file.lines.collapsed), ...)
}
debugSource2("./Rfile/data_process3.R",16,22)
?source
?debugSource
?debugSource
debugSource()
help(package="tools")
help(package="tools:rstudio")
debugSource('~/R_Projects/rental_model/Rfile/aid_func.R')
?debugSource
getYearPara(1:30,sum)
I
i
v
getYearPara(1:30,sum)
rm(getYearPara())
rm(getYearPara)
getYearPara(1:30,sum)
source('~/R_Projects/rental_model/Rfile/aid_func.R')
getYearPara(1:30,sum)
getYearPara(1:30,sum)
v
i
f(v[i:i+11])
v[i:i+11]
v
v[1:12]
f(v[1:12])
i:i+11
i
(i):(i+11)
source('~/R_Projects/rental_model/Rfile/aid_func.R')
getYearPara(1:30,sum)
system.time(getYearPara(1:30,sum))
system.time(sum(1:1000000000000000000))
sum(1:10)
system.time(sum(1:100000000000))
rep(1:10,10)
diag(1:20)*matrix(rep(1,20*12),nrow = 20,ncol = 12)
diag(1:20)
matrix(rep(1,20*12),nrow = 20,ncol = 12)
diag(1:5)*matrix(rep(1,5*12),nrow = 5,ncol = 12)
diag(1:5)%*%matrix(rep(1,5*12),nrow = 5,ncol = 12)
(1:12)+diag(1:5)%*%matrix(rep(1,5*12),nrow = 5,ncol = 12)
?apply
v=1:5
v[diag(1:5)%*%matrix(rep(1,5*12),nrow = 5,ncol = 12)]
getYearPara = function(v,f){
t = vector(mode = "numeric",length = 0L)
for(i in 1:(length(v)-11)){
t[i] = f(v[i:(i+11)])
}
return(t)
}
getYearReal = function(v,f){
t = vector(mode = "numeric",length = 0L)
for(i in 13:(length(v)-11)){
t[i] = f(v[i:(i+11)])
}
return(t)
}
getYearPara = function(v,f){
t = vector(mode = "numeric",length = 0L)
for(i in 1:(length(v)-11)){
t[i] = f(v[i:(i+11)])
}
return(t)
}
getYearReal = function(v,f){
t = vector(mode = "numeric",length = 0L)
for(i in 13:(length(v)-11)){
t[i-12] = f(v[i:(i+11)])
}
return(t)
}
View(  rent_data_1219[,getYearPara(date_id,min),by = "mall_name"]
)
View(rent_data_1219[,startmon = getYearPara(date_id,min),by = "mall_name"])
View(rent_data_1219[,.(startmon = getYearPara(date_id,min)),by = "mall_name"])
names(rent_data_1219)
?lapply
sum_col = c("finalprice","rent_area_wa","costumer_num","sale","final_price_jiaju","area_jiaju",
"jiaju_num","finalprice_jiancai","area_jiancai","jiancai_num","finalprice_ruanzhuang",
"area_ruanzhuang","ruanzhuang_num","final_jinkou","area_jinkou","jinkou_num","finalprice_xinyetai",
"area_xinyetai","xinyetai_num","brand_num","gdp","population","region_area","density")
avg_col = c("avg_gdp","avg_salary","highway_distance","road_distance","location",
"subway_distance","shangquan_distance","shangquan_num")
rent_data_year = rent_data_1219[,lapply(.SD[sum_col],getYearPara,sum),by = "mall_name"]
rent_data_year = rent_data_1219[,.(lapply(.SD[sum_col],getYearPara,sum)),by = "mall_name"]
rent_data_year = rent_data_1219[,.(lapply(.SD[,sum_col],getYearPara,sum)),by = "mall_name"]
sum_col
rent_data_year = rent_data_1219[,.(lapply(.SD[,sum_col,with=FALSE],getYearPara,sum)),by = "mall_name"]
names(rent_data_1219)
sum_col = c("finalprice","rent_area_wa","customer_num","sale","finalprice_jiaju","area_jiaju",
"jiaju_num","finalprice_jiancai","area_jiancai","jiancai_num","finalprice_ruanzhuang",
"area_ruanzhuang","ruanzhuang_num","final_jinkou","area_jinkou","jinkou_num","finalprice_xinyetai",
"area_xinyetai","xinyetai_num","brand_num","gdp","population","region_area","density")
rent_data_year = rent_data_1219[,.(lapply(.SD[,sum_col,with=FALSE],getYearPara,sum)),by = "mall_name"]
View(rent_data_year)
rent_data_year = rent_data_1219[,lapply(.SD[,sum_col,with=FALSE],getYearPara,sum),by = "mall_name"]
View(rent_data_year)
rent_data_year = rent_data_1219[,c(lapply(.SD[,sum_col,with=FALSE],getYearPara,sum),lapply(.SD[,avg_col,with=FALSE],getYearPara,mean)),by = "mall_name"]
View(rent_data_year)
rent_data_year = rent_data_1219[,c(lapply(.SD[,sum_col,with=FALSE],getYearPara,sum),lapply(.SD[,avg_col,with=FALSE],getYearPara,mean),lapply(.SD[,"date_id",with = FALSE],getYearPara,max),lapply(.SD[,"finalprice",with = FALSE],getYearReal,sum)),by = "mall_name"]
View(rent_data_year)
View(rent_data_year)
?setnames
rent_data_year = rent_data_1219[,c(lapply(.SD[,sum_col,with=FALSE],getYearPara,sum),lapply(.SD[,avg_col,with=FALSE],getYearPara,mean),lapply(.SD[,"date_id",with = FALSE],getYearPara,max),"predprice"=lapply(.SD[,"finalprice",with = FALSE],getYearReal,sum)),by = "mall_name"]
View(rent_data_year)
setnames(rent_data_year,"predprice.finalprice","predprice")
View(rent_data_year)
rent_data_year = rent_data_1219[,c(lapply(.SD[,sum_col,with=FALSE],getYearPara,sum),lapply(.SD[,avg_col,with=FALSE],getYearPara,mean),lapply(.SD[,"date_id",with = FALSE],getYearPara,max),"predprice"=lapply(.SD[,"finalprice",with = FALSE],getYearReal,sum)),by = "mall_name"]
rent_data_year = rent_data_1219[,predprice:=c(predprice.finalprice[1:.N-12],rep(NA,12)),by = "mall_name"]
rent_data_year = rent_data_year[,predprice:=c(predprice.finalprice[1:.N-12],rep(NA,12)),by = "mall_name"]
rent_data_year = rent_data_year[,predprice:=c(predprice.finalprice[1:(.N-12)],rep(NA,12)),by = "mall_name"]
View(rent_data_year)
View(rent_data_year)
rent_data_year[,.N,by = "mall_name"]
View(rent_data_1219)
View(rent_data_year)
dest_rent = rent_data_year[is.na(predprice),]
rest_rent = rent_data_year[!is.na(predprice),]
View(rest_rent)
rent_data_year$predprice.finalprice = NULL
dest_rent = rent_data_year[is.na(predprice),]
rest_rent = rent_data_year[!is.na(predprice),]
View(rest_rent)
test_rent = rent_data_year[(.N-1):.N,]
View(test_rent)
test_rent = rent_data_year[(.N-1):.N,by = "mall_name"]
test_rent = rent_data_year[(.N-1):.N,,by = "mall_name"]
test_rent = rent_data_year[,.SD[(.N-1):.N,],by = "mall_name"]
View(test_rent)
test_rent = rest_rent[,.SD[(.N-1):.N,],by = "mall_name"]
View(test_rent)
train_rent = rest_rent[,.SD[1:(.N-2),],by = "mall_name"]
View(train_rent)
View(rent_data_1219)
setnames(rent_data_year,"predprice","rent")
dest_rent = rent_data_year[is.na(predprice),]
dest_rent = rent_data_year[is.na(rent),]
rest_rent = rent_data_year[!is.na(rent),]
test_rent = rest_rent[,.SD[(.N-1):.N,],by = "mall_name"]
train_rent = rest_rent[,.SD[1:(.N-2),],by = "mall_name"]
colnames(rent_data_year)
train_rent = train_rent[,!(names(train_rent)%in%c("mall_name","date_id"))]
test_rent = test_rent[,!(names(test_rent)%in%c("mall_name","date_id"))]
dest_rent = dest_rent[,!(names(dest_rent)%in%c("mall_name","date_id"))]
svm.model.next = svm(rent~.,data = train_rent,cost = 10,gamma = 0.00391,cross = 5)
dest_rent = rent_data_year[is.na(rent),]
rest_rent = rent_data_year[!is.na(rent),]
test_rent = rest_rent[,.SD[(.N-1):.N,],by = "mall_name"]
train_rent = rest_rent[,.SD[1:(.N-2),],by = "mall_name"]
test_mall_names = test_rent$mall_name
train_rent = train_rent[,!(names(train_rent)%in%c("mall_name","date_id")),with = FALSE]
test_rent = test_rent[,!(names(test_rent)%in%c("mall_name","date_id")),with = FALSE]
dest_rent = dest_rent[,!(names(dest_rent)%in%c("mall_name","date_id")),with = FALSE]
svm.model.next = svm(rent~.,data = train_rent,cost = 10,gamma = 0.00391,cross = 5)
rentind = names(test_rent) == "rent"
svm.test.next = predict(svm.model.next,test_rent[,!rentind])
colnames(train_rent)
colnames(test_rent)
svm.model.next
rentind
train_rent = data.frame(train_rent)
test_rent = data.frame(test_rent)
dest_rent = data.frame(dest_rent)
svm.model.next = svm(rent~.,data = train_rent,cost = 10,gamma = 0.00391,cross = 5)
rentind = names(test_rent) == "rent"
svm.test.next = predict(svm.model.next,test_rent[,!rentind])
compare.result.svm = cbind(mall_name = test_mall_names,real_rent = test_rent$rent,pred_rent = svm.test.next)
compare.result.svm = data.table(compare.result.svm)
compare.result.svm[,c("real_rent","pred_rent"):=.(as.numeric(real_rent),as.numeric(pred_rent))]
compare.result.svm[,diff:=(real_rent-pred_rent)]
MSE.svm.MALLS = compare.result.svm[,.(pred_rent=sum(pred_rent),real_rent=sum(real_rent),svm_err = abs(sum(diff)),perc = sum(diff)/sum(real_rent)),by = "mall_name"]
MSE.svm = sum((svm.test.next - test_rent[,rentind])^2)/length(svm.test.next)
View(MSE.svm.MALLS)
try_para = svm_para_percent(train_rent,test_rent)
View(try_para)
svm.model.next = svm(rent~.,data = train_rent,cost = 10,gamma = 7.81250e-03,cross = 5)
rentind = names(test_rent) == "rent"
svm.test.next = predict(svm.model.next,test_rent[,!rentind])
compare.result.svm = cbind(mall_name = test_mall_names,real_rent = test_rent$rent,pred_rent = svm.test.next)
compare.result.svm = data.table(compare.result.svm)
compare.result.svm[,c("real_rent","pred_rent"):=.(as.numeric(real_rent),as.numeric(pred_rent))]
compare.result.svm[,diff:=(real_rent-pred_rent)]
# MSE.svm.MALLS = compare.result.svm[,.(svm_err = sqrt(sum(diff^2)/3)),by = "mall_name"]
MSE.svm.MALLS = compare.result.svm[,.(pred_rent=sum(pred_rent),real_rent=sum(real_rent),svm_err = abs(sum(diff)),perc = sum(diff)/sum(real_rent)),by = "mall_name"]
MSE.svm = sum((svm.test.next - test_rent[,rentind])^2)/length(svm.test.next)
View(MSE.svm.MALLS)
View(rent_data_1219)
library(randomForest)
rf <- randomForest(rent ~ ., data=train_rent, ntree=10000, proximity=TRUE)
rentind = which(names(test_rent) %in% c("rent"))
rf.test.next= predict(rf,test_rent[-rentind])
compare.result.rf = cbind(mall_name = test_mall_names,real_rent = test_rent$rent,pred_rent = rf.test.next)
compare.result.rf = data.table(compare.result.rf)
compare.result.rf[,c("real_rent","pred_rent"):=.(as.numeric(real_rent),as.numeric(pred_rent))]
compare.result.rf[,diff:=(real_rent-pred_rent)]
MSE.rf.MALLS = compare.result.rf[,.(pred_rent=sum(pred_rent),real_rent=sum(real_rent),rf_err = abs(sum(diff)),perc = sum(diff)/sum(real_rent)),by = "mall_name"]
MSE.rf <- sum((test_rent$rent - rf.test.next)^2)/length(test_rent$rent)
View(MSE.rf.MALLS)
require(gbm)
rent.boost = gbm(rent ~ . ,data = train_rent,distribution = "gaussian",n.trees = 100000,interaction.depth = 4)
n.trees = seq(from=100 ,to=100000, by=100) #num of trees-a vector of 100 values
predmatrix<-predict(rent.boost,test_rent,n.trees = n.trees)
test.error<-with(test_rent,apply((predmatrix-rent)^2,2,mean))
head(test.error) #contains the Mean squared test error for each of the 100 trees averaged
compare.result.gbm = cbind(mall_name = test_mall_names,real_rent = test_rent$rent,pred_rent = predmatrix[,1000])
compare.result.gbm = data.table(compare.result.gbm)
compare.result.gbm[,c("real_rent","pred_rent"):=.(as.numeric(real_rent),as.numeric(pred_rent))]
compare.result.gbm[,diff:=(real_rent-pred_rent)]
MSE.gbm.MALLS = compare.result.gbm[,.(pred_rent=sum(pred_rent),real_rent=sum(real_rent),gbm_err = abs(sum(diff)),perc = sum(diff)/sum(real_rent)),by = "mall_name"]
MSE.gbm = test.error[1000]
View(MSE.gbm.MALLS)
n <- names(train_rent)
f <- as.formula(paste("rent ~", paste(n[!n %in% "rent"], collapse = " + ")))
maxs <- apply(train_rent, 2, max)
mins <- apply(train_rent, 2, min)
train.scaled = as.data.frame(scale(train_rent, center = mins, scale = maxs - mins))
test.scaled = as.data.frame(scale(test_rent,center = mins,scale = maxs - mins))
max_rent = maxs["rent"]
min_rent = mins["rent"]
nn <- neuralnet(f,data=train.scaled,hidden = rep(6,7),act.fct = 'logistic')
rentind = which(names(test.scaled) %in% c("rent"))
pr.nn <- compute(nn,test.scaled[,-rentind])
pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent
pr.nn_ = pr.nn_[,1]
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/length(test.r)
compare.result.nn = cbind(mall_name = test_mall_names,real_rent = test_rent$rent,pred_rent = pr.nn_)
compare.result.nn = data.table(compare.result.nn)
compare.result.nn[,c("real_rent","pred_rent"):=.(as.numeric(real_rent),as.numeric(pred_rent))]
compare.result.nn[,diff:=(real_rent-pred_rent)]
MSE.nn.MALLS = compare.result.nn[,.(pred_rent=sum(pred_rent),real_rent=sum(real_rent),nn_err = abs(sum(diff)),perc = sum(diff)/sum(real_rent)),by = "mall_name"]
View(MSE.nn.MALLS)
View(dest_rent)
View(rent_data_year)
dest_rent = rent_data_year[date_id == 201711,]
View(dest_rent)
dest_mall_names = dest_rent$mall_name
dest_rent = dest_rent[,!(names(dest_rent)%in%c("mall_name","date_id")),with = FALSE]
dest_rent = data.frame(dest_rent)
destmatrix.gbm<-predict(rent.boost,test_rent,n.trees = 100000)
dest_result = cbind(mall_name=dest_mall_names,dest_rent = destmatrix.gbm)
View(dest_result)
dest_mall_names
destmatrix.gbm<-predict(rent.boost,dest_rent,n.trees = 100000)
dest_result = cbind(mall_name=dest_mall_names,dest_rent = destmatrix.gbm)
View(dest_result)
library(openxlsx)
write.xlsx(dest_rent,"~/data/rent_data/rent_pred_by_gbm.xlsx")
write.xlsx(dest_rent,"~/data/rent_data/rent_pred_2018_by_gbm.xlsx")
View(MSE.gbm.MALLS)
View(dest_rent)
View(cbind(test_rent$finalprice,dest_rent$finalprice))
View(cbind(test_rent$finalprice[1:length(test_rent$finalprice)%%2==1,],dest_rent$finalprice))
View(test_rent$finalprice[(1:length(test_rent$finalprice))%%2==1,])
(1:length(test_rent$finalprice))%%2
(1:length(test_rent$finalprice))%%2==1
View(cbind(test_rent$finalprice[1:length(test_rent$finalprice)%%2==1],dest_rent$finalprice))
dest_mall_names
svm.dest.next = predict(svm.model.next,dest_rent[,!rentind])
colnames(dest_rent)
str(dest_rent)
str(test_rent)
svm.test.next = predict(svm.model.next,test_rent[,!rentind])
str(train_rent)
svm.model.next = svm(rent~.,data = train_rent,cost = 10,gamma = 7.81250e-03,cross = 5)
rentind = names(test_rent) == "rent"
svm.test.next = predict(svm.model.next,test_rent[,!rentind])
svm.dest.next = predict(svm.model.next,dest_rent[,!rentind])
dest_result = cbind(mall_name=dest_mall_names,dest_rent = svm.dest.next)
View(dest_result)
View(cbind(mall_name=dest_mall_names,dest_rent = svm.dest.next,test_rent = svm.test.next[(1:length(svm.dest.next))%%2==1]))
length(svm.test.next)
View(MSE.svm.MALLS)
View(dest_result)
destmatrix.gbm<-predict(rent.boost,dest_rent,n.trees = 100000)
dest_result = cbind(mall_name=dest_mall_names,dest_rent = destmatrix.gbm)
View(dest_result)
test_rent = rest_rent[,.SD[.N,],by = "mall_name"]
test_rent = test_rent[,!(names(test_rent)%in%c("mall_name","date_id")),with = FALSE]
test_rent = data.frame(test_rent)
predmatrix<-predict(rent.boost,test_rent,n.trees = n.trees)
test.error<-with(test_rent,apply((predmatrix-rent)^2,2,mean))
head(test.error) #contains the Mean squared test error for each of the 100 trees averaged
compare.result.gbm = cbind(mall_name = test_mall_names,real_rent = test_rent$rent,pred_rent = predmatrix[,1000])
compare.result.gbm = data.table(compare.result.gbm)
compare.result.gbm[,c("real_rent","pred_rent"):=.(as.numeric(real_rent),as.numeric(pred_rent))]
compare.result.gbm[,diff:=(real_rent-pred_rent)]
MSE.gbm.MALLS = compare.result.gbm[,.(pred_rent=sum(pred_rent),real_rent=sum(real_rent),gbm_err = abs(sum(diff)),perc = sum(diff)/sum(real_rent)),by = "mall_name"]
MSE.gbm = test.error[1000]
View(MSE.svm.MALLS)
View(MSE.gbm.MALLS)
View(dest_result)
test_mall_names
nrow(test_rent)
test_rent = rest_rent[,.SD[.N,],by = "mall_name"]
test_mall_names = test_rent$mall_name
dest_mall_names = dest_rent$mall_name
test_rent = test_rent[,!(names(test_rent)%in%c("mall_name","date_id")),with = FALSE]
dest_rent = dest_rent[,!(names(dest_rent)%in%c("mall_name","date_id")),with = FALSE]
test_rent = data.frame(test_rent)
dest_rent = data.frame(dest_rent)
predmatrix<-predict(rent.boost,test_rent,n.trees = n.trees)
test.error<-with(test_rent,apply((predmatrix-rent)^2,2,mean))
head(test.error) #contains the Mean squared test error for each of the 100 trees averaged
compare.result.gbm = cbind(mall_name = test_mall_names,real_rent = test_rent$rent,pred_rent = predmatrix[,1000])
test_mall_names
test_rent$rent
pred_rent = predmatrix[,1000]
predmatrix[,1000]
compare.result.gbm = data.table(compare.result.gbm)
compare.result.gbm[,c("real_rent","pred_rent"):=.(as.numeric(real_rent),as.numeric(pred_rent))]
compare.result.gbm[,diff:=(real_rent-pred_rent)]
MSE.gbm.MALLS = compare.result.gbm[,.(pred_rent=sum(pred_rent),real_rent=sum(real_rent),gbm_err = abs(sum(diff)),perc = sum(diff)/sum(real_rent)),by = "mall_name"]
MSE.gbm = test.error[1000]
View(MSE.gbm.MALLS)
write.xlsx(MSE.gbm.MALLS,"~/data/rent_data/verify_predict_2017")
write.xlsx(dest_rent,"~/data/rent_data/rent_pred_2018_by_gbm.xlsx")
write.xlsx(MSE.gbm.MALLS,"~/data/rent_data/verify_predict_2017.xlsx")
View(train_rent)
View(dest)
View(dest_rent)
test_mall_names
dest_mall_names
dest_mall_names
View(train_rent)
View(dest_result)
write.xlsx(dest_result,"~/data/rent_data/rent_pred_2018_by_gbm.xlsx")
df <- data.frame(act = rep(LETTERS[1:2], each=10), pred = rep(sample(LETTERS[1:2], 20, replace=T)))
tab
rep(LETTERS[1:2], each=10)
tab <- table(df)
tab
caret::confusionMatrix(tab)
# A balanced dataset
tab[1,1] <- 45
tab[1,2] <- 5
tab[2,1] <- 5
tab[2,2] <- 45
caret::confusionMatrix(tab)
# An unbalanced datasest
tab[1,1] <- 85
tab[1,2] <- 5
tab[2,1] <- 5
tab[2,2] <- 5
caret::confusionMatrix(tab)
?resamples
library(caret)
caret::confusionMatrix(tab)
temp = caret::confusionMatrix(tab)
str(temp)
temp$overall
View(result_dt5)
View(big_general_info_original)
View(total6)
View(total5)
View(total4)
View(total2)
View(total3_copy)
View(train_set)
View(result_dt5)
View(big_general_info_original)
?extract_tables
library(tabulizer)
?extract_tables
View(shanghai1)
test = read.table(textConnection("52530 48695 46667 咭6与肠 46116 44641 440的 43143 42757 41941 41902 41564 415伪 40154 40118 40012 39601 38529 3日弓肠 37193 37159 36915 35630 34074 34064 339的 32178 32070 30941 30此5 30296 30084 30045 29742 29462 28633 28259 28061 27608 26757 26745 25484 24759 24685 2吸唯63 2咭咯27 23821 23623 23194 22784 22762 22603 22348 22173 22142 21854 21602 21291 21230 21073 20905 20713 20644 20580 19978 195 13 18957 18859 18403 18061 17987 17937 17934 17654 17467 16607 16518 16077 15661"),header = F, sep = " ", stringsAsFactors = F)
View(test)
readChar(textConnection("52530 48695 46667 咭6与肠 46116 44641 440的 43143 42757 41941 41902 41564 415伪 40154 40118 40012 39601 38529 3日弓肠 37193 37159 36915 35630 34074 34064 339的 32178 32070 30941 30此5 30296 30084 30045 29742 29462 28633 28259 28061 27608 26757 26745 25484 24759 24685 2吸唯63 2咭咯27 23821 23623 23194 22784 22762 22603 22348 22173 22142 21854 21602 21291 21230 21073 20905 20713 20644 20580 19978 195 13 18957 18859 18403 18061 17987 17937 17934 17654 17467 16607 16518 16077 15661"))
scan(textConnection("52530 48695 46667 咭6与肠 46116 44641 440的 43143 42757 41941 41902 41564 415伪 40154 40118 40012 39601 38529 3日弓肠 37193 37159 36915 35630 34074 34064 339的 32178 32070 30941 30此5 30296 30084 30045 29742 29462 28633 28259 28061 27608 26757 26745 25484 24759 24685 2吸唯63 2咭咯27 23821 23623 23194 22784 22762 22603 22348 22173 22142 21854 21602 21291 21230 21073 20905 20713 20644 20580 19978 195 13 18957 18859 18403 18061 17987 17937 17934 17654 17467 16607 16518 16077 15661"), what="character", sep=" ")
readChar(textConnection("52530 48695 46667 咭6与肠 46116 44641 440的 43143 42757 41941 41902 41564 415伪 40154 40118 40012 39601 38529 3日弓肠 37193 37159 36915 35630 34074 34064 339的 32178 32070 30941 30此5 30296 30084 30045 29742 29462 28633 28259 28061 27608 26757 26745 25484 24759 24685 2吸唯63 2咭咯27 23821 23623 23194 22784 22762 22603 22348 22173 22142 21854 21602 21291 21230 21073 20905 20713 20644 20580 19978 195 13 18957 18859 18403 18061 17987 17937 17934 17654 17467 16607 16518 16077 15661"),length("52530 48695 46667 咭6与肠 46116 44641 440的 43143 42757 41941 41902 41564 415伪 40154 40118 40012 39601 38529 3日弓肠 37193 37159 36915 35630 34074 34064 339的 32178 32070 30941 30此5 30296 30084 30045 29742 29462 28633 28259 28061 27608 26757 26745 25484 24759 24685 2吸唯63 2咭咯27 23821 23623 23194 22784 22762 22603 22348 22173 22142 21854 21602 21291 21230 21073 20905 20713 20644 20580 19978 195 13 18957 18859 18403 18061 17987 17937 17934 17654 17467 16607 16518 16077 15661"))

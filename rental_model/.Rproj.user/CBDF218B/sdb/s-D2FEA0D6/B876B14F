{
    "collab_server" : "",
    "contents" : "new_general_info_2015 = new_general_info[new_general_info$year == 2015,]\nnew_general_info_2016 = new_general_info[new_general_info$year == 2016,]\nnew_general_info_2017 = new_general_info[new_general_info$year == 2017,]\ntrain_next = merge(new_general_info_2015,new_general_info_2016[,c(1,4)],by = \"mall_name\",all.x = TRUE)\ntest_next = merge(new_general_info_2016,new_general_info_2017[,c(1,4)],by = \"mall_name\",all.x = TRUE)\ntrain_next = train_next[,c(-1,-24)]\ntest_next = test_next[,c(-1,-24)]\nnames(train_next)[24] = \"rent\"\nnames(test_next)[24] = \"rent\"\nsetwd(\"~/R_Projects/SVM\")\nsource(\"./Rfile/test_svm.R\")\ntry_para = svm_para_percent(train_next,test_next)\nsvm.model.next = svm(rent~.,data = train_next,cost = 10,gamma = 0.015625,cross = 5)\nsvm.test.next = predict(svm.model.next,test_next[,-24])\ncompare.result = cbind(mall_name = new_general_info_2016$mall_name,real_rent = test_next[,\"rent\"],svm.test.next)\nMSE.svm = sum((svm.test.next - test_next[,24])^2)/length(svm.test.next)\n\nsource(\"~/R_Projects/neuralNetwork/Rfile/nn_para.R\")\nneuralnet_para_m = neuralnet_para(train_next,test_next)\nn <- names(train_next)\nf <- as.formula(paste(\"rent ~\", paste(n[!n %in% \"rent\"], collapse = \" + \")))\nmaxs <- apply(train_next, 2, max)\nmins <- apply(train_next, 2, min)\ntrain.scaled = as.data.frame(scale(train_next, center = mins, scale = maxs - mins))\ntest.scaled = as.data.frame(scale(test_next,center = mins,scale = maxs - mins))\nmax_rent = maxs[\"rent\"]\nmin_rent = mins[\"rent\"]\nnn <- neuralnet(f,data=train.scaled,hidden = rep(9,3),act.fct = 'logistic') \nrentind = which(names(test.scaled) %in% c(\"rent\"))\npr.nn <- compute(nn,test.scaled[,-rentind])\npr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent\ntest.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent\nMSE.nn <- sum((test.r - pr.nn_)^2)/length(test.r)\ncompare.result2 = cbind(pr.nn_,test.r)\n\n\n\n#new data,new method 2017/11\nlibrary(caret)\n# prepare training scheme\ncontrol <- trainControl(method=\"repeatedcv\", number=10, repeats=3)\n# train the model\nmodel <- train(rent~., data=train_rent, method=\"rf\", preProcess=\"scale\", trControl=control,\n               importance = T)\n# estimate variable importance\nimportance <- varImp(model, scale=FALSE)\nprint(importance)\nplot(importance)\n\n# load libraries\nlibrary(mlbench)\nlibrary(caret)\n\n# load data\ndata(PimaIndiansDiabetes)\ndataset <- PimaIndiansDiabetes\n\nrequire(gbm)\n# rent.boost = gbm(rent ~ . ,data = train_next,distribution = \"gaussian\",n.trees = 10000,nTrain = 100,bag.fraction = 0.8,n.minobsinnode = 10)\nsource('~/R_Projects/ensemble_method/Rfile/boosting_para.R')\ngbm_para_m = boosting_para(train_rent,test_rent) #takes a lot time\nptm = proc.time()\nrent.boost = gbm(rent ~ . ,data = train_rent,distribution = \"gaussian\",n.trees = 100000,interaction.depth = 4)\nptm = proc.time() - ptm\nrent.boost\npara_rank1 = summary(rent.boost) #Summary gives a table of Variable Importance and a plot of Variable Importance\nn.trees = seq(from=100 ,to=100000, by=100) #num of trees-a vector of 100 values \n\n#Generating a Prediction matrix for each Tree\npredmatrix<-predict(rent.boost,test_rent,n.trees = n.trees)\n\n#Calculating The Mean squared Test Error\ntest.error<-with(test_rent,apply((predmatrix-rent)^2,2,mean))\nhead(test.error) #contains the Mean squared test error for each of the 100 trees averaged\ncompare.result.gbm = cbind(mall_name = test_mall_names,real_rent = test_rent$rent,pred_rent = predmatrix[,1000])\ncompare.result.gbm = data.table(compare.result.gbm)\ncompare.result.gbm[,c(\"real_rent\",\"pred_rent\"):=.(as.numeric(real_rent),as.numeric(pred_rent))]\ncompare.result.gbm[,diff:=(real_rent-pred_rent)]\nMSE.gbm.MALLS = compare.result.gbm[,.(pred_rent=sum(pred_rent),real_rent=sum(real_rent),gbm_err = abs(sum(diff)),perc = sum(diff)/sum(real_rent)),by = \"mall_name\"]\nMSE.gbm = test.error[1000]\n#Plotting the test error vs number of trees\nplot(n.trees , test.error , pch=19,col=\"blue\",xlab=\"Number of Trees\",ylab=\"Test Error\", main = \"Perfomance of Boosting on Test Set\")\n\ndestmatrix.gbm<-predict(rent.boost,dest_rent,n.trees = 100000)\ndest_result = cbind(mall_name=dest_mall_names,dest_rent = destmatrix.gbm)\n\nsource(\"~/R_Projects/SVM/Rfile/test_svm.R\")\ntry_para = svm_para_percent(train_rent,test_rent)\n# svm.model.next = svm(rent~.,data = train_rent,cost = 10,gamma = 0.00391,cross = 5)\nsvm.model.next = svm(rent~.,data = train_rent,cost = 10,gamma = 7.81250e-03,cross = 5)\nrentind = names(test_rent) == \"rent\"\nsvm.test.next = predict(svm.model.next,test_rent[,!rentind])\ncompare.result.svm = cbind(mall_name = test_mall_names,real_rent = test_rent$rent,pred_rent = svm.test.next)\ncompare.result.svm = data.table(compare.result.svm)\ncompare.result.svm[,c(\"real_rent\",\"pred_rent\"):=.(as.numeric(real_rent),as.numeric(pred_rent))]\ncompare.result.svm[,diff:=(real_rent-pred_rent)]\n# MSE.svm.MALLS = compare.result.svm[,.(svm_err = sqrt(sum(diff^2)/3)),by = \"mall_name\"]\nMSE.svm.MALLS = compare.result.svm[,.(pred_rent=sum(pred_rent),real_rent=sum(real_rent),svm_err = abs(sum(diff)),perc = sum(diff)/sum(real_rent)),by = \"mall_name\"]\nMSE.svm = sum((svm.test.next - test_rent[,rentind])^2)/length(svm.test.next)\n\nsvm.dest.next = predict(svm.model.next,dest_rent[,!rentind])\ndest_result = cbind(mall_name=dest_mall_names,dest_rent = svm.dest.next,test_rent = svm.test.next[(1:length(svm.dest.next))%%2==1])\n\nsource(\"~/R_Projects/neuralNetwork/Rfile/nn_para.R\")\nneuralnet_para_m = neuralnet_para(train_rent,test_rent)\nn <- names(train_rent)\nf <- as.formula(paste(\"rent ~\", paste(n[!n %in% \"rent\"], collapse = \" + \")))\nmaxs <- apply(train_rent, 2, max)\nmins <- apply(train_rent, 2, min)\ntrain.scaled = as.data.frame(scale(train_rent, center = mins, scale = maxs - mins))\ntest.scaled = as.data.frame(scale(test_rent,center = mins,scale = maxs - mins))\nmax_rent = maxs[\"rent\"]\nmin_rent = mins[\"rent\"]\nnn <- neuralnet(f,data=train.scaled,hidden = rep(6,7),act.fct = 'logistic') \nrentind = which(names(test.scaled) %in% c(\"rent\"))\npr.nn <- compute(nn,test.scaled[,-rentind])\npr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent\npr.nn_ = pr.nn_[,1]\ntest.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent\nMSE.nn <- sum((test.r - pr.nn_)^2)/length(test.r)\n# compare.result.nn = cbind(pr.nn_,test.r)\ncompare.result.nn = cbind(mall_name = test_mall_names,real_rent = test_rent$rent,pred_rent = pr.nn_)\ncompare.result.nn = data.table(compare.result.nn)\ncompare.result.nn[,c(\"real_rent\",\"pred_rent\"):=.(as.numeric(real_rent),as.numeric(pred_rent))]\ncompare.result.nn[,diff:=(real_rent-pred_rent)]\n# MSE.nn.MALLS = compare.result.nn[,.(svm_err = sqrt(sum(diff^2)/3)),by = \"mall_name\"]\nMSE.nn.MALLS = compare.result.nn[,.(pred_rent=sum(pred_rent),real_rent=sum(real_rent),nn_err = abs(sum(diff)),perc = sum(diff)/sum(real_rent)),by = \"mall_name\"]\n\nlibrary(randomForest)\nrf <- randomForest(rent ~ ., data=train_rent, ntree=10000, proximity=TRUE)\nrentind = which(names(test_rent) %in% c(\"rent\"))\nrf.test.next= predict(rf,test_rent[-rentind])\ncompare.result.rf = cbind(mall_name = test_mall_names,real_rent = test_rent$rent,pred_rent = rf.test.next)\ncompare.result.rf = data.table(compare.result.rf)\ncompare.result.rf[,c(\"real_rent\",\"pred_rent\"):=.(as.numeric(real_rent),as.numeric(pred_rent))]\ncompare.result.rf[,diff:=(real_rent-pred_rent)]\nMSE.rf.MALLS = compare.result.rf[,.(pred_rent=sum(pred_rent),real_rent=sum(real_rent),rf_err = abs(sum(diff)),perc = sum(diff)/sum(real_rent)),by = \"mall_name\"]\n# MSE.rf.MALLS = compare.result.rf[,.(svm_err = sqrt(sum(diff^2)/3)),by = \"mall_name\"]\nMSE.rf <- sum((test_rent$rent - rf.test.next)^2)/length(test_rent$rent)\n\n\nMSE.all.MALLS = cbind(MSE.rf.MALLS,nn_perc = MSE.nn.MALLS$perc,svm_perc = MSE.svm.MALLS$perc,gbm_perc = MSE.svm.MALLS$perc)\n\n\n#get the rent from specified city beijing\ntrain_beijing = train_rent[train_rent$city==1,]\ntest_beijing = test_rent[test_rent$city==1,]\ntest_beijing_df = test_df[test_df$city==1,]\nrentind = which(names(test_rent) %in% c(\"rent\"))\ntrain_beijing_svm = train_beijing[,!(names(train_beijing)%in%c(\"position\",\"city\"))]\ntest_beijing_svm = test_beijing[,!(names(test_beijing)%in%c(\"position\",\"city\"))]\n\n\nsetwd(\"~/R_Projects/SVM\")\nsource(\"./Rfile/test_svm.R\")\ntry_para_beijing = svm_para_percent(train_beijing_svm,test_beijing_svm)\nsvm.model.beijing = svm(rent~.,data = train_beijing_svm,cost = 10,gamma = 0.00391,cross = 5,kernel = \"polynomial\")\nsvm.test.beijing = predict(svm.model.beijing,test_beijing_svm[,-rentind])\ncompare.beijing.svm = cbind(mall_name = test_beijing_df[,\"MALL_NAME\"],real_rent = test_beijing$rent,pred_rent = svm.test.beijing)\ncompare.beijing.svm = data.table(compare.beijing.svm)\ncompare.beijing.svm[,c(\"real_rent\",\"pred_rent\"):=.(as.numeric(real_rent),as.numeric(pred_rent))]\ncompare.beijing.svm[,diff:=abs(real_rent-pred_rent)]\n# MSE.svm.MALLS = compare.result.svm[,.(svm_err = sqrt(sum(diff^2)/3)),by = \"mall_name\"]\nMSE.svm.beijing.MALLS = compare.beijing.svm[,.(svm_err = sum(diff),real_rent=sum(real_rent),perc = sum(diff)/sum(real_rent)),by = \"mall_name\"]\n\n\nrequire(gbm)\nsource(\"~/R_Projects/ensemble_method/Rfile/boosting_para.R\")\ngbm_para_beijing = boosting_para(train_beijing_svm,test_beijing_svm)\nrent.boost.beijing = gbm(rent ~ . ,data = train_beijing_svm,distribution = \"gaussian\",n.trees = 100000,interaction.depth = 5,shrinkage = 0.01)\nn.trees = 100000\npredmatrix<-predict(rent.boost.beijing,test_beijing_svm,n.trees = n.trees)\ntest.error=mean((predmatrix-test_beijing$rent)^2)\ncompare.beijing.gbm = cbind(mall_name = test_beijing_df[,\"MALL_NAME\"],real_rent = test_beijing$rent,pred_rent = predmatrix)\ncompare.beijing.gbm = data.table(compare.beijing.gbm)\ncompare.beijing.gbm[,c(\"real_rent\",\"pred_rent\"):=.(as.numeric(real_rent),as.numeric(pred_rent))]\ncompare.beijing.gbm[,diff:=abs(real_rent-pred_rent)]\nMSE.gbm.beijing.MALLS = compare.beijing.gbm[,.(gbm_err = sum(diff),pred_rent=sum(pred_rent),real_rent=sum(real_rent),perc = sum(diff)/sum(real_rent)),by = \"mall_name\"]\n\n\nlibrary(randomForest)\nrf.beijing <- randomForest(rent ~ ., data=train_beijing, ntree=10000, proximity=TRUE)\nrf.beijing.next= predict(rf.beijing,test_beijing[,-rentind])\ncompare.beijing.rf = cbind(mall_name = test_beijing_df[,\"MALL_NAME\"],real_rent = test_beijing$rent,pred_rent = rf.beijing.next)\ncompare.beijing.rf = data.table(compare.beijing.rf)\ncompare.beijing.rf[,c(\"real_rent\",\"pred_rent\"):=.(as.numeric(real_rent),as.numeric(pred_rent))]\ncompare.beijing.rf[,diff:=abs(real_rent-pred_rent)]\nMSE.rf.beijing.MALLS = compare.beijing.rf[,.(rf_err = sum(diff),real_rent=sum(real_rent),perc = sum(diff)/sum(real_rent)),by = \"mall_name\"]\n\n\nsource(\"~/R_Projects/neuralNetwork/Rfile/nn_para.R\")\nneuralnet_para_beijing = neuralnet_para(train_beijing_svm,test_beijing_svm)\nn <- names(train_beijing_svm)\nf <- as.formula(paste(\"rent ~\", paste(n[!n %in% \"rent\"], collapse = \" + \")))\nmaxs <- apply(train_beijing_svm, 2, max)\nmins <- apply(train_beijing_svm, 2, min)\ntrain.scaled = as.data.frame(scale(train_beijing_svm, center = mins, scale = maxs - mins))\ntest.scaled = as.data.frame(scale(test_beijing_svm,center = mins,scale = maxs - mins))\nmax_rent = maxs[\"rent\"]\nmin_rent = mins[\"rent\"]\nnn.beijing <- neuralnet(f,data=train.scaled,hidden = rep(18,8),act.fct = 'logistic') \npr.nn.beijing <- compute(nn.beijing,test.scaled[,-rentind])\npr.nn.beijing <- pr.nn.beijing$net.result*(max_rent-min_rent)+min_rent\npr.nn.beijing = pr.nn.beijing[,1]\ntest.rent.beijing <- (test.scaled$rent)*(max_rent-min_rent)+min_rent\nMSE.nn.beijing <- sum((test.rent.beijing - pr.nn.beijing)^2)/length(test.rent.beijing)\ncompare.beijing.nn = cbind(mall_name = test_beijing_df[,\"MALL_NAME\"],real_rent = test_beijing_svm$rent,pred_rent = pr.nn.beijing)\ncompare.beijing.nn = data.table(compare.beijing.nn)\ncompare.beijing.nn[,c(\"real_rent\",\"pred_rent\"):=.(as.numeric(real_rent),as.numeric(pred_rent))]\ncompare.beijing.nn[,diff:=abs(real_rent-pred_rent)]\nMSE.nn.beijing.MALLS = compare.beijing.nn[,.(nn_err = sum(diff),real_rent=sum(real_rent),perc = sum(diff)/sum(real_rent)),by = \"mall_name\"]\n",
    "created" : 1511947793866.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4238282397",
    "id" : "B876B14F",
    "lastKnownWriteTime" : 1526437790,
    "last_content_update" : 1526437790415,
    "path" : "~/R_Projects/rental_model/Rfile/rent_svm_nn_next.R",
    "project_path" : "Rfile/rent_svm_nn_next.R",
    "properties" : {
    },
    "relative_order" : 14,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
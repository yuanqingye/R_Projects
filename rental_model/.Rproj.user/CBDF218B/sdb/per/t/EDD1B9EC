{
    "collab_server" : "",
    "contents" : "library(data.table)\nlibrary(e1071)\nlibrary(plyr)\nsvm_para = function(trainset,testset){\n  min = Inf\n  v = vector(mode = 'numeric',length = 0)\n  c = vector(mode = 'character',length = 0)\n  dt = data.table(sigma = v,C = v,e = v,kernel = c)\n  rentind = which(names(trainset)==\"rent\")\n  for(index in -5:10){\n    sigma = 0.125 * 2^index\n    for(i in -1:4){\n      C = 1 * 10^i\n      for(kernel in c('polynomial','radial','sigmoid')){\n      svm.model = svm(rent~.,data = trainset,gamma = sigma,cost = C,kernel = kernel)\n      svm.pred = predict(svm.model,testset[,-rentind])\n      e = crossprod(svm.pred - unlist(testset[,rentind]))/nrow(testset)\n      temp.dt = data.table(sigma = sigma,C = C,e = e[1,1],kernel = kernel)\n      dt = rbind(dt,temp.dt)\n      if(e[1,1]<min){\n        bestsigma = sigma\n        bestC = C\n        bestKernal = kernel\n        min = e[1,1]\n        }\n      }\n    }\n  }\n  min.dt = data.table(sigma = bestsigma,C = bestC,e = min,kernel = bestKernal)\n  dt = rbind(dt,min.dt)\n  return(dt)\n} \n\nsvm_para_class = function(trainset,testset,keycolname,f,type){\n  test_formula = as.formula(paste0(keycolname,\"~.\"))\n  max = -Inf\n  v = vector(mode = 'numeric',length = 0)\n  c = vector(mode = 'character',length = 0)\n  dt = data.table(sigma = v,C = v,accuracy = v,kernel = c)\n  # keyind = which(names(trainset)==keycolname)\n  indexes = c(-5,3,10)\n  k = length(indexes)\n  pbar <- create_progress_bar('text')\n  pbar$init(k)\n  for(index in c(-5,3,10)){\n    sigma = 0.125 * 2^index\n    for(i in -1:4){\n      C = 1 * 10^i\n      for(kernel in c('radial','sigmoid')){\n        svm.model = svm(test_formula,data = trainset,gamma = sigma,cost = C,kernel = kernel)\n        svm.pred = predict(svm.model,testset[,!(names(testset) %in% keycolname)])\n        r = f(testset[,keycolname],svm.pred,type)\n        temp.dt = data.table(sigma = sigma,C = C,accuracy = r,kernel = kernel)\n        dt = rbind(dt,temp.dt)\n        if(r>max){\n          bestsigma = sigma\n          bestC = C\n          bestKernal = kernel\n          max = r\n        }\n      }\n    }\n    pbar$step()\n  }\n  max.dt = data.table(sigma = bestsigma,C = bestC,accuracy = max,kernel = bestKernal)\n  dt = rbind(dt,max.dt)\n  return(dt)\n} \n\n\nsvm_para_percent = function(trainset,testset){\n  minavge = Inf\n  mine2 = Inf\n  minmax = Inf\n  v = vector(mode = 'numeric',length = 0)\n  c = vector(mode = 'character',length = 0)\n  dt = data.table(sigma = v,C = v,e = v,kernel = c,avge = v,maxe = v,sde = v)\n  rentind = which(names(trainset)==\"rent\")\n  for(index in -5:10){\n    sigma = 0.125 * 2^index\n    for(i in -1:4){\n      C = 1 * 10^i\n      for(kernel in c('polynomial','radial','sigmoid')){\n        svm.model = svm(rent~.,data = trainset,gamma = sigma,cost = C,kernel = kernel)\n        svm.pred = predict(svm.model,testset[,-rentind])\n        e = (svm.pred - unlist(testset[,rentind]))/unlist(testset[,rentind])\n        crosse = (crossprod(svm.pred - unlist(testset[,rentind]))/nrow(testset))[1,1]\n        avge = sum(abs(e))/nrow(testset)\n        maxe = max(e)\n        sde = sd(e)\n        temp.dt = data.table(sigma = sigma,C = C,e = crosse,kernel = kernel,avge = avge,maxe = maxe,sde = sde)\n        dt = rbind(dt,temp.dt)\n        if(abs(avge)<abs(minavge)){\n          bestsigma = sigma\n          bestC = C\n          bestKernal = kernel\n          pickedmax = maxe\n          pickedsd = sde\n          mine = crosse\n          minavge = avge\n        }\n        if(crosse<mine2){\n          bestsigma2 = sigma\n          bestC2 = C\n          bestKernal2 = kernel\n          pickedmax2 = maxe\n          pickedsd2 = sde\n          mine2 = crosse\n          minavge2 = avge\n        }\n        if(maxe<minmax){\n          bestsigmamax = sigma\n          bestCmax = C\n          bestKernalmax = kernel\n          minmax = maxe\n          pickedsdmax = sde\n          minemax = crosse\n          minavgemax = avge\n        }\n        \n      }\n    }\n  }\n  min.dt = data.table(sigma = bestsigma,C = bestC,e = mine,kernel = bestKernal,avge = minavge,maxe = pickedmax,sde = pickedsd)\n  min.cross.dt = data.table(sigma = bestsigma2,C = bestC2,e = mine2,kernel = bestKernal2,avge = minavge2,maxe = pickedmax2,sde = pickedsd2)\n  min.max.dt = data.table(sigma = bestsigmamax,C = bestCmax,e = minemax,kernel = bestKernalmax,avge = minavgemax,maxe = minmax,sde = pickedsdmax)\n  dt = rbind(dt,min.dt,min.cross.dt,min.max.dt)\n  return(dt)\n} ",
    "created" : 1505822434905.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "853540046",
    "id" : "EDD1B9EC",
    "lastKnownWriteTime" : 1516611655,
    "last_content_update" : 1516868553416,
    "path" : "~/R_Projects/SVM/Rfile/test_svm.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 12,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
{
    "collab_server" : "",
    "contents" : "library(tabulizer)\nlibrary(tesseract)\nlibrary(readxl)\nlibrary(stringr)\nlibrary(data.table)\nsynt = c('′','、','`')\nmalls = extract_tables(\"C://Users/qingye.yuan/Downloads/mall.pdf\",encoding = \"UTF-8\")\n#租金大多是16年的\n#杭州古镇无表示没有\ndata_process = function(url = \"C://Users/qingye.yuan/Downloads/mall.pdf\"){\n  out = list()\n  result = list()\n  for(i in 1:19){\n    out[[i]] = extract_tables(url,encoding = \"UTF-8\",pages = i)\n  }\n  for(j in 9:15){\n    temp_out = out[[j]][[1]]\n    temp_out1 = temp_out[1,-1]\n    temp_out2 = temp_out[2,-1]\n    temp_out3 = temp_out[c(-1,-2),c(-ncol(temp_out))]\n    matrix_out = rbind(temp_out1,temp_out2,temp_out3)\n    matrix_out = t(matrix_out)\n    colnames(matrix_out) = matrix_out[1,]\n    matrix_out = matrix_out[-1,]\n    result[[j-8]] = matrix_out\n  }\n  fresult = do.call(rbind,result)\n  fresult = fresult[c(-20,-24,-28),]\n  mall = c(rep(\"苏州园区\",4),rep(\"杭州古墩\",4),rep(\"南京卡子门\",4),rep(\"重庆江北\",4),rep(\"天津河西\",3),rep(\"天津红桥\",3),rep(\"深圳香蜜湖\",3))\n  fresult = cbind(fresult,\"mall\" = mall)\n  changsha = t(out[[16]][[1]])\n  beijing_xisi_origin = out[[8]][[1]]\n  beijing_xisi = rbind(beijing_xisi_origin[,c(1,2)],beijing_xisi_origin[,c(3,4)])\n  beijing_xisi_new = beijing_xisi\n  beijing_xisi_new[!grepl('[^@]+',beijing_xisi_new)] = NA\n  line = beijing_xisi_new[1,1]\n  beijing_xisi_new = beijing_xisi_new[complete.cases(beijing_xisi_new),]\n  words = unlist(strsplit(line,'于'))\n  beijing_xisi_new = rbind(beijing_xisi_new,c('name',words[1]))\n  beijing_xisi_new = rbind(beijing_xisi_new,c('年份',substr(words[2],1,9)))\n  beijing_north5 = out[[5]][[1]]\n  beijing_north5[2:5,c(1,2,3,4)] = beijing_north5[2:5,c(2,3,4,1)]\n  beijing_north5 = rbind(beijing_north5[,c(1,2)],beijing_north5[,c(3,4)])\n  beijing_north5[!grepl('[^@]+',beijing_north5)] = NA\n  beijing_north5 = beijing_north5[complete.cases(beijing_north5),]\n  rm(beijing_xisi)\n  rm(beijing_xisi_origin)\n  shanghai1 = extract_tables(url,encoding = \"UTF-8\",pages = 2,area = list(c(0,0,125,350)))\n  shanghai2 = extract_tables(url,encoding = \"UTF-8\",pages = 2,area = list(c(125,0,250,350)))\n  shanghai3 = extract_tables(url,encoding = \"UTF-8\",pages = 2,area = list(c(225,0,320,350)))\n  shanghai4 = extract_areas(url,encoding = \"UTF-8\",pages = 2)\n  shanghai5 = extract_tables(url,encoding = \"UTF-8\",pages = 2,area = list(c(0,370,180,700)))\n  shanghai6 = extract_tables(url,encoding = \"UTF-8\",pages = 2,area = list(c(170,370,270,700)))  \n  shanghai7 = extract_tables(url,encoding = \"UTF-8\",pages = 2,area = list(c(270,370,450,700)))\n  }\n  chinese = tesseract(\"chi_sim\")\n  beijing_north4 = ocr(\"C://Users/qingye.yuan/Desktop/工作需要/租金定价/北京北四.png\",engine = chinese)\n  beijing_north4 = gsub('′','',beijing_north4)\n  beijing_north4 = gsub('、','',beijing_north4)\n  beijing_north4 = gsub('`','',beijing_north4)\n  beijing_north4_parts = unlist(strsplit(beijing_north4,split = '\\\\n\\\\n'))\n  beijing_north4_parts = gsub('竟争椿屠  ','',beijing_north4_parts)\n  beijing_north4_parts = gsub('竟争椿屠 ','',beijing_north4_parts)\n  cat(beijing_north4_parts[1],file = 'test_table_1')\n  cat(beijing_north4_parts[2],file = 'test_table_2')\n  beijing_north4_1 = read.table(file = \"test_table_1\",header = T,stringsAsFactors = F)\n  beijing_north4_2 = read.table(file = \"test_table_2\",header = T,stringsAsFactors = F)\n  \n  beijing_east4 = read_xlsx(\"C://Users/qingye.yuan/Desktop/工作需要/租金定价/数据挖掘.xlsx\",sheet = \"Sheet2\")\n  fresult_copy = fresult\n  fresult[,\"area\"] = gsub('([\\\\s]*m2|方)','',fresult[,\"area\"],perl = TRUE)\n  temp = result[,\"area\"]\n  str_extract(temp,'.+(?=万)')\n  rep = as.numeric(str_extract(temp,'.+(?=万)'))*10000\n  result[,\"area\"] = str_replace(temp,'.+万',as.character(rep))\n  temp1 = fresult[,\"rent\"]\n  rep1 = str_extract(temp1,'.+(?=万)')\n  rep1 = as.character(10000*as.numeric(rep1))\n  rep1 = str_replace(temp1,\".+万\",rep1)\n  rep2 = str_replace(rep1,'亿','')\n  rep2 = grep('-',rep2,value = T)\n  rep2 = str_split(rep2,'-')\n  rep2 = lapply(rep2,as.numeric)\n  rep2 = lapply(rep2,mean)\n  rep2 = as.character(unlist(rep2)*100000000)\n  rep2 = str_replace(rep1,'.+亿',rep2)\n  fresult[,'rent'] = rep2\n  temp = fresult[,\"2016sale\"]\n  rep = ifelse(grepl('亿',temp),as.numeric(str_extract(temp,'.+(?=亿)'))*100000000,\n               ifelse(grepl('万',temp),as.numeric(str_extract(temp,'.+(?=万)'))*10000,temp))\n  fresult[,\"2016sale\"] = rep\n  temp = fresult[,\"rent_rate\"]\n  rep = str_replace(temp,'%','')\n  rep = as.numeric(rep)/100\n  fresult[,\"rent_rate\"] = rep\n  assign(\"temp\",fresult[,'gain_loss_rate'])\n  temp = gsub('[\\u4e00-\\u9fa5]+','',temp)\n  temp = gsub('\\\\r','',temp)\n  temp = gsub(\"^:\",\"\",temp)\n  temp = gsub(\"%\",\"\",temp)\n  temp = gsub(\"/\",\"\",temp)\n  temp = gsub(\";\",\":\",temp)\n  fresult[,'gain_loss_rate'] = temp\n  fresult[5,c('willing_ranking','ranking')] = 1\n  fresult[7,c('willing_ranking','ranking')] = 2\n  fresult[c(20,21,22),c('willing_ranking','ranking')] = c(1,2,3,1,3,2)\n  temp = fresult[,c(\"furniture_perc\",\"constr_perc\")]\n  temp = gsub('%','',temp)\n  temp = gsub('无','',temp)\n  temp = gsub('(-|无)',NA,temp)\n  temp = gsub('^$',0,temp)\n  rep = temp\n  fresult[,c(\"furniture_perc\",\"constr_perc\")] = rep\n  fresult[17:19,c('willing_ranking','ranking')] = c(1.5,1.5,3,1.5,1.5,3)\n  fresult = data.table(fresult)\n  fresult[,city:=substring(mall_circle,1,2)]\n  fresult$ifredstar = ifelse(str_detect(fresult$mall_name,\"(红星|商场)\"),1,0)\n  colnames(changsha) = changsha[1,]\n  changsha = changsha[-1,]\n  changsha_origin = changsha\n  changsha = data.table(changsha)\n  colnames(changsha) = c(\"mall_name\",\"nearby_business_center\",\"area\",\"age\",\"type\",\n                         \"win_cate_furni\",\"win_cate_cons\",\"win_cate_soft\",\"pop_brand\",\n                         \"avg_rent\",\"contract_type\",\"contract_benifit\",\"avg_rent_after_benifit\",\n                         \"common_factor\",\"floors\")\n  changsha[,city:=\"长沙\"]\n  changsha_origin = changsha\n  changsha[,winning_category:=paste(win_cate_furni,win_cate_cons,win_cate_soft,sep =',')]\n  changsha = changsha[,winning_category:=gsub('(无,)+','',winning_category)]\n  changsha = changsha[,winning_category:=gsub('(,无)+','',winning_category)]\n  changsha$ifredstar = ifelse(str_detect(changsha$mall_name,\"红星\"),1,0)\n  beijing_north4_all = t(beijing_north4_all)\n  beijing_north4_all = data.table(beijing_north4_all)\n  beijing_north4_all$mall_name = c(\"\",\"红星门店\",\"北四坏居然之蒙\",\"大忡寺簧秉丽蒙\")\n  colnames(beijing_north4_all)[-ncol(beijing_north4_all)] = unlist(beijing_north4_all[1,-12])\n  setkey(beijing_north4_all,'mall_name')\n  beijing_north4_all = beijing_north4_all[!\"\"]\n  beijing_north4_all[,`2016sale`:=as.numeric(`2016sale`)*100000000]\n  setcolorder(beijing_north4_all,c(colnames(beijing_north4_all)[ncol(beijing_north4_all)],colnames(beijing_north4_all)[-ncol(beijing_north4_all)]))\n  beijing_north4_all$city = \"北京\"\n  beijing_north4_all$ifredstar = c(0,0,1)\n  beijing_north5_origin = beijing_north5\n  beijing_north5 = gsub('%','',beijing_north5)\n  beijing_north5 = t(beijing_north5)\n  colnames(beijing_north5) = unlist(beijing_north5[1,])\n  beijing_north5 = beijing_north5[-1,]\n  colnames(beijing_north5) = c(\"area\",\"range\",\"targeting\",\"own_status\",\"background\",\"avg_rent\",\n                               \"furniture_perc\",\"constr_perc\",\"pop_brand\",\"status_analysis\",\n                               \"gain_loss_rate\",\"furniture_perc2\",\"constr_perc2\")\n  beijing_north5$winning_category = \"卫浴,整体定制\"\n  beijing_north5$city = \"北京\"\n  beijing_north5[,c(\"range\",\"own_status\",\"background\",\"pop_brand\",\"status_analysis\",\n                    \"furniture_perc2\",\"constr_perc2\"):=NULL]\n  beijing_north5[,':='(furniture_perc = as.numeric(furniture_perc),constr_perc = as.numeric(constr_perc))]\n  beijing_north5[,':='(furniture_perc = furniture_perc/(furniture_perc+constr_perc)*100,constr_perc = constr_perc/(furniture_perc+constr_perc)*100)]\n  beijing_north5[,mall_name := \"集美家居北苑店\",]\n  setcolorder(beijing_north5,c(colnames(beijing_north5)[ncol(beijing_north5)],colnames(beijing_north5)[-ncol(beijing_north5)]))\n  beijing_north5$ifredstar = 0\n  beijing_east4_origin = beijing_east4\n  beijing_east4 = t(beijing_east4)\n  # library(png)\n  # img <- readPNG(\"~/Rimage/beijing_east5.png\")\n  # library(grid)\n  # grid.raster(img)\n  colname = beijing_east4[1,]\n  colnames(beijing_east4) = colname\n  beijing_east4 = beijing_east4[-1,]\n  mall_name = rownames(beijing_east4)\n  beijing_east4 = data.table(beijing_east4)\n  beijing_east4 = lapply(beijing_east4,as.numeric)\n  beijing_east4 = as.data.table(beijing_east4)\n  colnames(beijing_east4) = colname\n  beijing_east4_copy = beijing_east4\n  beijing_east4 = cbind(beijing_east4,mall_name)\n  beijing_east4$targetting = c(\"\",\"中低档\",\"高档\")\n  beijing_east4$gain_loss_rate = c(\"\",\"49:29:22\",\"46:27:27\")\n  beijing_east4$winning_category = c(\"\",\"沙发,板式\",\"建材,沙发,板式\")\n  beijing_east4$furniture_perc = c(NA,623,107)\n  beijing_east4$constr_perc = c(NA,397,273)\n  setcolorder(beijing_east4,c(\"mall_name\",colnames(beijing_east4)[!colnames(beijing_east4) %in% \"mall_name\"]))\n  beijing_east4$city = \"北京\"\n  colnames(beijing_east4)[1:4] = c(\"mall_name\",\"avg_rent\",\"rent_rate\",\"area\")\n  beijing_east4 = beijing_east4[,c(-5,-6)]\n  beijing_east4$ifredstar = c(1,0,0)\n  beijing_xisi_origin = beijing_xisi_new\n  beijing_xisi_new[1,] = c(\"可租面积\",100000)\n  beijing_xisi_new = beijing_xisi_new[c(1,3,6,9,11,12,13,14,15),]\n  beijing_xisi_new[,1] = c(\"area\",\"avg_rent\",\"winning_category\",\"targeting\",\"gain_loss_rate\",\"furniture_perc\",\"constr_perc\",\"mall_name\",\"age\")\n  beijing_xisi_new[,2] = c(100000,310,\"卫浴,软体\",\"中高端\",\"32:24:44\",160,280,\"居然之家丽泽店\",7)\n  beijing_xisi_new = t(beijing_xisi_new)\n  colnames(beijing_xisi_new) = beijing_xisi_new[1,]\n  beijing_xisi_new = data.table(beijing_xisi_new)\n  beijing_xisi_new = beijing_xisi_new[-1,]\n  beijing_xisi_new$city = \"北京\"\n  beijing_xisi_new$ifredstar = 0\n  shanghai_tables = paste0(\"shanghai\",1:7)\n  for(name in shanghai_tables){assign(name,\"[[\"(eval(as.name(name)),1))} #good!\n  shanghai1[6,] = c(\"定位\",\"高端/中高端\",\"中端\",\"中端/中高端\",\"中端/中高端\")\n  colname = c(\"mall_name\",\"area\",\"avg_rent\",\"rent_rate\",\"targeting\",\"winning_category\",\"ranking\")  \n  shanghai1 = shanghai1[,-1]\n  for(name in shanghai_tables){assign(name,t(\"[\"(eval(as.name(name)),,-1)))}\n  for(name in shanghai_tables){assign(name,data.table(eval(as.name(name))))}\n  shanghai = rbindlist(lapply(sapply(shanghai_tables,as.name),eval))\n  colnames(shanghai) = colname\n  shanghai$ifredstar = ifelse(str_detect(shanghai$mall_name,\"(欧丽洛雅|商场)\"),1,0)\n  library(plyr)\n  total = rbind.fill(shanghai,beijing_east4,beijing_north4_all,beijing_north5,beijing_xisi_new,fresult,changsha)\n  total_original = total\n  total = data.table(total)\n  total[1:24,'city'] = \"上海\"\n  total[nearby_business_center=='无',nearby_business_center:=NA]\n  total[,mall_circle := ifelse(!is.na(mall_circle),mall_circle,nearby_business_center)]\n  total_copy = total\n  colname = colnames(total)[19:29]\n  total[,eval(colname):=NULL]\n  total[26:27,'targeting'] = c(\"中低端\",\"高端\")\n  total[,targetting:=NULL]\n  total[,rent_rate:=str_replace(rent_rate,\"%\",\"\")]\n  total[,furniture_perc:=str_replace(furniture_perc,\"%\",\"\")]\n  total[,constr_perc:=str_replace(constr_perc,\"%\",\"\")]\n  actual_avg_rent = total_original[!is.na(total_original$avg_rent_after_benifit),\"avg_rent_after_benifit\"]\n  total[,age:=str_replace(age,'(\\\\d+)(?=年).+',\"\\\\1\")]\n  total[,age:=str_replace(age,'\\\\d+个月',as.character(2/12))]\n  total[,age:=as.numeric(age)+1]\n  total$year = 2016\n  setnames(total,\"2016sale\",\"sale\")\n  total[,area:=str_replace(area,'(\\\\d+)(?=万).+','\\\\1')]\n  total[,c(\"area\",\"avg_rent\",\"rent_rate\",\"furniture_perc\",\"constr_perc\",\"rent\",\"sale\",\"age\"):=.(as.numeric(area),as.numeric(avg_rent),as.numeric(rent_rate),as.numeric(furniture_perc),as.numeric(constr_perc),as.numeric(rent),as.numeric(sale),as.numeric(age))]\n  total[as.vector(city)=='长沙',area:=area*10000]\n  total[as.character(city)=='长沙','rent'] =  as.numeric(actual_avg_rent) * total[as.character(city)=='长沙',area]\n  total[,rent:=ifelse(!is.na(rent),rent,avg_rent*area+0.06)]\n  total[,rent_rate:=ifelse(rent_rate>1,rent_rate/100,rent_rate)]\n  changsha_rent_rate = c(0.9354,0.9327,NA,0.93,0.9590,0.9767,NA,NA,0.85)  \n  total[as.vector(city)==\"长沙\",\"rent_rate\"] = changsha_rent_rate\n  total[c(1,3,4,28,29,30,37:40),\"targeting\"] = c(\"中高端\",\"中端\",\"中端\",\"高端\",\"高端\",\"高端\",rep(\"中高端\",4))\n  total[as.vector(city)==\"长沙\",\"gain_loss_rate\"] = c(\"28:26.7:45.3\",\"20.8:25:54.2\",NA,\"30.4:34.4:35.2\",\"46.82:31.84:21.35\",\"28.57:31.05:40.47\",NA,NA,\"25.97:38.96:32.07\")\n  total[44,\"gain_loss_rate\"]= \"29.92:44.5:25.58\"\n  total[as.vector(city) == \"长沙\",\"furniture_perc\"] = c(61,64,NA,46,42,43,56,NA,38)\n  total[as.vector(city) == \"长沙\",\"constr_perc\"] = 100-c(61,64,NA,46,42,43,56,NA,38)\n  total[rent>area*avg_rent*3,c(\"rent\",\"sale\"):=.(rent/12,sale/12)]\n  total[49:51,c(\"ranking\",\"willing_ranking\"):=.(c(1.5,1.5,3),c(1.5,1.5,3))]\n  total[49:51,\"gain_loss_rate\"] = c(\"30:40:30\",\"30:40:30\",NA)\n  total[c(52,53),\"targeting\"] = \"中高端\"\n  total_backup = total\n  \n  #以下开始进行缺失值处理\n  total[] <- lapply(total, function(x) if(is.character(x)) as.factor(x) else x)  \n  total$gain_loss_rate = as.vector(total$gain_loss_rate)\n  total$mall_name = as.vector(total$mall_name)\n  total$targeting = as.vector(total$targeting)\n  total$targeting = as.factor(total$targeting)\n  # #考虑基础决策树插值 误差明显大于 随机森林 不使用\n  # library(party)\n  # targeting.model = ctree(targeting~.,data=total[!is.na(targeting),c(-1,-9)])\n  # targeting.pred = predict(targeting.model,total[is.na(targeting),])\n  # #check correct rate\n  # targeting.train.pred = predict(targeting.model,total[!is.na(targeting),])\n  # actual = total[!is.na(targeting),targeting]\n  # mean(targeting.train.pred==actual)\n  \n  # md.pattern(total_backup_df)\n  #考虑随机森林插值\n  library(party)\n  total$targeting = as.factor(total$targeting)\n  targeting.model.rf = cforest(targeting~.,data=total[!is.na(targeting),c(2:5,8,10,11,13,14)])\n  targeting.pred.rf = predict(targeting.model.rf,total[is.na(targeting),],OOB = TRUE)\n  targeting.train.pred.rf = predict(targeting.model.rf,total[!is.na(targeting),],OOB = TRUE)\n  actual = total[!is.na(targeting),targeting]\n  mean(targeting.train.pred.rf==actual)\n  #插进！\n  total[is.na(targeting),\"targeting\"] = targeting.pred.rf\n  \n  regionnum = 0\n  total$regionnum = 0\n  for(i in 1:nrow(total)){\n    if(total[i,]$ifredstar==1){regionnum = regionnum +1}\n    total[i,]$regionnum = regionnum\n  }\n  total_df[28:30,\"regionnum\"] = 22\n  total_df[32,\"regionnum\"] = 23\n  total_df[55:57,\"regionnum\"] = 24\n  total_df[58:66,\"regionnum\"] = 25\n  total_df[c(29,28),c(\"furniture_perc\",\"constr_perc\")] = c(200,260,350,200)\n  total_df[25,c(\"furniture_perc\",\"constr_perc\")] = c(189,239)\n  total_df[51,\"gain_loss_rate\"] = \"30:40:30\"\n  total = data.table(total_df)\n  total[city==\"重庆\",c(\"furniture_perc\",\"constr_perc\") :=NA]\n  total_df = data.frame(total)\n  total_df$rent = total$rent\n  total$regionnum = total_df$regionnum\n  total_backup$regionnum = total$regionnum\n  total[,willing_ranking:=NULL]\n  total_df = data.frame(total)\n  #使用随机森林完备版 后续尝试\n  library(mice)\n  total_df = data.frame(total)\n  miceMod <- mice(total_df[, c(2,5,9:19)], method=\"rf\")  # perform mice imputation, based on random forests.\n  miceOutput2 <- complete(miceMod)  # generate the completed data.\n\n  #使用knn方法 对rent_rate进行插值\n  library(DMwR)\n  knnOutput <- knnImputation(total_df[, c(\"area\",\"avg_rent\",\"rent_rate\",\"targeting\",\"ifredstar\",\n                                          \"city\",\"rent\",\"sale\")])  # perform knn imputation.\n  index = which(is.na(total_df$rent_rate))\n  knnOutput$rent_rate[index]\n  #插入!\n  total_df$rent_rate = knnOutput$rent_rate\n  \n  total_df_dt = data.table(total_df)\n  setcolorder(total_df_dt,c(1,5,6,9,12,15,17,18,2:4,7,8,10,11,13,14,16))\n  total_df = data.frame(total_df_dt)\n  \n  set.seed(7)\n  library(mlbench)\n  library(caret)\n  control <- trainControl(method=\"repeatedcv\", number=10, repeats=3)\n  model <- train(rent~., data=total_df, method=\"rf\", preProcess=\"scale\", trControl=control,\n                 importance = T)\n  importance <- varImp(model, scale=FALSE)\n  print(importance)\n  plot(importance)\n  \n  set.seed(7)\n  library(mlbench)\n  library(caret)\n  control <- rfeControl(functions=rfFuncs, method=\"cv\", number=10)\n  results <- rfe(total_df[,c(2:15,17,18)], total_df[,16], sizes=c(1:16), rfeControl=control)\n  print(results)\n  predictors(results)\n  plot(results, type=c(\"g\", \"o\"))\n  \n  library(e1071)\n  svm.model = svm(rent~.-mall_name-year-gain_loss_rate,data = total_df,cost = 10,gamma = 0.0078125,cross = 5)\n  \n  library(baidumap)\n  library(rvest)\n  library(data.table)\n  options(baidumap.key = '4SY3dY8GrhfU5ChOeqFMvhcaf9DWo7dc')\n  \n  shops = total[,.(city=city,mall_name = mall_name)]\n  shops[as.vector(mall_name)==\"北四坏居然之蒙\",mall_name := \"北四环居然之家\"]\n  shops[as.vector(mall_name)==\"大忡寺簧秉丽蒙\",mall_name:=\"大钟寺蓝景丽家\"]\n  shops[as.vector(mall_name)==\"城外城\",mall_name:=\"城外诚\"]\n  total[as.vector(mall_name)==\"北四坏居然之蒙\",mall_name := \"北四环居然之家\"]\n  total[as.vector(mall_name)==\"大忡寺簧秉丽蒙\",mall_name:=\"大钟寺蓝景丽家\"]\n  total[as.vector(mall_name)==\"城外城\",mall_name:=\"城外诚\"]\n  \n  \n  shops = shops[,location := paste0(city,mall_name)]\n  shops[,location:=str_replace_all(location,\"\\\\s\",\"\")]\n  shops = shops[!duplicated(shops$location),]\n  shops = shops[c(-8,-9),]\n  shops_df = data.frame(shops_df)\n  # shops[,c(\"lon\",\"lat\")] = getCord(shops$location)[,c(\"lon\",\"lat\")] #百度地图API\n  city = result_dt3$city\n  result_dt4 = result_dt3\n  result_dt4$city = NULL\n  result_dt4$city = city\n  \n  library(ggmap)\n  shops_cord_ch = lapply(shops$location,geocode) #the correct coordinate from google\n  shops_cord_ch_df = rbindlist(shops_cord_ch)\n  shops_df$lon = shops_cord_ch_df$lon\n  shops_df$lat = shops_cord_ch_df$lat\n  shops_df$coordinates = NULL\n  shops_df[11,c(\"lon\",\"lat\")] = c(120.2027,30.2601)\n  library(readxl)\n  ?read_xlsx\n  shop_parts = read_xlsx('~/data/map_manual_work.xlsx',sheet = \"Sheet3\")\n  shop_parts = shop_parts[!duplicated(shop_parts$name),]\n  shop_parts = shop_parts[c(-8,-9),]\n  shop_parts$name[c(14,15)] = c(\"上海同福易佳丽建材馆\",\"上海同福易佳丽灯具馆\")\n  shops_df = merge(shops_df,shop_parts,by.x = \"location\",by.y = \"name\",all.x = TRUE)\n  shops_df[shops_df$location==\"上海同福易佳丽金山\",c(\"lon\",\"lat\")] = c(121.3272705619,30.7329496385)\n  shops_cluster = kmeans(shops_df[,c(\"lon\",\"lat\")],centers = 20,iter.max = 100)\n  shops_df = cbind(shops_df,shops_cluster)\n  shanghai_cluster = kmeans(shops_df[shops_df$city==\"上海\",c(\"lon\",\"lat\")],iter.max = 50,center = 5)\n  shanghai_cluster_df = data.frame(\"location\" = shops_df[shops_df$city == \"上海\",]$location,\"region\" = shops_df[shops_df$city == \"上海\",]$region,\"cluster\" = shanghai_cluster$cluster)\n  View(shanghai_cluster_df[order(shanghai_cluster_df$region),])\n  shanghai_cluster_df = merge(shanghai_cluster_df,shops_df[,c(\"location\",\"lon\",\"lat\")],by = \"location\",all.x = TRUE)\n  library(ggmap)\n  library(magrittr)\n  shanghai_map <- get_map(\"shanghai,China\", zoom=10)\n  p = ggmap(shanghai_map)\n  p + geom_point(data = shanghai_cluster_df[shanghai_cluster_df$cluster==1,c(\"lon\",\"lat\")],aes(x=lon, y=lat), color=\"red\", size=3, alpha=0.5)+geom_point(data = shanghai_cluster_df[shanghai_cluster_df$cluster==2,c(\"lon\",\"lat\")],aes(x=lon, y=lat), color=\"yellow\", size=3, alpha=0.5)+geom_point(data = shanghai_cluster_df[shanghai_cluster_df$cluster==3,c(\"lon\",\"lat\")],aes(x=lon, y=lat), color=\"green\", size=3, alpha=0.5)+geom_point(data = shanghai_cluster_df[shanghai_cluster_df$cluster==4,c(\"lon\",\"lat\")],aes(x=lon, y=lat), color=\"blue\", size=3, alpha=0.5)+geom_point(data = shanghai_cluster_df[shanghai_cluster_df$cluster==5,c(\"lon\",\"lat\")],aes(x=lon, y=lat), color=\"white\", size=3, alpha=0.5)\n  # shanghai_map %>% geom_point(data = shanghai_cluster_df[shanghai_cluster_df$cluster==1,\n  # c(\"lon\",\"lat\")],aes(x=lon, y=lat), color=\"red\", size=3, alpha=0.5)%>%geom_point(data = shanghai_cluster_df[shanghai_cluster_df$cluster==2,c(\"lon\",\"lat\")],aes(x=lon, y=lat), color=\"yellow\", size=3, alpha=0.5)%>%geom_point(data = shanghai_cluster_df[shanghai_cluster_df$cluster==3,c(\"lon\",\"lat\")],aes(x=lon, y=lat), color=\"green\", size=3, alpha=0.5)%>%geom_point(data = shanghai_cluster_df[shanghai_cluster_df$cluster==4,c(\"lon\",\"lat\")],aes(x=lon, y=lat), color=\"blue\", size=3, alpha=0.5)%>%geom_point(data = shanghai_cluster_df[shanghai_cluster_df$cluster==5,c(\"lon\",\"lat\")],aes(x=lon, y=lat), color=\"white\", size=3, alpha=0.5)\n  shops_df = cbind(shops_df,shops_cluster)\n  colnames(shops_df)[10] = \"cluster\"\n  \n  shanghai_cluster_df[shanghai_cluster_df$location==\"上海建配龙逸仙路店\",\"cluster\"] = 3\n  shanghai_factor = factor(shanghai_cluster_df$cluster)\n  levels(shanghai_factor) = c(\"上海浦东南\",\"上海浦东北\",\"上海浦西北\",\"上海浦西南\",\"上海宝山\")\n  shops_df[shops_df$city==\"上海\",\"region\"] = as.vector(shanghai_factor)\n  \n  shops_df[shops_df$cluster == 16,\"region\"] = \"东四环\"\n  shops_df[6,\"region\"] = \"北四环\"\n  shops_df[59,\"region\"] = \"重庆远江北\"\n  shops_df$cluster = NULL\n  shops_df[44,c(\"lat\",\"lon\")] = c(39.1001140000,117.2089660000) #天津市河西加宜家居博览中心\n  #苏州月星家得乐\n  #深圳租金 200737000\n  \n  total2_temp_list =str_split_fixed(total2$gain_loss_rate,\":\",3)\n  total2_temp_list[total2_temp_list[,1] == \"\",] = NA\n  colnames(total2_temp_list) = c(\"win\",\"deuce\",\"loss\")\n  shops_df = cbind(shops_df,total2_temp_list)\n  total2_copy = cbind(total2,total2_temp_list)\n  total2 = total2_copy\n  total2$willing_ranking = NULL\n  total2_copy = total2\n  \n  beijing_map <- get_map(\"beijing,China\", zoom=11)\n  p = ggmap(beijing_map)\n  p + geom_point(data = shops_df[shops_df$cluster==15,c(\"lon\",\"lat\")],aes(x=lon, y=lat), color=\"red\", size=3, alpha=0.5)+geom_point(data = shops_df[shops_df$cluster==16,c(\"lon\",\"lat\")],aes(x=lon, y=lat), color=\"blue\", size=3, alpha=0.5)\n\n  chongqing_map <- get_map(\"chongqing,China\", zoom=10)\n  p = ggmap(chongqing_map)\n  p + geom_point(data = shops_df[shops_df$cluster==1,c(\"lon\",\"lat\")],aes(x=lon, y=lat), color=\"red\", size=3, alpha=0.5)+geom_point(data = shops_df[shops_df$cluster==2,c(\"lon\",\"lat\")],aes(x=lon, y=lat), color=\"blue\", size=3, alpha=0.5)+geom_point(data = shops_df[shops_df$cluster==20,c(\"lon\",\"lat\")],aes(x=lon, y=lat), color=\"purple\", size=3, alpha=0.5)\n  \n  shops_year = readxl::read_xlsx(\"~/data/opponent.xlsx\",sheet = \"Sheet1\")\n  shops_year$year = as.Date(shops_year$year_open,origin = \"1900/01/01\")\n  shops_year$year_diff = as.numeric(difftime(as.Date(\"2016-12-31\"), shops_year$year, unit=\"weeks\"))/52.25\n  shops_year[,c(\"year_open\",\"year\")] = NULL\n  total2 = merge(total2,shops_year,by = \"location\",all.x = TRUE)\n  new_age = ifelse(is.na(total2$age),total2$year_diff,total2$age)\n  total2$age = new_age\n  \n  shops_winloss = readxl::read_xlsx(\"~/data/opponent.xlsx\",sheet = \"Sheet1\")\n  shops_winloss$year_open = NULL\n  total2_copy = total2\n  total2 = merge(total2,shops_winloss,by = \"location\")\n  win = ifelse(is.na(total2$win.x),total2$win.y,total2$win.x)\n  deuce = ifelse(is.na(total2$deuce.x),total2$deuce.y,total2$deuce.x)\n  loss = ifelse(is.na(total2$loss.x),total2$loss.y,total2$loss.x)\n  total2$win = win\n  total2$deuce = deuce\n  total2$loss = loss\n  total2[c(1,2,3,5,6,10,11),\"age\"] = c(6.7313739,21.9630895,14.4661654,7.1305537,6.3185236,9.1073137,8.3800410)\n  total2[10,c(\"win\",\"deuce\",\"loss\")] = data.frame(58,21,21)\n  total2[11,c(\"win\",\"deuce\",\"loss\")] = data.frame(52,28,20)\n  shops_str = readxl::read_xlsx(\"~/data/opponent.xlsx\",sheet = \"Sheet2\")\n  setDT(shops_str)\n  shops_str[(furniture_perc>0||constr_perc>0),`:=`(F=furniture_perc/(furniture_perc+constr_perc)*100,C=constr_perc/(furniture_perc+constr_perc)*100)]\n  total2$furniture_perc = shops_str$F\n  total2$constr_perc = shops_str$C\n  total2[5,\"rent_rate\"] = 0.95\n  total2[,c(\"win.x\",\"win.y\",\"deuce.x\",\"deuce.y\",\"loss.x\",\"loss.y\",\"v1\",\"mall_circle\",\"gain_loss_rate\"):=NULL]\n  total2$location[c(9,10,11)] = c(\"上海同福易佳丽金山\",\"上海同福易佳丽建材馆\",\"上海同福易佳丽灯具馆\")\n  \n  total3 = merge(total2,shops_df,by = \"location\")\n  setnames(total3,\"distance_commerce_in_2500\",\"num_business_within_2500\")\n  setnames(total3,\"min_distance_commerce\",\"dist_from_business_district\")\n  setnames(total3,\"subway_distance\",\"dist_from_subway\")\n  setnames(total3,\"distance_from_road\",\"dist_from_big_road\")\n  setnames(total3,\"distance_from_highway\",\"dist_from_highway\")\n  setnames(total3,\"location\",\"mall_name\")\n  total3[c(1:3,6,25,26,34,36),\"brand_num\"] = c(460,1020,650,440,380,428,293,378) #won't work,keep info\n  total3[13,c(\"dist_from_big_road\",\"dist_from_highway\")] = data.frame(200,12000)\n  total3[19,c(\"dist_from_big_road\",\"dist_from_highway\")] = data.frame(100,8300)\n  total3[24,c(\"dist_from_big_road\",\"dist_from_highway\")] = data.frame(350,3400)\n  total3 = as.data.frame(total3)\n  \n  total4 = total3[total3$ifredstar ==0,]\n  \n  library(party)\n  setDT(total3)\n  total3$targeting = as.factor(total3$targeting)\n  targeting = total3$targeting\n  \n  total3$win = as.numeric(total3$win)\n  total3$deuce = as.numeric(total3$deuce)\n  total3$loss = as.numeric(total3$loss)\n  target_level = levels(total3$targeting)\n  total3$ranking = as.numeric(total3$ranking)\n  targeting.model.rf = cforest(targeting~.,data=total3[!is.na(targeting),c(2:8,10,12:14,21,22,23)])\n  targeting.pred.rf = predict(targeting.model.rf,total3[is.na(targeting),],OOB = TRUE)\n  targeting.train.pred.rf = predict(targeting.model.rf,total3[!is.na(targeting),],OOB = TRUE)\n  actual = total3[!is.na(targeting),targeting]\n  mean(targeting.train.pred.rf==actual)\n  #插进！\n  total3[is.na(targeting),\"targeting\"] = targeting.pred.rf\n  \n  #使用knn方法 对rent_rate进行插值\n  library(DMwR)\n  knnOutput <- knnImputation(total3[, c(\"area\",\"rent_rate\",\"targeting\",\"ifredstar\",\n                                          \"rent\",\"sale\")])  # perform knn imputation.\n  index = which(is.na(total3$rent_rate))\n  knnOutput$rent_rate[index]\n  #插入!\n  total3$rent_rate = knnOutput$rent_rate\n  \n  library(mice)\n  total3 = as.data.frame(total3)\n  miceMod <- mice(total3[, c(-1,-9,-18)], method=\"rf\")  # perform mice imputation, based on random forests.\n  miceOutput2 <- complete(miceMod)  # generate the completed data.\n  total4 = miceOutput2\n  \n  total4$mall_name = total3$mall_name\n  total4$city = total3$city\n  total4$region = total3$region\n  total4$constr_perc = 100 - total4$furniture_perc\n  total5 = total4[total4$ifredstar == 0,]\n  total5 = plyr::rbind.fill(total5,redstar_combine)\n  total5$city = str_sub(total5$mall_name,1,2)\n  \n  miceMod3 <- mice(total5, method=\"rf\")  # perform mice imputation, based on random forests.\n  miceOutput3 <- complete(miceMod3)  # generate the completed data.\n  total6 = miceOutput3\n  \n  source(\"~/R_Projects/SVM/Rfile/test_svm.R\")\n  total6$city = as.numeric(as.factor(total6$city))\n  total6$region = as.numeric(as.factor(total6$region))\n  total6$targeting = as.numeric(as.factor(total6$targeting))\n  test_set = total6[total6$year == 2017,c(-21)]\n  train_set = total6[total6$year != 2017,c(-21)]\n  lll = svm_para_percent(train_set,test_set)\n  \n  svm.model = svm(rent~.,data = train_set,cost = 10,gamma = 3.12500e-02,cross = 5)\n  predict.model = predict(svm.model,test_set[,-20])\n  View(cbind(predict.model,rent = test_set[,20],mall_name = total6[total6$year==2017,]$mall_name))\n  result_compare2 = cbind(predict.model,rent = test_set[,20],mall_name = total6[total6$year==2017,]$mall_name)\n  openxlsx::write.xlsx(result_compare2,\"./Rfile/result_compare2.xlsx\")\n  \n  set.seed(7)\n  library(mlbench)\n  library(caret)\n  control <- trainControl(method=\"repeatedcv\", number=10, repeats=3)\n  model <- train(rent~., data=total6[,-21], method=\"rf\", preProcess=\"scale\", trControl=control,\n                 importance = T)\n  importance <- varImp(model, scale=FALSE)\n  print(importance)\n  plot(importance)\n  \n  result_dt4$loc\n  pv = paste0(result_dt4$city,result_dt4$region)\n  result_dt4$location = pv\n  commerce_cord_ch = lapply(result_dt4$location,geocode)\n  commerce_cord_ch_list = rbindlist(commerce_cord_ch)\n  result_dt4 = cbind(result_dt4,commerce_cord_ch_list)\n  \n  dt4_sample = result_dt4[,.SD[sample(.N,5)], by=city]\n  result_dt5 = result_dt4[!is.na(lon),]\n  result_dt5$latitude = NULL\n  result_dt5$longitude = NULL\n  shop_commerce = merge(shops_df,result_dt5,by = \"city\",allow.cartesian = TRUE)\n  shop_commerce = data.table(shop_commerce)\n  shop_commerce$coordinates.x = NULL\n  shop_commerce$coordinates.y = NULL\n  library(geosphere)\n  load(file = '~/data/result_dt3_modified.RData')\n  \n  obj_distance = distHaversine(shop_commerce[,c('lon.x','lat.x')],shop_commerce[,c('lon.y','lat.y')])\n  shop_commerce[,distance := obj_distance]\n  \n  shop_commerce_count = shop_commerce[distance<2500,.N,by = location.x]\n  shops_df = merge(shops_df,shop_commerce_count,by.x = \"location\",by.y = \"location.x\",all.x = TRUE)\n  setnames(shops_df,\"N\",\"distance_commerce_in_2500\")\n  shop_commerce_distance = shop_commerce[,min(distance,na.rm = TRUE),by = location.x]  \n  # false_row = shop_commerce[distance ==0,c(\"lon\",\"lat\",\"location.x\",\"location.y\")]\n  shops_df = merge(shops_df,shop_commerce_distance,by.x = \"location\",by.y = \"location.x\",all.x = TRUE)\n  setnames(shops_df,\"V1\",\"min_distance_commerce\")\n  shops_df = cbind(shops_df,subway_distance)\n  \n  library(googleway)\n  library(RCurl)\n  proxy_url <- \"http://127.0.0.1:61387/\"\n  Sys.setenv(http_proxy = proxy_url, https_proxy = proxy_url, ftp_proxy = proxy_url)\n  \n  url.exists(\"www.google.com\")\n  key = \"AIzaSyCW6btatRC9nXwaMI06bgV5iHZbsX4H034\"\n  place_key = \"AIzaSyCW6btatRC9nXwaMI06bgV5iHZbsX4H034\"\n  test_subway = google_places(key = key,place_type = \"subway_station\",location = c(31.22941,121.3787),radius = 1000,rankby = \"distance\")\n  test_subway = test_subway$results\n  \n  test_nearestway = google_nearestRoads(df_points = data.frame(latitude = 31.22941,longitude = 121.3787),key = road_key)\n\n  df_path <- read.table(text = \"lat lon\n-35.27801 149.12958\n-35.28032 149.12907\n-35.28099 149.12929\n-35.28144 149.12984\n-35.28194 149.13003\n-35.28282 149.12956\n-35.28302 149.12881\n-35.28473 149.12836\", header = T)\n  \n  google_snapToRoads(df_path, key = road_key, interpolate = TRUE, simplify = TRUE)\n  # google_place_details()\n  \n  df_points = read.table(text = \"lat lon\n                         31.2429860000 121.3927610000\n                         31.2399950000 121.3972420000\n                         31.2308790000 121.4060810000\",header = T)\n  road_key = \"AIzaSyB3Hz_xqngONaTyfpWfNBdtQfJx-Ay9p0o\"\n  map_key = \"AIzaSyAQwxqx2skmYVbgffhTfyKixuxAgU9PTbs\"\n  # google places key AIzaSyCW6btatRC9nXwaMI06bgV5iHZbsX4H034\n  # google map key may be AIzaSyAQwxqx2skmYVbgffhTfyKixuxAgU9PTbs\n  # res <- find_closest_roads(df_points,\"lat\",\"lon\",key = road_key)\n  res <- google_nearestRoads(df_points, key = road_key)\n  res$snappedPoints = res$snappedPoints[c(1,3,5),]\n  df_points$snapped_lat <- res$snappedPoints$location$latitude\n  df_points$snapped_lon <- res$snappedPoints$location$longitude\n  df_points$colour <- 'green'\n  \n  library(leaflet)\n  library(XML)\n  library(leafletCN)\n  dat = data.frame(name = regionNames(\"world\"),\n                   value = runif(length(regionNames(\"world\"))))\n  geojsonMap(dat,\"world\")\n  \n  leaflet() %>%\n    amap() %>%\n    addMarkers(lng = 116.3125774825, lat = 39.9707249401,\n               popup = \"The birthplace of COS\")\n  leaflet() %>%\n    amap() %>%\n    addMarkers(data = df_points, lat = ~lat,lng = ~lon) %>%\n    addMarkers(data = df_points, lat = ~snapped_lat,lng = ~snapped_lon)\n  \n  # google_map(key = map_key) %>%\n  #   add_markers(data = df_points, lat = 'lat', lon = 'lon') %>%\n  #   add_markers(data = df_points, lat = 'snapped_lat', lon = 'snapped_lon')\n  \n  # https://roads.googleapis.com/v1/nearestRoads?points=60.170880,24.942795|60.170879,24.942796|60.170877,24.942796&key=YOUR_API_KEY\n  find_closest_roads = function(location, latname, lonname, key) {\n    library(rjson)\n    library(RCurl)\n    weburl = \"https://roads.googleapis.com/v1/nearestRoads\"\n    loc_string = paste(location[[latname]], location[[lonname]], sep = \",\", collapse = \"|\")\n    sendurl = paste0(weburl,\n                     \"?points=\", loc_string,\n                     \"&key=\", key)\n    result = getURL(sendurl)\n    result = fromJSON(result)$snappedPoints\n    return(result)\n  }\n  \n  getCord = function(v) {\n    dt = data.table(location = v)\n    dt[, coordinates := getCoordinate(location, output = 'xml')]\n    xmls = lapply(dt$coordinates, read_xml)\n    lonpart = lapply(xmls, xml_node, 'lng')\n    latpart = lapply(xmls, xml_node, 'lat')\n    xml_text_v = Vectorize(xml_text)\n    longitude1 = xml_text_v(lonpart)\n    latitude1 = sapply(latpart, xml_text)\n    dt$lon = as.numeric(longitude1)\n    dt$lat = as.numeric(latitude1)\n    return(dt)\n  }\n  \n  find_closest_subways = function(coordinate_df,place_key){\n    coordinate_df$lat_lon <- do.call(Map, c(f= c, unname(coordinate_df)))\n    i = 1\n    result_df = data.frame(matrix(,nrow=nrow(coordinate_df), ncol=2))\n    for(v in coordinate_df$lat_lon){\n      df = google_places(key = place_key,place_type = \"subway_station\",location = v,radius = 5000,rankby = \"distance\")\n      if(!is.na(df$results$geometry$location$lat) && length(df$results$geometry$location$lat)>0){\n      result_df[i,] = c(df$results$geometry$location$lat[1],df$results$geometry$location$lng[1])\n      }\n      i = i+1\n    }\n    return(result_df)\n    #apply(DF[, c(\"height\", \"weight\")], 1, f)\n  }\n  \n  closest_subway = find_closest_subways(shops_cord_ch_df[,c(\"lat\",\"lon\")],place_key)\n  sindex = sample(1:60,10,replace = FALSE)\n  sample_subway = cbind(shops_df$mall_name,shops_df$city,closest_subway)[sindex,]\n  library(geosphere)\n  subway_distance = distHaversine(shops_cord_ch_df[,c('lon','lat')],closest_subway[,c('X2','X1')])\n  \n  \n  find_closest_places = function(search_string,location,types,name,radius){\n    library(RCurl)\n    library(rjson)\n    key = \"AIzaSyCW6btatRC9nXwaMI06bgV5iHZbsX4H034\"\n    location = paste0(location,collapse = \",\")\n    web = getURL(\n      paste(\n        \"https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=\", location,\n        \"&key=\", key,\n        \"&types=\",types,\n        \"&name=\",name,\n        \"&radius=\",radius,\n        sep = \"\"\n      )\n    )\n    return(fromJSON(web))\n  }\n  \n  \n  function(){\n    # shops[,coordinates := getCoordinate(location,output = 'xml')]\n    # xmls = lapply(shops$coordinates,read_xml)\n    # lonpart = lapply(xmls,xml_node,'lng')\n    # latpart = lapply(xmls,xml_node,'lat')\n    # xml_text_v = Vectorize(xml_text)\n    # longitude1 = xml_text_v(lonpart)\n    # latitude1 = sapply(latpart,xml_text)\n    # shops$lon = as.numeric(longitude1)\n    # shops$lat = as.numeric(latitude1)\n    # new_vector = list() \n    # for(i in 1:nrow(shops)){\n    #   new_vector[[i]] = c(shops$longitude[[i]],shops$latitude[[i]])\n    # }\n    # zz = Map(f= c, unname(shops[,c(\"longitude\",\"latitude\")]))\n    # shops$test <- do.call(Map, c(f= c, unname(shops[,c(\"longitude\",\"latitude\")])))\n    # # new_location2 = apply(shops[, c(\"longitude\", \"latitude\")], 1, getLocation,output = \"xml\")\n    # \n    # new_location = lapply(new_vector,getLocation,output = 'xml')\n    # names(new_location) = NULL\n    # new_location_xmls = lapply(new_location,read_xml)\n    # address = lapply(new_location_xmls,xml_node,'formatted_address')\n    # address1 = sapply(address,xml_text)\n    # shops$new_location = address1\n    # commerce_cord = getCord(commerce_loc)\n    # commerce_loc_en = lapply(commerce_loc,transnew)\n    # commerce_cord_ch = lapply(commerce_loc,geocode)\n    # address_correct = cbind(commerce_loc,commerce_cord_ch_df)\n    # result_dt4 = merge(result_dt3,address_correct,by.x = \"location\",by.y = \"commerce_loc\",all.x = TRUE)\n    # result_dt4[,':='(longitude=ifelse(!is.na(lon),lon,longitude),latitude=ifelse(!is.na(lat),lat,latitude))]\n    # shop_commerce = merge(shops,result_dt4,by = \"city\", allow.cartesian = TRUE)\n    # obj_distance = distHaversine(shop_commerce[,c('lon','lat')],shop_commerce[,c('longitude','latitude')])\n    # shop_commerce[,distance := obj_distance]\n    # shop_commerce[distance<2500,.N,by = mall_name]\n    \n  }",
    "created" : 1502188917934.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "626|66|637|2|\n",
    "hash" : "2559699657",
    "id" : "A889A20C",
    "lastKnownWriteTime" : 1505878390,
    "last_content_update" : 1520911582804,
    "path" : "~/R_Projects/rental_model/Rfile/data_process.R",
    "project_path" : "Rfile/data_process.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
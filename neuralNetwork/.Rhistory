MSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test_)
nn <- neuralnet(f,data=train.scaled,hidden = 10,linear.output=T)
pr.nn <- compute(nn,test.scaled[,-3])
pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test_)
nn <- neuralnet(f,data=train.scaled,hidden = 12,linear.output=T)
pr.nn <- compute(nn,test.scaled[,-3])
pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test_)
compare.test2 = cbind(pr.nn_,test.r)
View(compare.test2)
plotIterativeError(modelElman)
library(Rcpp)
library(RSNNS)
library(data.table)
plotIterativeError(modelElman)
plotIterativeError(modelJordan)
View(new_trainset)
f
View(new_trainset_sd)
new_trainset_sd
?scale
cities = substring(new_general_info$mall_name,1,2)
cities_code = as.numeric(factor(cities))
data = new_general_info
View(new_general_info)
maxs <- apply(data, 2, max)
mins <- apply(data, 2, min)
scaled <- as.data.frame(scale(data, center = mins, scale = maxs - mins))
maxs
year = new_general_info$year
data = new_general_info[,c(-1,-24)]
View(data)
maxs <- apply(data, 2, max)
mins <- apply(data, 2, min)
scaled <- as.data.frame(scale(data, center = mins, scale = maxs - mins))
View(scaled)
cities = substring(new_general_info$mall_name,1,2)
cities_code = as.numeric(factor(cities))
year = new_general_info$year
data$year = year
View(scaled)
data = new_general_info[,c(-1,-24)]
scaled$city = cities_code
scaled$year = year
View(scaled)
new_train <- scaled[year!=2017,-ncol(scaled)]
new_test <- scaled[year==2017,-ncol(scales)]
View(new_test)
new_test <- scaled[year==2017,-ncol(scaled)]
View(new_train)
View(new_test)
new_traindata = cbind(rent = new_trainset$rent,new_train[,-3])
str(new_traindata)
new_res <- nnet(rent~.,data=new_traindata,
size=35, linout=TRUE, skip=TRUE, MaxNWts=1000000, trace=FALSE, maxit=1000000)
library(nnet)
new_traindata = cbind(rent = new_trainset$rent,new_train[,-3])
new_res <- nnet(rent~.,data=new_traindata,
size=35, linout=TRUE, skip=TRUE, MaxNWts=1000000, trace=FALSE, maxit=1000000)
pred.nnet.new = predict(new_res, new_train[,c(-3)])
pred.test.new = predict(new_res,new_test[,c(-3)])
compare.train.new = cbind(pred.nnet.new,new_trainset$rent)
compare.test.new = cbind(pred.test.new,new_testset$rent)
e.test = crossprod(pred.test.new - unlist(new_testset$rent))/nrow(new_testset)
View(compare.train.new)
test.new = nn_para(new_trainset,new_testset)
View(new_trainset)
f = rent~.
nn_para = function(traindata,testdata) {
min = Inf
v = vector(mode = "numeric",length = 0)
dt = data.table(cost = v,size = v,iter = v)
for (size in 5:35) {
for (maxit in c(1e+1,1e+2,1e+3,1e+4,1e+5,1e+6,1e+7)) {
res <- nnet(
f,data = traindata,
size = size, linout = TRUE, skip = TRUE, MaxNWts = 100000, trace =
FALSE, maxit = 1000000
)
pred.nnet = predict(res, traindata[,c(3,5)])
pred.test = predict(res,testdata)
e.test = crossprod(pred.test - unlist(new_testset$rent)) / nrow(new_testset)
temp.dt = data.table(cost = e.test[1,1],size = size,iter = maxit)
dt = rbind(dt,temp.dt)
if (e.test[1,1] < min) {
min = e.test[1,1]
bestsize = size
bestiter = maxit
}
}
}
temp.dt = data.table(cost = min,size = bestsize,iter = bestiter)
dt = rbind(dt,temp.dt)
}
test.new = nn_para(new_trainset,new_testset)
nn_para = function(traindata,testdata) {
min = Inf
v = vector(mode = "numeric",length = 0)
dt = data.table(cost = v,size = v,iter = v)
for (size in 5:35) {
for (maxit in c(1e+1,1e+2,1e+3,1e+4,1e+5,1e+6,1e+7)) {
res <- nnet(
f,data = traindata,
size = size, linout = TRUE, skip = TRUE, MaxNWts = 100000, trace =
FALSE, maxit = 1000000
)
pred.nnet = predict(res, traindata[,-3])
pred.test = predict(res,testdata[,-3])
e.test = crossprod(pred.test - unlist(new_testset$rent)) / nrow(new_testset)
temp.dt = data.table(cost = e.test[1,1],size = size,iter = maxit)
dt = rbind(dt,temp.dt)
if (e.test[1,1] < min) {
min = e.test[1,1]
bestsize = size
bestiter = maxit
}
}
}
temp.dt = data.table(cost = min,size = bestsize,iter = bestiter)
dt = rbind(dt,temp.dt)
}
test.new = nn_para(new_trainset,new_testset)
View(test.new)
View(train_)
a
a=NULL
a
rm(a)
library(neuralnet)
n <- names(train.scaled)
f <- as.formula(paste("rent ~", paste(n[!n %in% "rent"], collapse = " + ")))
nn <- neuralnet(f,data=train.scaled,hidden = 12,linear.output=T)
plot(nn)
pr.nn <- compute(nn,test.scaled[,-3])
pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test_)
compare.test2 = cbind(pr.nn_,test.r)
View(compare.test2)
!"rent" %in% n
paste(c(1,2,3))
paste0(c(1,2,3))
View(train.cv)
View(train.scaled)
plot(nn)
?"neuralnet"
rep(12,10)
nn <- neuralnet(f,data=train.scaled,hidden = rep(12,10),linear.output=T)
pr.nn <- compute(nn,test.scaled[,-3])
pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test_)
compare.test2 = cbind(pr.nn_,test.r)
View(compare.test2)
e.test>compare.test2
e.test>MSE.nn
View(compare.test2)
library(openxlsx)
write.xlsx(compare.test2,file = '~/nn.xlsx')
pr.nn <- compute(nn,test.scaled[,-3])
pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test_)
nrow(test_)
MSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test.r)
nrow(test.r)
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/length(test.r)
?elman
?nnet
plot.nnet(nnet)
library(devtools)
source_url('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
plot.nnet(nnet)
?"neuralnet"
?seq
seq(0, 1, length.out = 11)
seq(0, 1, 11)
seq(3,21,by = 3)
str(maxs)
svm_para = function(trainset,testset){
min = Inf
v = vector(mode = 'numeric',length = 0)
c = vector(mode = 'character',length = 0)
dt = data.table(size = v,depth = v,e = v,act.fct = c)
rentind = which(names(trainset)=="rent")
for(depth in 1:15){
for(size in seq(3,21,by = 3)){
for(actfun in c('logistic','tanh')){
neural.model = neuralnet(rent~.,data = trainset,hidden = rep(size,depth),act.fct = actfun)
neural.pred = predict(svm.model,testset[,-rentind])
e = crossprod(neural.pred - unlist(testset[,rentind]))/nrow(testset)
temp.dt = data.table(size = size,depth = depth,e = e[1,1],actfun = actfun)
dt = rbind(dt,temp.dt)
if(e[1,1]<min){
bestsize = size
bestdepth = depth
bestactfun = actfun
min = e[1,1]
}
}
}
}
min.dt = data.table(size = bestsize,depth = bestdepth,e = min,actfun = bestactfun)
dt = rbind(dt,min.dt)
return(dt)
}
rm(svm_para())
rm(svm_para)
neuralnet_para = function(trainset,testset){
min = Inf
v = vector(mode = 'numeric',length = 0)
c = vector(mode = 'character',length = 0)
dt = data.table(size = v,depth = v,e = v,act.fct = c)
rentind = which(names(trainset)=="rent")
for(depth in 1:15){
for(size in seq(3,21,by = 3)){
for(actfun in c('logistic','tanh')){
neural.model = neuralnet(rent~.,data = trainset,hidden = rep(size,depth),act.fct = actfun)
neural.pred = predict(svm.model,testset[,-rentind])
e = crossprod(neural.pred - unlist(testset[,rentind]))/nrow(testset)
temp.dt = data.table(size = size,depth = depth,e = e[1,1],actfun = actfun)
dt = rbind(dt,temp.dt)
if(e[1,1]<min){
bestsize = size
bestdepth = depth
bestactfun = actfun
min = e[1,1]
}
}
}
}
min.dt = data.table(size = bestsize,depth = bestdepth,e = min,actfun = bestactfun)
dt = rbind(dt,min.dt)
return(dt)
}
source("nn_para.R")
source("Rfile/nn_para.R")
file.exists('Rfile/nn_para.R')
neuralnet_para_m = neuralnet_para(train.scaled,test.scaled)
source("Rfile/nn_para.R")
neuralnet_para_m = neuralnet_para(train.scaled,test.scaled)
source("Rfile/nn_para.R")
neuralnet_para_m = neuralnet_para(train.scaled,test.scaled)
source("Rfile/nn_para.R")
neuralnet_para_m = neuralnet_para(train.scaled,test.scaled)
str(dt)
neuralnet_para_m = neuralnet_para(train.scaled,test.scaled)
nn <- neuralnet(f,data=train.scaled,hidden = rep(12,10),linear.output=T)
neuralnet_para_m = neuralnet_para(train.scaled,test.scaled)
dt
temp.dt
source("Rfile/nn_para.R")
neuralnet_para_m = neuralnet_para(train.scaled,test.scaled)
View(neuralnet_para_m)
nn <- neuralnet(f,data=train.scaled,hidden = rep(9,2),linear.output=T)
pr.nn <- compute(nn,test.scaled[,-3])
pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/length(test.r)
compare.test2 = cbind(pr.nn_,test.r)
View(compare.test2)
View(cbind(compare.test2,result_compare.city))
library(readxl)
result_compare_city = read_xlsx('~/datatransfer/result_compare_city.xlsx')
View(cbind(compare.test2,result_compare_city))
source("Rfile/nn_para.R")
neuralnet_para_m = neuralnet_para(train.scaled,test.scaled)
View(neuralnet_para_m)
View(neuralnet_para_m)
neuralnet_para_m
View(neuralnet_para_m[,c(1,2,4)])
View(neuralnet_para_m[,c(3),drop = F])
View(neuralnet_para_m[complete.cases(e),])
View(neuralnet_para_m[1,])
View(neuralnet_para_m[1:100,])
View(neuralnet_para_m[100:211,])
View(neuralnet_para_m[200:211,])
View(neuralnet_para_m[205:211,])
View(neuralnet_para_m[209:211,])
View(neuralnet_para_m[208:211,])
View(neuralnet_para_m[208,])
nn <- neuralnet(f,data=train.scaled,hidden = rep(18,10),linear.output=T)
pr.nn <- compute(nn,test.scaled[,-3])
pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/length(test.r)
compare.test2 = cbind(pr.nn_,test.r)
View(cbind(compare.test2,result_compare_city))
pr.nn <- compute(nn,test.scaled[,-3])
pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/length(test.r)
neuralnet_para_m = neuralnet_para(train.scaled,test.scaled)
View(neuralnet_para_m)
write.xlsx(neuralnet_para_m,'neuralnet_para_m.xlsx')
nn <- neuralnet(f,data=train.scaled,hidden = rep(12,5),linear.output=T) #9,2也是个好的选择
pr.nn <- compute(nn,test.scaled[,-3])
pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/length(test.r)
nn <- neuralnet(f,data=train.scaled,hidden = rep(12,5),act.fct = 'logistic',linear.output=T) #9,2也是个好的选择
pr.nn <- compute(nn,test.scaled[,-3])
pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/length(test.r)
nn <- neuralnet(f,data=train.scaled,hidden = rep(12,5),act.fct = 'logistic',linear.output=T) #9,2也是个好的选择
pr.nn <- compute(nn,test.scaled[,-3])
pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/length(test.r)
compare.test2 = cbind(pr.nn_,test.r)
View(cbind(compare.test2,result_compare_city))
pr.nn <- compute(nn,test.scaled[,-3])
pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/length(test.r)
MSE.nn
nn <- neuralnet(f,data=train.scaled,hidden = rep(12,5),act.fct = 'logistic',linear.output=T) #9,2也是个好的选择
pr.nn <- compute(nn,test.scaled[,-3])
pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/length(test.r)
library(RSNNS)
library(RSNNS)
?RSNNS
help(package = RSNNS)
modelElman <- elman(inputs, outputs, size=8, learnFuncParams=c(0.1), maxit=1000)
modelElman <- elman(inputs, outputs, size=c(8,9), learnFuncParams=c(0.1), maxit=1000)
rent.model = mlp(new_trainset[,-3], new_trainset[,3], size=50, learnFunc="Quickprop",
maxit=100,
inputsTest=new_testset[,-3], targetsTest=new_testset[,3])
rent.predict = predict(rent.model,new_testset[,-3])
rent.model = mlp(new_trainset[,-3], new_trainset[,3], size=c(5,5,5), learnFunc="Quickprop",
maxit=100,
inputsTest=new_testset[,-3], targetsTest=new_testset[,3])
rent.predict = predict(rent.model,new_testset[,-3])
View(rent.predict)
rent.model = mlp(new_trainset[,-3], new_trainset[,3], size=c(5,5,5), learnFunc="Quickprop",
maxit=100,
inputsTest=new_testset[,-3], targetsTest=new_testset[,3],outputActFunc = 'linear')
rent.predict = predict(rent.model,new_testset[,-3])
rent.model = mlp(new_trainset[,-3], new_trainset[,3], size=c(5), learnFunc="Quickprop",
maxit=100,
inputsTest=new_testset[,-3], targetsTest=new_testset[,3],outputActFunc = 'linear')
rent.predict = predict(rent.model,new_testset[,-3])
library(caret)
?caret
help(package = caret)
iris[,5]
?normTrainingAndTestSet
View(new_trainset)
elman
?elman
Var1 <- runif(50, 0, 100)
sqrt.data <- data.frame(Var1, Sqrt=sqrt(Var1))
print(net.sqrt <- neuralnet(Sqrt~Var1,  sqrt.data, hidden=10, threshold=0.01))
library(neuralnet)
print(net.sqrt <- neuralnet(Sqrt~Var1,  sqrt.data, hidden=10, threshold=0.01))
Var1
compute(net.sqrt, (1:10)^2)$net.result
print(net.sqrt <- neuralnet(Sqrt~.,  sqrt.data, hidden=10, threshold=0.01))
?neuralnet
print(net.sqrt <- neuralnet(Sqrt~., data = sqrt.data, hidden=10, threshold=0.01))
View(new_trainset)
new_traindata = cbind(rent = new_trainset$rent,new_train[,-3])
new_res <- nnet(rent~.,data=new_traindata,
size=35, linout=TRUE, skip=TRUE, MaxNWts=1000000, trace=FALSE, maxit=1000000)
library(nnet)
new_res <- nnet(rent~.,data=new_traindata,
size=35, linout=TRUE, skip=TRUE, MaxNWts=1000000, trace=FALSE, maxit=1000000)
pred.nnet.new = predict(new_res, new_train[,c(-3)])
pred.test.new = predict(new_res,new_test[,c(-3)])
compare.train.new = cbind(pred.nnet.new,new_trainset$rent)
compare.test.new = cbind(pred.test.new,new_testset$rent)
View(compare.test.new)
e.test = crossprod(pred.test.new - unlist(new_testset$rent))/nrow(new_testset)
View(e.test)
13718915573693
nchar(13718915573693)
nn_para()
nn_para
new_res <- nnet(rent~.,data=new_traindata,
size=19, linout=TRUE, skip=TRUE, MaxNWts=1000000, trace=FALSE, maxit=1000)
pred.nnet.new = predict(new_res,new_train[,c(-3)])
pred.test.new = predict(new_res,new_test[,c(-3)])
compare.train.new = cbind(pred.nnet.new,new_trainset$rent)
compare.test.new = cbind(pred.test.new,new_testset$rent)
e.test = crossprod(pred.test.new - unlist(new_testset$rent))/nrow(new_testset)
View(e.test)
new_res <- nnet(rent~.,data=new_traindata,
size=19, linout=TRUE, skip=TRUE, MaxNWts=1000000, trace=FALSE, maxit=1000)
pred.nnet.new = predict(new_res,new_train[,c(-3)])
pred.test.new = predict(new_res,new_test[,c(-3)])
pred.test.new = predict(new_res,new_test[,c(-3)])
compare.train.new = cbind(pred.nnet.new,new_trainset$rent)
compare.test.new = cbind(pred.test.new,new_testset$rent)
e.test = crossprod(pred.test.new - unlist(new_testset$rent))/nrow(new_testset)
View(new_traindata)
View(new_trainset)
nrow(new_test)
nrow(new_testset)
View(new_test)
View(new_train)
dt2 = nn_para(new_trainset,new_testset)
View(dt2)
nchar(16312918820079)
View(new_trainset)
View(new_traindata)
View(new_test)
View(new_test)
new_testdata = cbind(rent = new_testset$rent,new_test[,-3])
dt_scale = nn_para(new_traindata,new_testdata) #try paras with scaled data
View(new_traindata)
str(new_traindata)
str(new_testdata)
View(new_train[,-"rent"])
View(new_train[,-rent])
nn_para = function(traindata,testdata) {
min = Inf
v = vector(mode = "numeric",length = 0)
dt = data.table(cost = v,size = v,iter = v)
for (size in 5:35) {
for (maxit in c(1e+1,1e+2,1e+3,1e+4,1e+5,1e+6,1e+7)) {
res <- nnet(
f,data = traindata,
size = size, linout = TRUE, skip = TRUE, MaxNWts = 100000, trace =
FALSE, maxit = 1000000
)
pred.nnet = predict(res,traindata[,-which(names(traindata) %in% c("rent"))])
pred.test = predict(res,testdata[,-which(names(testdata) %in% c("rent"))])
e.test = crossprod(pred.test - unlist(new_testset$rent)) / nrow(new_testset)
temp.dt = data.table(cost = e.test[1,1],size = size,iter = maxit)
dt = rbind(dt,temp.dt)
if (e.test[1,1] < min) {
min = e.test[1,1]
bestsize = size
bestiter = maxit
}
}
}
temp.dt = data.table(cost = min,size = bestsize,iter = bestiter)
dt = rbind(dt,temp.dt)
}
new_testdata = cbind(rent = new_testset$rent,new_test[,-3])
dt_scale = nn_para(new_traindata,new_testdata) #try paras with scaled data
View(dt_scale)
nchar(8619501038711)
nn_para = function(traindata,testdata) {
min = Inf
v = vector(mode = "numeric",length = 0)
dt = data.table(cost = v,size = v,iter = v)
for (size in 5:35) {
for (maxit in c(1e+1,1e+2,1e+3,1e+4,1e+5,1e+6,1e+7)) {
res <- nnet(
f,data = traindata,
size = size, linout = TRUE, skip = TRUE, MaxNWts = 100000, trace =
FALSE, maxit = maxit
)
pred.nnet = predict(res,traindata[,-which(names(traindata) %in% c("rent"))])
pred.test = predict(res,testdata[,-which(names(testdata) %in% c("rent"))])
e.test = crossprod(pred.test - unlist(new_testset$rent)) / nrow(new_testset)
temp.dt = data.table(cost = e.test[1,1],size = size,iter = maxit)
dt = rbind(dt,temp.dt)
if (e.test[1,1] < min) {
min = e.test[1,1]
bestsize = size
bestiter = maxit
}
}
}
temp.dt = data.table(cost = min,size = bestsize,iter = bestiter)
dt = rbind(dt,temp.dt)
}
dt_scale = nn_para(new_traindata,new_testdata) #try paras with scaled data
View(dt_scale)
new_res <- nnet(rent~.,data=new_traindata,
size=17, linout=TRUE, skip=TRUE, MaxNWts=1000000, trace=FALSE, maxit=10)
pred.nnet.new = predict(new_res,new_train[,c(-3)])
pred.test.new = predict(new_res,new_test[,c(-3)])
compare.train.new = cbind(pred.nnet.new,new_trainset$rent)
compare.test.new = cbind(pred.test.new,new_testset$rent)
e.test = crossprod(pred.test.new - unlist(new_testset$rent))/nrow(new_testset)
View(e.test)
View(compare.test.new)
View(e.test)
vignette(package="nnet")
vignette(package="neuralnet")
vignette(package="RSNNS")
create_progress_bar
View(train.scaled)
?scale
View(new_trainset)
nn <- neuralnet(f,data=train.scaled,hidden = rep(12,5),act.fct = 'logistic',linear.output=T) #9,2也是个好的选择
pr.nn <- compute(nn,test.scaled[,-3])
pr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent
test.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent
MSE.nn <- sum((test.r - pr.nn_)^2)/length(test.r)
compare.test2 = cbind(pr.nn_,test.r)
View(compare.test2)
MSE.nn
nchar(3576475938099)
neuralnet_para_m = neuralnet_para(train.scaled,test.scaled)
View(neuralnet_para_m)
neuralnet_para_table = nn_para_percent(train.scaled,test.scaled)
identical(names(new_trainset),names(train.scaled))
View(new_trainset)
View(compare.test2)
View(test.scaled)

{
    "collab_server" : "",
    "contents" : "library(neuralnet)\n# n <- names(new_trainset)\n# f <- as.formula(paste(\"rent ~\", paste(n[!n %in% \"rent\"], collapse = \" + \")))\n# maxs <- apply(new_trainset, 2, max) \n# mins <- apply(new_trainset, 2, min)\n# train.scaled = as.data.frame(scale(new_trainset, center = mins, scale = maxs - mins))\n# test.scaled = as.data.frame(scale(new_testset,center = mins,scale = maxs - mins))\n# max_rent = maxs[\"rent\"]\n# min_rent = mins[\"rent\"]\n\nneuralnet_para = function(trainset,testset){\n  n <- names(trainset)\n  f <- as.formula(paste(\"rent ~\", paste(n[!n %in% \"rent\"], collapse = \" + \")))\n  maxs <- apply(trainset, 2, max) \n  mins <- apply(trainset, 2, min)\n  trainset = as.data.frame(scale(trainset, center = mins, scale = maxs - mins))\n  testset = as.data.frame(scale(testset,center = mins,scale = maxs - mins))\n  max_rent = maxs[\"rent\"]\n  min_rent = mins[\"rent\"]\n  k = 15\n  library(plyr) \n  pbar <- create_progress_bar('text')\n  pbar$init(k)\n  min = Inf\n  v = vector(mode = 'numeric',length = 0)\n  c = vector(mode = 'character',length = 0)\n  dt = data.table(size = v,depth = v,e = v,actfun = c)\n  rentind = which(names(trainset)==\"rent\")\n  for(depth in 1:k){\n    for(size in seq(3,21,by = 3)){\n      for(actfun in c('logistic','tanh')){\n        neural.model = neuralnet(f,data = trainset,hidden = rep(size,depth),act.fct = actfun)\n        neural.pred = compute(neural.model,testset[,-rentind])$net.result\n        neural.pred <- neural.pred*(max_rent-min_rent)+min_rent\n        test.r <- (testset$rent)*(max_rent-min_rent)+min_rent\n        e <- sum((test.r - neural.pred)^2)/length(test.r)\n        temp.dt = data.table(size = size,depth = depth,e = e,actfun = actfun)\n        dt = rbind(dt,temp.dt)\n        if(e<min){\n          bestsize = size\n          bestdepth = depth\n          bestactfun = actfun\n          min = e\n        }\n      }\n    }\n    pbar$step()\n  }\n  min.dt = data.table(size = bestsize,depth = bestdepth,e = min,actfun = bestactfun)\n  dt = rbind(dt,min.dt)\n  return(dt)\n}\n\nnn_para_percent = function(trainset,testset){\n  minavge = Inf\n  mine2 = Inf\n  minmax = Inf\n  v = vector(mode = 'numeric',length = 0)\n  c = vector(mode = 'character',length = 0)\n  dt = data.table(sigma = v,C = v,e = v,kernel = c,avge = v,maxe = v,sde = v)\n  rentind = which(names(trainset)==\"rent\")\n  for(index in -5:10){\n    sigma = 0.125 * 2^index\n    for(i in -1:4){\n      C = 1 * 10^i\n      for(kernel in c('polynomial','radial','sigmoid')){\n        svm.model = svm(rent~.,data = trainset,gamma = sigma,cost = C,kernel = kernel)\n        svm.pred = predict(svm.model,testset[,-rentind])\n        e = (svm.pred - unlist(testset[,rentind]))/unlist(testset[,rentind])\n        crosse = (crossprod(svm.pred - unlist(testset[,rentind]))/nrow(testset))[1,1]\n        avge = sum(abs(e))/nrow(testset)\n        maxe = max(e)\n        sde = sd(e)\n        temp.dt = data.table(sigma = sigma,C = C,e = crosse,kernel = kernel,avge = avge,maxe = maxe,sde = sde)\n        dt = rbind(dt,temp.dt)\n        if(abs(avge)<abs(minavge)){\n          bestsigma = sigma\n          bestC = C\n          bestKernal = kernel\n          pickedmax = maxe\n          pickedsd = sde\n          mine = crosse\n          minavge = avge\n        }\n        if(crosse<mine2){\n          bestsigma2 = sigma\n          bestC2 = C\n          bestKernal2 = kernel\n          pickedmax2 = maxe\n          pickedsd2 = sde\n          mine2 = crosse\n          minavge2 = avge\n        }\n        if(maxe<minmax){\n          bestsigmamax = sigma\n          bestCmax = C\n          bestKernalmax = kernel\n          minmax = maxe\n          pickedsdmax = sde\n          minemax = crosse\n          minavgemax = avge\n        }\n        \n      }\n    }\n  }\n  min.dt = data.table(sigma = bestsigma,C = bestC,e = mine,kernel = bestKernal,avge = minavge,maxe = pickedmax,sde = pickedsd)\n  min.cross.dt = data.table(sigma = bestsigma2,C = bestC2,e = mine2,kernel = bestKernal2,avge = minavge2,maxe = pickedmax2,sde = pickedsd2)\n  min.max.dt = data.table(sigma = bestsigmamax,C = bestCmax,e = minemax,kernel = bestKernalmax,avge = minavgemax,maxe = minmax,sde = pickedsdmax)\n  dt = rbind(dt,min.dt,min.cross.dt,min.max.dt)\n  return(dt)\n} ",
    "created" : 1502864136941.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "53|45|111|0|\n",
    "hash" : "3106848347",
    "id" : "757082A4",
    "lastKnownWriteTime" : 1510649262,
    "last_content_update" : 1510649262396,
    "path" : "~/R_Projects/neuralNetwork/Rfile/nn_para.R",
    "project_path" : "Rfile/nn_para.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
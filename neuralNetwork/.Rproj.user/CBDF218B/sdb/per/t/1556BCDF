{
    "collab_server" : "",
    "contents" : "library(\"neuralnet\")\n\n# rp = rpart(rent~.,data = new_trainset,control = rpart.control(cp = 0.01,minsplit = 6, minbucket = round(6/3)),\n#            parms = list(prior = c(.65,.35), split = \"gini\"),method = \"anova\")\n# n <- names(dt)\n# f <- as.formula(paste(\"y ~\", paste(n[!n %in% \"y\"], collapse = \" + \")))\n\nf <- reformulate(setdiff(colnames(new_trainset), \"rent\"), response=\"rent\")\nf2 = rent~sale+area\nnn2 = neuralnet(f2,data = traindata,hidden = 15,lifesign = \"full\",threshold = 300000000,stepmax = 1e+7,algorithm = \"rprop+\",linear.output = TRUE)\nnn2.cont = neuralnet(f2,data = traindata,hidden = 15 ,lifesign = \"full\", threshold = 100000000,\n                     stepmax = 1e+7,algorithm = \"rprop+\",linear.output = TRUE,startweights = nn2$weights)\n\npred2 = compute(nn2,scale(new_testset[,c(2,5)]))$net.result\n\n\npred2 = compute(nn2,new_testset[,c(2,5)])$net.result\npred.train =compute(nn2,traindata[,c(2,5)])$net.result\n\nnn3 = neuralnet(Sqrt~Var1,sqrt.data,hidden = 15,lifesign = \"full\",threshold = 0.01,algorithm = \"rprop+\")\n\nnn <- neuralnet(f, data=new_trainset, hidden=20,threshold = 492000000,startweights = rnorm(20),lifesign = \"full\",algorithm = \"sag\")\nnn <- neuralnet(f, data=new_trainset, hidden=8,threshold = 1,startweights = initweight,lifesign = \"full\",algorithm = \"slr\")\n\nset.seed(1)\ninitweight = rnorm(1000)\n\npred = compute(nn,new_testset[,-3])\npred.train = prediction(nn)\n491975411\n492675470.8\nplot(nn)\ngwplot(nn)\nconfidence.interval(nn)\nprediction(nn)\n\nVar1 <- runif(50, 0, 100) \nsqrt.data <- data.frame(Var1, Sqrt=sqrt(Var1))\nprint(net.sqrt <- neuralnet(Sqrt~Var1, data = sqrt.data, hidden=10, threshold=0.01))\ncompute(net.sqrt, (1:10)^2)$net.result\n\n# data(infert, package=\"datasets\")\n# print(net.infert <- neuralnet(case~parity+induced+spontaneous, infert, \n#                               err.fct=\"ce\", linear.output=FALSE, likelihood=TRUE))\n\nscaled.dat <- scale(new_trainset)\nlibrary(standardize)\nnew_trainset_sd = standardize(f, data=new_trainset)\ntraindata = data.frame(rent = new_trainset$rent,new_trainset_sd$data[,-1])\nnn <- neuralnet(f, data=traindata, hidden=12,threshold = 489262279,lifesign = \"full\",algorithm = \"slr\")\npred = compute(nn,new_testset[,-3])$net.result\n\nset.seed(500)\nlibrary(MASS)\ndata <- Boston\n\napply(data,2,function(x) sum(is.na(x)))\n\nindex <- sample(1:nrow(data),round(0.75*nrow(data)))\ntrain <- data[index,]\ntest <- data[-index,]\nlm.fit <- glm(medv~., data=train)\nsummary(lm.fit)\npr.lm <- predict(lm.fit,test)\nMSE.lm <- sum((pr.lm - test$medv)^2)/nrow(test)\n\n#scale for preparation of neural network\nmaxs <- apply(data, 2, max) \nmins <- apply(data, 2, min)\nscaled <- as.data.frame(scale(data, center = mins, scale = maxs - mins))\ntrain_ <- scaled[index,]\ntest_ <- scaled[-index,]\n\nlibrary(neuralnet)\nn <- names(train_)\nf <- as.formula(paste(\"medv ~\", paste(n[!n %in% \"medv\"], collapse = \" + \")))\nnn <- neuralnet(f,data=train_,hidden=c(5,3),linear.output=T)\n\nplot(nn)\n\npr.nn <- compute(nn,test_[,1:13])\npr.nn_ <- pr.nn$net.result*(max(data$medv)-min(data$medv))+min(data$medv)\ntest.r <- (test_$medv)*(max(data$medv)-min(data$medv))+min(data$medv)\nMSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test_)\n\nprint(paste(MSE.lm,MSE.nn))\n\npar(mfrow=c(1,2))\nplot(test$medv,pr.nn_,col='red',main='Real vs predicted NN',pch=18,cex=0.7)\nabline(0,1,lwd=2)\nlegend('bottomright',legend='NN',pch=18,col='red', bty='n')\nplot(test$medv,pr.lm,col='blue',main='Real vs predicted lm',pch=18, cex=0.7)\nabline(0,1,lwd=2)\nlegend('bottomright',legend='LM',pch=18,col='blue', bty='n', cex=.95)\n\nplot(test$medv,pr.nn_,col='red',main='Real vs predicted NN',pch=18,cex=0.7)\npoints(test$medv,pr.lm,col='blue',pch=18,cex=0.7)\nabline(0,1,lwd=2)\nlegend('bottomright',legend=c('NN','LM'),pch=18,col=c('red','blue'))\n\nlibrary(boot)\nset.seed(200)\nlm.fit <- glm(medv~.,data=data)\ncv.glm(data,lm.fit,K=10)$delta[1]\n\nset.seed(450)\ncv.error <- NULL\nk <- 10\n\nlibrary(plyr) \npbar <- create_progress_bar('text')\npbar$init(k)\n\nfor(i in 1:k){\n  index <- sample(1:nrow(data),round(0.9*nrow(data)))\n  train.cv <- scaled[index,]\n  test.cv <- scaled[-index,]\n  nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)\n  pr.nn <- compute(nn,test.cv[,1:13])\n  pr.nn <- pr.nn$net.result*(max(data$medv)-min(data$medv))+min(data$medv)\n  test.cv.r <- (test.cv$medv)*(max(data$medv)-min(data$medv))+min(data$medv)\n  cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)\n  pbar$step()\n}\n\nmean(cv.error)\n\nboxplot(cv.error,xlab='MSE CV',col='cyan',\n        border='blue',names='CV error (MSE)',\n        main='CV error (MSE) for NN',horizontal=TRUE)\n\n#scale for preparation of neural network\n#new_trainset is the original train set,new_testset is the original test set \nmaxs <- apply(new_trainset, 2, max) \nmins <- apply(new_trainset, 2, min)\ntrain.scaled = as.data.frame(scale(new_trainset, center = mins, scale = maxs - mins))\ntest.scaled = as.data.frame(scale(new_testset,center = mins,scale = maxs - mins))\nmax_rent = maxs[\"rent\"]\nmin_rent = mins[\"rent\"]\n\nlibrary(neuralnet)\nn <- names(train.scaled)\nf <- as.formula(paste(\"rent ~\", paste(n[!n %in% \"rent\"], collapse = \" + \")))\n\nsource(\"Rfile/nn_para.R\")\nneuralnet_para_m = neuralnet_para(train.scaled,test.scaled)\n# neuralnet_para_table = nn_para_percent(train.scaled,test.scaled)\nnn <- neuralnet(f,data=train.scaled,hidden = rep(12,5),act.fct = 'logistic',linear.output=T) #9,2也是个好的选择\npr.nn <- compute(nn,test.scaled[,-3])\npr.nn_ <- pr.nn$net.result*(max_rent-min_rent)+min_rent\ntest.r <- (test.scaled$rent)*(max_rent-min_rent)+min_rent\nMSE.nn <- sum((test.r - pr.nn_)^2)/length(test.r)\ncompare.test2 = cbind(pr.nn_,test.r)\n",
    "created" : 1501813391723.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1496588831",
    "id" : "1556BCDF",
    "lastKnownWriteTime" : 1510281469,
    "last_content_update" : 1510281469840,
    "path" : "~/R_Projects/neuralNetwork/Rfile/neuralnet.R",
    "project_path" : "Rfile/neuralnet.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
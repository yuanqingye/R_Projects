}
brl <<- brl
return(prunedH)
}
calcConf(c("主APP首页", "商场主页"),H,datas_copy[1:100],brl)
freqSet = c("主APP首页", "商场主页")
datas[sapply(datas,setequal,freqSet),]
sapply(datas,setequal,freqSet)
datas[sapply(datas,setequal,freqSet)]
calcConf = function(freqSet, H, supportData, brl, minConf = 0.7) {
prunedH = list()
i = 1
for (conseq in H) {
conf = supportData[sapply(supportData,setequal,freqSet)] / supportData[sapply(supportData,setequal,setdiff(freqSet,conseq))]
if (conf >= minConf)
print(paste0(setdiff(freqSet,conseq), '-->', conseq, 'conf:', conf))
rbind(brl,(data.frame(freqSet - conseq, conseq, conf)))
prunedH[[i]] = conseq
#   list(prunedH,list(conseq))
i = i + 1
}
brl <<- brl
return(prunedH)
}
calcConf(c("主APP首页", "商场主页"),H,datas_copy[1:100],brl)
length(datas[sapply(datas,setequal,freqSet)])
calcConf = function(freqSet, H, supportData, brl, minConf = 0.7) {
prunedH = list()
i = 1
for (conseq in H) {
conf = length(supportData[sapply(supportData,setequal,freqSet)]) / length(supportData[sapply(supportData,setequal,setdiff(freqSet,conseq))])
if (conf >= minConf)
print(paste0(setdiff(freqSet,conseq), '-->', conseq, 'conf:', conf))
rbind(brl,(data.frame(freqSet - conseq, conseq, conf)))
prunedH[[i]] = conseq
#   list(prunedH,list(conseq))
i = i + 1
}
brl <<- brl
return(prunedH)
}
calcConf(c("主APP首页", "商场主页"),H,datas_copy[1:100],brl)
brl = data.frame(B = list(),A = list(),conf = vector(mode = numeric))
brl = data.frame(B = list(),A = list(),conf = vector(mode = 'numeric'))
calcConf(c("主APP首页", "商场主页"),H,datas_copy[1:100],brl)
calcConf = function(freqSet, H, supportData, brl, minConf = 0.7) {
prunedH = list()
i = 1
for (conseq in H) {
conf = length(supportData[sapply(supportData,setequal,freqSet)]) / length(supportData[sapply(supportData,setequal,setdiff(freqSet,conseq))])
if (conf >= minConf)
print(paste0(setdiff(freqSet,conseq), '-->', conseq, 'conf:', conf))
rbind(brl,(data.frame(setdiff(freqSet,conseq), conseq, conf)))
prunedH[[i]] = conseq
#   list(prunedH,list(conseq))
i = i + 1
}
brl <<- brl
return(prunedH)
}
calcConf(c("主APP首页", "商场主页"),H,datas_copy[1:100],brl)
datas[sapply(datas,setequal,setdiff(freqSet,conseq))]
H
datas[sapply(datas,setequal,setdiff(freqSet,H[[1]]))]
datas[sapply(datas,setequal,setdiff(freqSet,H[[2]]))]
sapply(datas,setdiff,setdiff(freqSet,H[[2]]))
install.packages('miscTools')
library(miscTools)
A
A = matrix(data = c('a','b','c','d',ncol = 2, nrow = 2))
A = matrix(data = c('a','b','c','d'),ncol = 2, nrow = 2)
View(A)
insertRow(A,2,v=c('x','y'))
A
?with
head(airquality)
transform(airquality,Ozone = -Ozone)
head(airquality)
?airquality
H
brl
brl = data.frame(restset=list(),aimset = list(),conf = vector(mode = 'numeric'))
brl
brl = data.table(restset=list(),aimset = list(),conf = vector(mode = 'numeric'))
brl
summary(datas)
calcConf = function(freqSet, H, supportData, brl, minConf = 0.7) {
#   prunedH = list()
i = 1
for (conseq in H) {
conf = length(supportData[sapply(supportData,setequal,freqSet)]) / length(supportData[sapply(supportData,setequal,setdiff(freqSet,conseq))])
if (conf >= minConf)
print(paste0(setdiff(freqSet,conseq), '-->', conseq, 'conf:', conf))
rbind(brl,(data.frame(setdiff(freqSet,conseq), conseq, conf)))
prunedH[[i]] = conseq
i = i + 1
}
#   brl <<- brl
return(brl)
}
?scan
source('~/Rfile/toolfunc.R')
source2('./Rfile/apriori.R',113,126)
?"source"
scan('./Rfile/apriori.R', what=character(), skip=112, nlines=14, sep='\n')
paste(c(1,2,3))
paste(1:1000)
file.lines = scan('./Rfile/apriori.R', what=character(), skip=112, nlines=14, sep='\n')
file.lines.collapsed = paste(file.lines,collapse = '\n')
file.lines.collapsed
source2('./Rfile/apriori.R',128,130)
new_function
new_function()
rm(new_function())
rm(new_function)
brl = calcConf(freqSet,H,datas,brl)
data.frame(c(1,2,3),c(4,5),0.1)
data.frame(list(c(1,2,3)),list(c(4,5)),0.1)
data.table(list(c(1,2,3)),list(c(4,5)),0.1)
data.frame(c(1,2,3),c(4,5),0.1)
data.table(c(1,2,3),c(4,5),0.1)
source2(file = './Rfile/apriori.R',110,126)
source2(file = './Rfile/apriori.R',110,126)
brl = calcConf(freqSet,H,datas,brl)
supportData
source2(file = './Rfile/apriori.R',110,126)
source3(file = './Rfile/apriori.R',110,126)
source('~/Rfile/toolfunc.R')
source3(file = './Rfile/apriori.R',110,126)
source2(file = './Rfile/apriori.R',110,126)
source3(file = './Rfile/apriori.R',110,126)
traceback()
debugSource(textConnection(file.lines.collapsed), ...)
debugSource(textConnection(file.lines.collapsed))
debugSource(file.lines.collapsed)
?debugSource
debugSource
debugSource('~/R_Projects/path_analysis_0518/Rfile/apriori.R', encoding = 'GB2312')
brl = calcConf(freqSet,H,datas,brl)
conf
data.table(list(setdiff(freqSet,conseq)), list(conseq), conf)
list(setdiff(freqSet,conseq))
list(conseq)
brl = calcConf(freqSet,H,datas,brl)
brl = calcConf(freqSet,H,datas,brl)
brl = rbind(brl,(data.table(list(setdiff(freqSet,conseq)), list(conseq), conf)))
data.table(list(setdiff(freqSet,conseq)), list(conseq), conf)
c(1,2,3)==c(2,2,3)
H = singleset(c("主APP首页", "商场主页"))
freqSet = c("主APP首页", "商场主页")
brl = data.table(restset=list(),aimset = list(),conf = vector(mode = 'numeric'))
calcConf = function(freqSet, H, supportData, brl, minConf = 0.7) {
#   prunedH = list()
i = 1
for (conseq in H) {
conf = length(supportData[sapply(supportData,intersect,freqSet)==freqSet]) / length(supportData[sapply(supportData,intersect,setdiff(freqSet,conseq))==setdiff(freqSet,conseq)])
if (conf >= minConf)
print(paste0(setdiff(freqSet,conseq), '-->', conseq, 'conf:', conf))
brl = rbind(brl,(data.table(list(setdiff(freqSet,conseq)), list(conseq), conf)))
#     prunedH[[i]] = conseq
i = i + 1
}
#   brl <<- brl
return(brl)
}
brl = calcConf(freqSet,H,datas,brl)
brl
brl = rbind(brl,data.table(list(c(1,2,3)),list(4,5,6),0.05))
brl = rbind(brl,data.table(list(c(1,2,3)),list(c(4,5,6)),0.05))
data.table(list(c(1,2,3)),list(c(4,5,6)),0.05)
rbind(data.table(list(c(1,2,3)),list(c(4,5,6)),0.05),data.table(list(c(1,2,3)),list(c(4,5,6)),0.05))
rbind(data.table(list(c(1,2,3)),list(c(4,5,6)),0.05),data.table(restset=list(),aimset = list(),conf = vector(mode = 'numeric')))
rbind(data.table(name=list(),value = vector(mode = 'integer'),support = vector(mode = 'numeric')),data.table(list(c(1,2,3)),2,1.2))
> rbind(data.table(restset = list(c(1,2,3)),aimset = list(c(4,5,6)),conf=0.05),data.table(restset=list(),aimset = list(),conf = vector(mode = 'numeric')))
rbind(data.table(restset = list(c(1,2,3)),aimset = list(c(4,5,6)),conf=0.05),data.table(restset=list(),aimset = list(),conf = vector(mode = 'numeric')))
source2('./Rfile/apriori.R',110,126)
brl = calcConf(freqSet,H,datas,brl)
for(conseq in H){print(conseq)}
brl
?assign
H1 = c(1,2,3,4)
H1[[1]]
H1[[2]]
source2('./Rfile/apriori.R',100,152)
source2('./Rfile/apriori.R',100,152)
source2('./Rfile/apriori.R',137,153)
source2('./Rfile/apriori.R',100,153)
generateRules(H,datas,0.1)
length(H)
H
support.data = apriori2(datas)
View(support.data)
generateRules(support.data$name,datas,0.1)
source2('./Rfile.R/apriori.R',100,154)
source2('./Rfile/apriori.R',100,154)
generateRules(support.data$name,datas,0.1)
source2('./Rfile/apriori.R',100,154)
source2('./Rfile/apriori.R',100,155)
generateRules(support.data$name,datas,0.1)
source2('./Rfile/apriori.R',100,155)
generateRules(support.data$name,datas,0.1)
source2('./Rfile/apriori.R',100,155)
generateRules(support.data$name,datas,0.1)
source2('./Rfile/apriori.R',100,155)
generateRules(support.data$name,datas,0.1)
source2('./Rfile/apriori.R',100,155)
generateRules(support.data$name,datas,0.1)
debugSource('~/R_Projects/path_analysis_0518/Rfile/apriori.R', encoding = 'GB2312')
generateRules(support.data$name,datas,0.1)
H
freqSet
Hmpl
m
H
H1
L
freqSet
H1
h
H
generateC(H, m + 1)
Hmpl
length(freqSet)>(m+1)
length(Hmpl)
generateRules(support.data$name,datas,0.1)
H1
L
freqSet
H1
calcConf(freqSet, H1, supportData, bigRuleList, minConf)
ruleList
generateRules(support.data$name,datas,0.1)
source2('./Rfile/apriori.R',100,155)
source2('./Rfile/apriori.R',100,156)
generateRules(support.data$name,datas,0.1)
View(ruleList)
support.data = apriori2(datas_copy[300])
View(support.data)
support.data = apriori2(datas)
datas_copy[300]
support.data = apriori2(datas_copy[1:300])
generateRules(support.data$name,datas_copy[1:300],0.1)
datas_copy
datas_copy[1:300]
View(ruleList)
ruleList
ruleList$aimset
bigRuleList = list()
calcConf = function(freqSet, H, supportData, brl, minConf = 0.7) {
prunedH = list()
i = 1
for (conseq in H) {
conf = length(supportData[sapply(supportData,intersect,freqSet)==freqSet]) / length(supportData[sapply(supportData,intersect,setdiff(freqSet,conseq))==setdiff(freqSet,conseq)])
if (conf >= minConf)
print(paste0(setdiff(freqSet,conseq), '-->', conseq, 'conf:', conf))
brl = rbind(brl,(data.table(restset = list(setdiff(freqSet,conseq)), aimset = list(conseq), conf = conf)))
prunedH[[i]] = conseq
i = i + 1
}
assign('bigRuleList',brl,envir = .GlobalEnv)
return(prunedH)
}
generateRules(support.data$name,datas_copy[1:300],0.1)
View(bigRuleList)
?assign
?as.environment
search()
debugSource('~/R_Projects/path_analysis_0518/Rfile/apriori.R', encoding = 'GB2312')
generateRules(support.data$name,datas_copy[1:300],0.1)
calcConf = function(freqSet, H, supportData, brl, minConf = 0.7) {
prunedH = list()
i = 1
for (conseq in H) {
conf = length(supportData[sapply(supportData,intersect,freqSet)==freqSet]) / length(supportData[sapply(supportData,intersect,setdiff(freqSet,conseq))==setdiff(freqSet,conseq)])
if (conf >= minConf)
print(paste0(setdiff(freqSet,conseq), '-->', conseq, 'conf:', conf))
brl = rbind(brl,(data.table(restset = list(setdiff(freqSet,conseq)), aimset = list(conseq), conf = conf)))
prunedH[[i]] = conseq
i = i + 1
}
assign('bigRuleList',brl,pos = 'generateRules')
return(prunedH)
}
generateRules(support.data$name,datas_copy[1:300],0.1)
calcConf = function(freqSet, H, supportData, brl, minConf = 0.7) {
prunedH = list()
i = 1
for (conseq in H) {
conf = length(supportData[sapply(supportData,intersect,freqSet)==freqSet]) / length(supportData[sapply(supportData,intersect,setdiff(freqSet,conseq))==setdiff(freqSet,conseq)])
if (conf >= minConf)
print(paste0(setdiff(freqSet,conseq), '-->', conseq, 'conf:', conf))
brl = rbind(brl,(data.table(restset = list(setdiff(freqSet,conseq)), aimset = list(conseq), conf = conf)))
prunedH[[i]] = conseq
i = i + 1
}
assign('bigRuleList',brl,pos = 'generateRules')
return(prunedH)
}
generateRules(support.data$name,datas_copy[1:300],0.1)
debugSource('~/R_Projects/path_analysis_0518/Rfile/apriori.R', encoding = 'GB2312')
generateRules(support.data$name,datas_copy[1:300],0.1)
search()
ls()
helloworld = 'heihei'
helloworld = 'heihei'
helloworld = function(){
helloworld = 'buenos dias'
print(helloworld)
}
helloworld()
helloworld
helloword = 'heihei'
helloworld = function(){
helloword = 'buenos dias'
print(helloword)
}
helloworld()
helloword()
helloword
calcConf = function(freqSet, H, supportData, brl, minConf = 0.2) {
prunedH = list()
i = 1
for (conseq in H) {
conf = length(supportData[sapply(supportData,intersect,freqSet)==freqSet]) / length(supportData[sapply(supportData,intersect,setdiff(freqSet,conseq))==setdiff(freqSet,conseq)])
if (conf >= minConf)
print(paste0(setdiff(freqSet,conseq), '-->', conseq, 'conf:', conf))
brl = rbind(brl,(data.table(restset = list(setdiff(freqSet,conseq)), aimset = list(conseq), conf = conf)))
prunedH[[i]] = conseq
i = i + 1
}
#   assign('bigRuleList',brl,pos = 'generateRules')
return(list(prunedH,brl))
}
generateRules = function(L, supportData, minConf = 0.2) {
brl = data.table(restset=list(),aimset = list(),conf = vector(mode = 'numeric'))
for (i in range(1, length(L))) {
for (freqSet in L[i]) {
H1 = freqSet
bigRuleList = rulesFromConseq(freqSet, H1, supportData, brl, minConf)
}
}
return(bigRuleList)
}
rulesFromConseq = function(freqSet, H, supportData, brl, minConf=0.2){
m = length(H[[1]])
while (length(freqSet) > (m)){
Hlist = calcConf(freqSet, H, supportData, brl, minConf)
H = Hlist[[1]]
brl = Hlist[[2]]
if (length(H) > 1)
H = generateC(H, m + 1)
m = m+1
else
break
}
return(brl)
}
source2('./Rfile/apriori.R',111,161)
generateRules(support.data$name,datas_copy[1:300],0.1)
bigRuleList = generateRules(support.data$name,datas_copy[1:300],0.1)
View(bigRuleList)
freqSet
bigRuleList$aimset
calcConf = function(freqSet, H, supportData, brl, minConf = 0.2) {
prunedH = list()
i = 1
for (conseq in H) {
conf = length(supportData[sapply(supportData,intersect,freqSet)==freqSet]) / length(supportData[sapply(supportData,intersect,setdiff(freqSet,conseq))==setdiff(freqSet,conseq)])
if (conf >= minConf){
print(paste0(setdiff(freqSet,conseq), '-->', conseq, 'conf:', conf))
brl = rbind(brl,(data.table(restset = list(setdiff(freqSet,conseq)), aimset = list(conseq), conf = conf)))
prunedH[[i]] = conseq
i = i + 1}
}
#   assign('bigRuleList',brl,pos = 'generateRules')
return(list(prunedH,brl))
}
bigRuleList = generateRules(support.data$name,datas_copy[1:300],0.1)
View(bigRuleList)
generateRules = function(L, supportData, minConf = 0.2) {
brl = data.table(restset=list(),aimset = list(),conf = vector(mode = 'numeric'))
for (i in range(1, length(L))) {
for (freqSet in L[i]) {
H1 = freqSet
brl = rulesFromConseq(freqSet, H1, supportData, brl, minConf)
}
}
return(brl)
}
bigRuleList = generateRules(support.data$name,datas_copy[1:300],0.1)
source2('./Rfile/apriori.R',114,127)
?debugSource
source('~/R_Projects/path_analysis_0518/Rfile/apriori.R', encoding = 'GB2312')
bigRuleList = generateRules(support.data$name,datas_copy[1:300],0.1)
freqSet
supportData
conseq
H
conseq
freqSet
conf
supportData[sapply(supportData,intersect,freqSet)==freqSet]
length(supportData[sapply(supportData,intersect,freqSet)==freqSet])
length(supportData[sapply(supportData,intersect,setdiff(freqSet,conseq))==setdiff(freqSet,conseq)])
supportData[sapply(supportData,intersect,setdiff(freqSet,conseq))==setdiff(freqSet,conseq)]
sapply(supportData,intersect,freqSet)==freqSet
sapply(supportData,intersect,setdiff(freqSet,conseq))==setdiff(freqSet,conseq)
setdiff(freqSet,conseq)
freqSet
sapply(supportData,intersect,setdiff(freqSet,conseq))
setdiff(freqSet,conseq)
sapply(sapply(supportData,intersect,setdiff(freqSet,conseq)),setequal,setdiff(freqSet,conseq))
source('~/R_Projects/path_analysis_0518/Rfile/apriori.R', encoding = 'GB2312')
bigRuleList = generateRules(support.data$name,datas_copy[1:300],0.1)
View(bigRuleList)
bigRuleList = generateRules(support.data$name,datas_copy[1:300],0.1)
conseq
freqSet
conf
length(supportData[sapply(sapply(supportData,intersect,freqSet),setequal,freqSet)])
length(supportData[sapply(sapply(supportData,intersect,setdiff(freqSet,conseq)),setequal,setdiff(freqSet,conseq))])
brl
prunedH
conseq
conf
L
length(supportData[sapply(sapply(supportData,intersect,freqSet),setequal,freqSet)])
length(supportData[sapply(sapply(supportData,intersect,setdiff(freqSet,conseq)),setequal,setdiff(freqSet,conseq))])
conseq
setdiff(freqSet,conseq)
H
conf
conseq
setdiff(freqSet,conseq)
length(supportData[sapply(sapply(supportData,intersect,setdiff(freqSet,conseq)),setequal,setdiff(freqSet,conseq))])
length(supportData[sapply(sapply(supportData,intersect,freqSet),setequal,freqSet)])
datas_copy
View(datas_copy[1:300])
View(data.frame(datas_copy[1:300]))
View(page_view_group_unique[1:300,])
supportData[sapply(sapply(supportData,intersect,freqSet),setequal,freqSet)]
freqSet
H
M
m
H
str(H)
H$name
Hlist
debugSource('~/R_Projects/path_analysis_0518/Rfile/apriori.R', encoding = 'GB2312')
support.data$name
bigRuleList = generateRules(support.data$name,datas_copy[1:300],0.1)
L
freqSet
H1
i
L[[1]]
m
brl
freqSet
H1
freqSet
i
range(1, length(L))
m
freqSet
H
HLIST
Hlist
support.data$name
support.data$name[1]
support.data$name[15]
H
m
H
freqSet
conseq
conf
brl
setdiff(freqSet,conseq)
conseq
conseq
conf
setdiff(freqSet,conseq)
length(supportData[sapply(sapply(supportData,intersect,setdiff(freqSet,conseq)),setequal,setdiff(freqSet,conseq))])
conf
conseq
View(bigRuleList)
debugSource('~/R_Projects/path_analysis_0518/Rfile/apriori.R', encoding = 'GB2312')
bigRuleList = generateRules(support.data$name,datas_copy[1:300],0.1)
c
c
c
c
c
n
c
c
c
c
View(bigRuleList)
View(bigRuleList)
frequentsets=eclat(page_view_group_unique$page_name,parameter=list(support=0.05,maxlen=20))  #求频繁项集
?eclat
inspect(frequentsets[1:100])    #察看求得的频繁项集
inspect(sort(frequentsets,by="support")[1:100])    #根据支持度对求得的频繁项集排序并察看
rules=apriori(page_view_group_unique$page_name,parameter=list(support=0.01,confidence=0.01))    #求关联规则
summary(rules)    #察看求得的关联规则之摘要
inspect(sort(rules,by="support")[1:3])    #根据支持度对求得的关联规则子集排序并察看
y = rules
inspect(sort(y,by="support")[1:30])    #根据支持度对求得的关联规则子集排序并察看
source('R_impala.R')

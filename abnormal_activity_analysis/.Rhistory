str(iris)
?naive_bayes
iris_model_caret = train(form = Species~.,data = train_pn,method = "naive_bayes")
iris_model_caret = train(form = Species~.,data = iris,method = "naive_bayes")
iris_model_nb = naive_bayes(formula = Species~.,data = iris)
pred_caret = predict(iris_model_caret,iris)
real = iris$Species
real = iris$Species
pred_nb = predict(iris_model_nb,iris)
table(real,pred_caret)
table(real,pred_nb)
?sample
index = sample(nrow(iris),0.75*nrow(iris))
iris_train = iris[index,]
iris_test = iris[-index,]
real = iris_test$Species
iris_model_caret = train(form = Species~.,data = iris_train,method = "naive_bayes")
pred_caret = predict(iris_model_caret,iris_test)
table(real,pred_caret)
set.seed(1)
iris_model_nb = naive_bayes(formula = Species~.,data = iris_train)
pred_nb = predict(iris_model_nb,iris_test)
table(real,pred_nb)
P = ecdf(train_pn$max_stay)
?ecdf
P(500)
P(50000)
qqplot(train_pn$max_stay)
?qqplot
qqnorm(train_pn$max_stay)
qqline(train_pn$max_stay)
?qnorm
temp = qnorm(P(train_pn$max_stay))
head(temp)
qz_umid_sql
sz_umid_sql
sz_umid_sql = "select distinct u_mid from dm.dm_app_pageview_info where l_city in ('苏州','苏州市') and dt = '20171203' and path = 'z'"
sh_umid_sql = "select distinct u_mid from dm.dm_app_pageview_info where l_city in ('上海','上海市') and dt = '20171201' and path = 'z'"
source('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
dateset
str(train_set)
umid_sql = c(sz_umid_sql,sh_umid_sql)
source('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
umid_sql = c(sz_umid_sql,sh_umid_sql)
dateset = c("20171203","20171201")
temp =  get_complex_train_set(dateset = dateset,umid_sql = umid_sql)
naive_bayes_model_szsh = naive_bayes(test_formula,temp)
model_result_all = test_around_set(test_set_names = test_set_names,model_names = c("naive_bayes_model","naive_bayes_model_simp","naive_bayes_model_no_rate","naive_bayes_model_no_gps_count","naive_bayes_model_real","naive_bayes_model_real_ori","naive_bayes_model_szsh"))
View(model_result_all)
test_imp_model <- train(test_formula, data=temp, method="naive_bayes", trControl=control,
importance = T)
importance <- varImp(test_imp_model, scale=FALSE)
print(importance)
test_imp_model <- train(test_formula, data=train_pn, method="naive_bayes", trControl=control,
importance = T)
importance <- varImp(test_imp_model, scale=FALSE)
str(train_pn)
View(train_pn[!complete.cases(train_pn),])
importance <- varImp(test_imp_model, scale=FALSE)
str(temp)
as.factor(train_pn$sign)
train_pn$sign = as.factor(train_pn$sign)
test_imp_model <- train(test_formula, data=train_pn, method="naive_bayes", trControl=control,
importance = T)
importance <- varImp(test_imp_model, scale=FALSE)
str(train_pn)
str(temp)
View(train_pn[!complete.cases(train_pn),])
train_pn = data.frame(train_pn)
test_imp_model <- train(test_formula, data=train_pn, method="naive_bayes", trControl=control,
importance = T)
importance <- varImp(test_imp_model, scale=FALSE)
importance
ls(pattern = "^model\\d.")
ls(pattern = "^model(\\d){1,2}")
rm(ls(pattern = "^model(\\d){1,2}"))
?rm
rm(list = ls(pattern = "^model(\\d){1,2}"))
train_pn = train_pn[,!(names(train_pn) %in% "rate")]
View(train_pn)
test_imp_model <- train(test_formula, data=train_pn, method="naive_bayes", trControl=control,
importance = T)
importance <- varImp(test_imp_model, scale=FALSE)
importance
str(general_pn)
nrow(general_pn[duplicated(general_pn$u_mid),])
debugSource('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
specDate
lastdate
pred_day_result(lastdate,test_imp_model)
str(lastdate)
last.date.str
today_result = pred_day_result(test_imp_model)
debugSource('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
today_result = pred_day_result(test_imp_model)
debugSource('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
today_result = pred_day_result(test_imp_model)
View(general_today)
View(city)
View(city[dt == 20180131,])
View(city[city$dt == 20180131,])
today_result = pred_day_result(test_imp_model)
debugSource('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
today_result = pred_day_result(test_imp_model)
length(temp)
length(specDate)
nrow(general_today)
View(train_today)
View(train_today[is.na(train_today$city_perc),])
View(train_today[is.na(train_today$md_perc),])
str(temp)
View(temp)
View(temp[temp[[2]]>temp[[1]],])
temp[is.na(temp[[1]]),]
nrow(temp)
View(train_today[complete.cases(train_today),])
View(train_today[!complete.cases(train_today),])
temp = predict(training_model,newdata = train_today)
is.na(temp)
temp[is.na(temp)]
today_result = cbind(general_today,pred = temp,dt = specDate)
today_result = cbind(general_today,pred = temp)
today_result = cbind(general_today,dt = specDate)
View(today_result)
today_result = data.frame(general_today,pred = temp,dt = specDate)
length(general_today[complete.cases(general_today),"u_mid"])
today_result = data.frame(umid = general_today[complete.cases(general_today),"u_mid"],pred = temp,dt = specDate)
all(train_today == general_today[complete.cases(general_today),])
View(general_today)
all(train_today == general_today[complete.cases(general_today),-1])
nrow(general_today[complete.cases(general_today),-1])
all(train_today$pv == general_today[complete.cases(general_today),"pv"])
today_result = data.frame(umid = general_today[complete.cases(general_today),"u_mid"],pred = temp,dt = specDate)
source('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
today_result = pred_day_result(test_imp_model)
View(today_result)
View(model_result_all)
today_result = pred_day_result(naive_bayes_model_no_rate)
View(today_result)
today_result = pred_day_result(naive_bayes_model_no_rate)
View(today_result)
source('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
today_result = pred_day_result(naive_bayes_model_no_rate)
View(city)
View(model)
last.date.str
today_result = pred_day_result(naive_bayes_model_no_rate)
today_result = pred_day_result(naive_bayes_model_no_rate)
today_result = pred_day_result(naive_bayes_model_no_rate)
source('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
today_result = pred_day_result(naive_bayes_model_no_rate)
nrow(train_today)
nrow(general_today)
undebug(pred_day_result)
options()
options()$error
options(error)
?options
getOption("error")
options(error = NULL)
today_result = pred_day_result(naive_bayes_model_no_rate)
nrow(train_today)
nrow(general_today)
View(temp)
today_result = pred_day_result(naive_bayes_model_no_rate)
debugSource('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
today_result = pred_day_result(naive_bayes_model_no_rate)
View(today_result)
dbWriteTable(con,"test.test_umid",today_result)
str(today_result)
today_result_copy = today_result
library(openxlsx)
write.xlsx(today_result,"~/data/today_result.xlsx")
sign[sign==1]
View(today_result[today_result$sign == 1,])
View(today_result[today_result$sign == 1,])
debugSource('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
today_result = today_result[complete.cases(today_result),]
dbWriteTable(con,"test.test_umid_normal",today_result)
dbWriteTable(con,"test.test_umid_normal",today_result)
?dbWriteTable
str(today_result)
today_result$dt = as.character(today_result$dt)
str(today_result)
today_result$u_mid = as.character(today_result$umid)
today_result$umid = as.character(today_result$umid)
today_result$u_mid = NULL
colnames(today_result)[[1]] = "u_mid"
str(today_result)
round(9.45e-144)
?round
today_result$normal_prob = round(today_result$normal_prob,2)
today_result$abnorm_prob = round(today_result$abnorm_prob,2)
today_result_copy = today_result
today_result[] = lapply(today_result,as.character)
View(today_result)
View(today_result[today_result$abnorm_prob>0,])
dbWriteTable(con,"test.test_umid",today_result)
?dbWriteTable
dbWriteTable(con,"test.test_umid",today_result,overwrite = TRUE)
dbWriteTable(con,"test.test_umid",today_result,overwrite = TRUE,append = TRUE)
dbWriteTable(con,"test.test_umid",today_result,overwrite = TRUE,append = TRUE)
library(openxlsx)
write.xlsx(today_result,"~/data/today_results.xlsx")
source('~/R_Projects/abnormal_activity_analysis/Rfile/abnorm_test_online.R', encoding = 'UTF-8')
debugSource('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
source('~/R_Projects/abnormal_activity_analysis/Rfile/abnorm_test_online.R', encoding = 'UTF-8')
?dbConnect
dbDisconnect(con)
order_umid_sql = paste0("select distinct u_mid from ods.ods_tx_order_tx_order_dt o
inner join ods.ods_app_pageview_info a on
o.purchaser_id = a.u_id where substr(o.create_date,1,10)= '",spec.date.dash.str,"'
and o.order_status not in (1,7,19) and o.order_type=1 and a.l_city like '",city_name,"%'")
#get umid which revisit our app during a long time
last_long_umid_sql = "select distinct u_mid from
(select u_mid,(max(unix_timestamp(`system_time`, 'yyyy-MM-dd HH:mm:ss'))-min(unix_timestamp(`system_time`, 'yyyy-MM-dd HH:mm:ss')))/(3600*24) time_inv from dm.dm_app_pageview_info group by u_mid) t where time_inv>60"
qz_umid_sql = "select distinct u_mid from dm.dm_app_pageview_info where l_city in
('泉州','泉州市','quanzhou') and dt = '20171112' and path = 'z'"
wz_umid_sql = "select distinct u_mid from dm.dm_app_pageview_info where l_city in
('温州','温州市','wenzhou') and dt = '20171203' and path = 'z'"
dateset = c("20171112","20171203")
#negdateset should be the same, due to the function setting we don't need to specify the same date
umid_sql = c(qz_umid_sql,wz_umid_sql)
neg_umid_sql = c(order_umid_sql,last_long_umid_sql)
general_pn = get_advbase_set(umid_sql,neg_umid_sql,dateset,renew = TRUE,complexity = TRUE)
train_pn = preprocess_train_data(general_pn)
#model_nb_pn = naive_bayes(sign~.,train_pn[complete.cases(train_pn),])
naive_bayes_model = train(form = test_formula,data = train_pn,method = "naive_bayes",metric = metric,
trControl = control,preProcess = preProcess)
debugSource('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
order_umid_sql = paste0("select distinct u_mid from ods.ods_tx_order_tx_order_dt o
inner join ods.ods_app_pageview_info a on
o.purchaser_id = a.u_id where substr(o.create_date,1,10)= '",spec.date.dash.str,"'
and o.order_status not in (1,7,19) and o.order_type=1 and a.l_city like '",city_name,"%'")
#get umid which revisit our app during a long time
last_long_umid_sql = "select distinct u_mid from
(select u_mid,(max(unix_timestamp(`system_time`, 'yyyy-MM-dd HH:mm:ss'))-min(unix_timestamp(`system_time`, 'yyyy-MM-dd HH:mm:ss')))/(3600*24) time_inv from dm.dm_app_pageview_info group by u_mid) t where time_inv>60"
qz_umid_sql = "select distinct u_mid from dm.dm_app_pageview_info where l_city in
('泉州','泉州市','quanzhou') and dt = '20171112' and path = 'z'"
wz_umid_sql = "select distinct u_mid from dm.dm_app_pageview_info where l_city in
('温州','温州市','wenzhou') and dt = '20171203' and path = 'z'"
dateset = c("20171112","20171203")
#negdateset should be the same, due to the function setting we don't need to specify the same date
umid_sql = c(qz_umid_sql,wz_umid_sql)
neg_umid_sql = c(order_umid_sql,last_long_umid_sql)
general_pn = get_advbase_set(umid_sql,neg_umid_sql,dateset,renew = TRUE,complexity = TRUE)
train_pn = preprocess_train_data(general_pn)
#model_nb_pn = naive_bayes(sign~.,train_pn[complete.cases(train_pn),])
naive_bayes_model = train(form = test_formula,data = train_pn,method = "naive_bayes",metric = metric,
trControl = control,preProcess = preProcess)
# general_today = get_advbase_set(umid_sql,specDate = last.date.str)
# train_today = preprocess_train_data(general_today)
# temp = predict(naive_bayes_model,newdata = train_today)
today_result = pred_day_result(naive_bayes_model)
today_result = today_result[complete.cases(today_result),]
today_result$u_mid = as.character(today_result$u_mid)
today_result$dt = as.character(today_result$dt)
today_result$normal_prob = round(today_result$normal_prob,2)
today_result$abnorm_prob = round(today_result$abnorm_prob,2)
today_result[] = lapply(today_result,as.character)
dbDisconnect(con)
View(today_result)
View(today_result[today_result$sign==1,])
nrow(general_pn)
today_result = pred_day_result(naive_bayes_model)
source('~/Rfile/R_impala.R')
today_result = pred_day_result(naive_bayes_model)
nrow(general_today)
nrow(train_today)
today_result = pred_day_result(naive_bayes_model)
debugSource('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
today_result = pred_day_result(naive_bayes_model)
source('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
debugSource('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
today_result = pred_day_result(naive_bayes_model)
nrow(move)
nrow(base)
nrow(base_city_model_summary)
nrow(move)
View(today_result)
nrow(today_result[complete.cases(today_result),])
debugSource('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
today_result = pred_day_result(naive_bayes_model)
assign('temp_move',move,envir = .GlobalEnv)
renew
renew = FALSE
nrow(base_city_model)
nrow(base_city)
assign('temp_base_city',base_city,envir = .GlobalEnv)
nrow(base_city_model)
assign('temp_base_summary',base_city_model_summary,envir = .GlobalEnv)
nrow(base_city_model_summary)
nrow(base_city_model_summary)
specDate
nrow(move)
nrow(general_today)
nrow(general_today)
View(general_today)
today_result = pred_day_result(naive_bayes_model,"20180204",renew = FALSE)
assign('temp_move',move,envir = .GlobalEnv)
assign('temp_base_city',base_city,envir = .GlobalEnv)
assign('temp_base_summary',base_city_model_summary,envir = envir = .GlobalEnv)
assign('temp_base_summary',base_city_model_summary,envir = .GlobalEnv)
nrow(base_city_model_summary)
nrow(move)
nrow(base_city_model_move)
nrow(general_today)
assign('temp_general_today',general_today,envir = .GlobalEnv)
nrow(temp_general_today)
nrow(general_today)
assign('temp_complete_general_today',general_today,envir = .GlobalEnv)
View(train_today)
nrow(train_today)
assign('temp_pre_train_today',train_today,envir = envir = .GlobalEnv)
assign('temp_pre_train_today',train_today,envir = .GlobalEnv)
assign('temp_today_result',today_result,envir = .GlobalEnv)
View(temp_move[!(temp_move$u_mid %in% temp_base_summary$u_mid),])
View(temp_move[!(temp_move$u_mid %in% temp_base_city$u_mid),])
temp = read_data_impala_general("select * from dm.dm_app_pageview_info where u_mid = 'C7D8420F-4BA9-4EC1-BD74-D9CE5877CECD'")
dbDisconnect(con)
source('~/Rfile/R_impala.R')
source('~/Rfile/R_impala.R')
temp = read_data_impala_general("select * from dm.dm_app_pageview_info where u_mid = 'C7D8420F-4BA9-4EC1-BD74-D9CE5877CECD'")
View(temp)
View(temp)
1517712361 > 3600*1000*6
View(temp_general_today)
View(temp_general_today[!complete.cases(temp_general_today),])
View(temp_today_result)
View(temp_pre_train_today)
pickedColums
colnames(train_today)
nrow(train_today)
temp1 = predict(naive_bayes_model,train_today)
temp2 = predict(naive_bayes_model,train_today[,!(names(train_today) %in% "sign")])
all(temp1==temp2)
temp2 = predict(naive_bayes_model,train_today[,!(names(train_today) %in% c("sign","rate")])
temp2 = predict(naive_bayes_model,train_today[,!(names(train_today) %in% c("sign","rate"))])
all(temp1==temp2)
temp2 = predict(naive_bayes_model,train_today[,!(names(train_today) %in% c("sign","rate","city_perc"))])
View(temp_general_today[temp_general_today$u_mid == '0BAF2EBF-E0D2-4D4D-ABDD-609279D95F51',])
View(city[city$l_city == '合肥市'])
View(city[city$l_city == '合肥市',])
View(city[city$l_city == '合肥市' & city$dt == '20180204',])
View(temp_base_city[temp_base_city$u_mid == '0BAF2EBF-E0D2-4D4D-ABDD-609279D95F51',])
View(city[city$l_city == 'Suan Luang' & city$dt == '20180204',])
SQL
CITY_SQL
View(city)
today_result = pred_day_result(naive_bayes_model,specDate = '20180204',renew = FALSE)
sql
debugSource('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
?sum
debugSource('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
today_result = pred_day_result(naive_bayes_model,specDate = '20180204',renew = FALSE)
nrow(base)
View(base_city_model[!complete.cases(base_city_model),])
View(temp_base_city[!complete.cases(temp_base_city),])])
View(temp_base_city[!complete.cases(temp_base_city),])
View(city)
View(city[city$l_city == '北京市',][order(city$dt),])
View(city[order(city$dt),])
today_result = pred_day_result(naive_bayes_model,specDate = '20180204',renew = FALSE)
debugSource('~/R_Projects/abnormal_activity_analysis/Rfile/test_func.R', encoding = 'UTF-8')
today_result = pred_day_result(naive_bayes_model,specDate = '20180204',renew = FALSE)
View(base_city[complete.cases(base_city),])
View(base_city[!complete.cases(base_city),])
View(base_city_model[!complete.cases(base_city_model),])
View(base_city_model[,c(lapply(.SD[,sum_col,with=FALSE],sum,na.rm = TRUE),lapply(.SD[,avg_col,with=FALSE],mean,na.rm = TRUE),lapply(.SD[,min_col,with = FALSE],min,na.rm = TRUE),lapply(.SD[,max_col,with = FALSE],max,na.rm = TRUE)),by = "u_mid"])
base_city_model = merge(temp_base_city,model,by.x = c("d_model","dt"),by.y = c("d_model","dt"),all.x = TRUE)
base_city_model = data.table(base_city_model)
base_city_model_summary = base_city_model[,c(lapply(.SD[,sum_col,with=FALSE],sum,na.rm = TRUE),lapply(.SD[,avg_col,with=FALSE],mean,na.rm = TRUE),lapply(.SD[,min_col,with = FALSE],min,na.rm = TRUE),lapply(.SD[,max_col,with = FALSE],max,na.rm = TRUE)),by = "u_mid"]
View(base_city_model[!complete.cases(base_city_model),])
View(base_city_model_summary[!complete.cases(base_city_model_summary),])
nrow(base_city_model)
nrow(base_city_model_summary)
base_city_model = merge(base_city,model,by.x = c("d_model","dt"),by.y = c("d_model","dt"),all.x = TRUE)
base_city_model = data.table(base_city_model)
View(today_result)
View(today_result[today_result$sign == 1,])
getwd90
getwd()
setwd("~/R_Projects/abnormal_activity_analysis/package")
package.skeleton(name="abnorm_test_online_func",code_files="./test_func.R")
getwd()
?trainControl
?trainControl
source('~/R_Projects/abnormal_activity_analysis/package/test_func.R', encoding = 'UTF-8')
library(caret)
caret::trainControl()
caret::trainControl
package.skeleton(name="abnorm_test_online_func",code_files="./test_func.R")
package.skeleton(name="abnorm_test_online_func",code_files="./test_func.R")
package.skeleton(name="abnormTestOnlineFunc",code_files="./test_func.R")
list.files()
getwd()
library(roxygen2)
roxygenize("package1")
roxygenize("abnormTestOnlineFunc")
roxygenize("abnormTestOnlineFunc")
getwd()
setwd("~/R_Projects/abnormal_activity_analysis/Rfile")
package.skeleton(name="abnormTestOnlineFunc",code_files="./test_func.R")
?package.skeleton
list.files()
roxygenize("abnormTestOnlineFunc")
roxygenize("abnormTestOnlineFunc")
build("abnormTestOnlineFunc")
library(devtools)
build("abnormTestOnlineFunc")
install("abnormTestOnlineFunc")
getwd()
list.files("~")
cp
Sys.getenv()
path.expand(".")
Sys.getenv()
?Startup
R.home()
candidates <- c( Sys.getenv("R_PROFILE"),
file.path(Sys.getenv("R_HOME"), "etc", "Rprofile.site"),
Sys.getenv("R_PROFILE_USER"),
file.path(getwd(), ".Rprofile"))
file.exists(candidates)
candidates
getOption("repos")
getOption("repos")
R.version
R.Version()
library(lubridate)
?write.table
expand.path("~")
path.expand("~")
dir.create("~/result")
write.table(today_result,"~/result/today_result.txt",sep = "\t")
source('~/Rfile/R_impala.R')
View(today_result)
temp = read.table(file = "~/result.today_result.txt",sep = "\t")
temp = read.table(file = "~/result/today_result.txt",sep = "\t")
View(temp)
?write.table
today_result
today_result = temp
write.table(today_result,"~/result/today_result.txt",col.names = FALSE,row.names = FALSE,sep = "\t")
source('~/Rfile/R_hana.R', encoding = 'UTF-8')
source('~/Rfile/R_hana.R', encoding = 'UTF-8')
source('~/Rfile/R_hana.R', encoding = 'UTF-8')
source('~/Rfile/R_hana.R', encoding = 'UTF-8')
temp_sql = "select a.mall_code, --商场编码
c.mall_name, --商场名称
a.year_month, --年月
to_date(c.open_date) as open_date, --开业时间
days_between(to_date(c.open_date),to_date(a.year_month))/365 as age,
sum(a.AR_ACCRUAL_IN_THIS_MONTH) as finalprice,
sum(AR_ACCRUAL_PREF_APPROVED_IN_THIS_MONTH) as discount,
sum(case when category_name_1='家具' then a.AR_ACCRUAL_IN_THIS_MONTH else null end) as finalprice_jiaju, --加权面积
sum(case when category_name_1='家具' then AR_ACCRUAL_PREF_APPROVED_IN_THIS_MONTH else null end) as discount_jiaju,
sum(case when category_name_1='建材' then a.AR_ACCRUAL_IN_THIS_MONTH else null end) as finalprice_jiancai,
sum(case when category_name_1='建材' then AR_ACCRUAL_PREF_APPROVED_IN_THIS_MONTH else null end) as discount_jiancai,
sum(case when category_name_1='软装' then a.AR_ACCRUAL_IN_THIS_MONTH else null end) as finalprice_ruanzhuang,
sum(case when category_name_1='软装' then AR_ACCRUAL_PREF_APPROVED_IN_THIS_MONTH else null end) as discount_ruanzhuang,
sum(case when category_name_1='进口' then a.AR_ACCRUAL_IN_THIS_MONTH else null end) as finalprice_jinkou,
sum(case when category_name_1='进口' then AR_ACCRUAL_PREF_APPROVED_IN_THIS_MONTH else null end) as discount_jinkou,
sum(case when category_name_1='新业态' then a.AR_ACCRUAL_IN_THIS_MONTH else null end) as finalprice_xinyetai,
sum(case when category_name_1='新业态' then AR_ACCRUAL_PREF_APPROVED_IN_THIS_MONTH else null end) as discount_xinyetai
from 'REDSTAR_BI'.'CB_RENT_FULL_HISTORY' a
left join (select distinct contract_code, booth_type, category_name_1
from 'BIGBI'.'DIM_CONTRACT_BOOTH_DETAIL') b
on b.contract_code=a.contract_code
left join 'BIGBI'.'DIM_ALL_MALL_V3'  c
on a.mall_code=c.mall_code
where booth_type = '0090'
group by a.mall_code, --商场编码
c.mall_name, --商场名称
a.year_month,
c.open_date
order by a.year_month,a.mall_code"
temp = read_data_from_hana(temp_sql)
temp_sql = "select a.mall_code, --商场编码
c.mall_name, --商场名称
a.year_month, --年月
to_date(c.open_date) as open_date, --开业时间
days_between(to_date(c.open_date),to_date(a.year_month))/365 as age,
sum(a.AR_ACCRUAL_IN_THIS_MONTH) as finalprice,
sum(AR_ACCRUAL_PREF_APPROVED_IN_THIS_MONTH) as discount,
sum(case when category_name_1='家具' then a.AR_ACCRUAL_IN_THIS_MONTH else null end) as finalprice_jiaju, --加权面积
sum(case when category_name_1='家具' then AR_ACCRUAL_PREF_APPROVED_IN_THIS_MONTH else null end) as discount_jiaju,
sum(case when category_name_1='建材' then a.AR_ACCRUAL_IN_THIS_MONTH else null end) as finalprice_jiancai,
sum(case when category_name_1='建材' then AR_ACCRUAL_PREF_APPROVED_IN_THIS_MONTH else null end) as discount_jiancai,
sum(case when category_name_1='软装' then a.AR_ACCRUAL_IN_THIS_MONTH else null end) as finalprice_ruanzhuang,
sum(case when category_name_1='软装' then AR_ACCRUAL_PREF_APPROVED_IN_THIS_MONTH else null end) as discount_ruanzhuang,
sum(case when category_name_1='进口' then a.AR_ACCRUAL_IN_THIS_MONTH else null end) as finalprice_jinkou,
sum(case when category_name_1='进口' then AR_ACCRUAL_PREF_APPROVED_IN_THIS_MONTH else null end) as discount_jinkou,
sum(case when category_name_1='新业态' then a.AR_ACCRUAL_IN_THIS_MONTH else null end) as finalprice_xinyetai,
sum(case when category_name_1='新业态' then AR_ACCRUAL_PREF_APPROVED_IN_THIS_MONTH else null end) as discount_xinyetai
from REDSTAR_BI.CB_RENT_FULL_HISTORY a
left join (select distinct contract_code, booth_type, category_name_1
from BIGBI.DIM_CONTRACT_BOOTH_DETAIL) b
on b.contract_code=a.contract_code
left join BIGBI.DIM_ALL_MALL_V3  c
on a.mall_code=c.mall_code
where booth_type = '0090'
group by a.mall_code, --商场编码
c.mall_name, --商场名称
a.year_month,
c.open_date
order by a.year_month,a.mall_code"
temp = read_data_from_hana(temp_sql)
View(temp)
hana_data = read_data_from_hana("select * from REDSTAR_BI.BI_ORDER_BRAND_AVG")
View(hana_data)
temp_contract_detail = read_data_from_hana("select * from BIGBI.DIM_CONTRACT_BOOTH_DETAIL")

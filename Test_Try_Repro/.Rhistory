train_rent = readr::read_csv("~/data/train_rent.csv")
train_rent = readr::read_csv("~/data/rent_data/train_rent.csv")
test_rent = readr::read_csv("~/data/rent_data/test_rent.csv")
View(train_rent)
Sys.getlocale()
View(test_rent)
?readr::read_csv
Sys.setlocale(category = "LC_ALL", locale = "English_United States.1252")
View(train_rent)
train_rent = readr::read_csv("~/data/rent_data/train_rent.csv")
test_rent = readr::read_csv("~/data/rent_data/test_rent.csv")
View(train_rent)
View(test_rent)
Sys.setlocale(category = "LC_ALL", locale = "")
train_rent = readr::read_csv("~/data/rent_data/train_rent.csv")
test_rent = readr::read_csv("~/data/rent_data/test_rent.csv")
View(train_rent)
View(test_rent)
train_rent = readr::read_csv("~/data/rent_data/train_rent.csv",locale = locale(encoding = "UTF-8"))
train_rent = readr::read_csv("~/data/rent_data/train_rent.csv",locale = readr::locale(encoding = "UTF-8"))
View(train_rent)
?read.csv
train_rent = read.csv("~/data/rent_data/train_rent.csv",)
View(train_rent)
library(readr)
??readr
help(package = "readr")
iconvlist()
test_rent = read.csv("~/data/rent_data/test_rent.csv",fileEncoding = "UTF-8")
View(test_rent)
?read.csv
test_rent = read.table("~/data/rent_data/test_rent.csv",fileEncoding = "UTF-8",sep = ",")
View(test_rent)
test_rent = read.table("~/data/rent_data/test_rent.csv",fileEncoding = "UTF-8",sep = ",",header = TRUE,quote = "\"",fill = TRUE, comment.char = "")
test_rent = read.table("~/data/rent_data/test_rent.csv",fileEncoding = "GB18030",sep = ",",header = TRUE,quote = "\"",fill = TRUE, comment.char = "")
View(test_rent)
help(package = "stringr")
str_to_upper(names(train_rent))
names(train_rent) = str_to_upper(names(train_rent))
names(test_rent) = str_to_upper(names(test_rent))
train_rent = train_rent[,!(names(train_rent) %in% c("MALL_NAME","MALL_CODE","DATE_ID"))]
test_rent = test_rent[,!(names(test_rent) %in% c("MALL_NAME","MALL_CODE","DATE_ID"))]
require(gbm)
gbm_para_m = boosting_para(train_rent,test_rent)
?source
dirname(rstudioapi::getActiveDocumentContext()$path)
source("~/R_Projects/ensemble_method/Rfile/boosting_para.R")
gbm_para_m = boosting_para(train_rent,test_rent)
names(train_rent) = str_to_lower(names(train_rent))
names(test_rent) = str_to_lower(names(test_rent))
source("~/R_Projects/ensemble_method/Rfile/boosting_para.R")
require(gbm)
gbm_para_m = boosting_para(train_rent,test_rent)
source("~/R_Projects/SVM/Rfile/test_svm.R")
try_para = svm_para_percent(train_rent,test_rent)
View(try_para)
svm.model.beijing = svm(rent~.,data = train_beijing_svm,cost = 10,gamma = 0.00391,cross = 5,kernel = "polynomial")
svm.model.next = svm(rent~.,data = train_rent,cost = 10,gamma = 0.00391,cross = 5)
rentind = names(test_rent) == "rent"
svm.test.next = predict(svm.model.next,test_rent[,!rentind])
compare.result.svm = cbind(mall_name = test_mall_names,real_rent = test_rent$rent,pred_rent = svm.test.next)
train_rent = read.csv("~/data/rent_data/train_rent.csv")
test_rent = read.table("~/data/rent_data/test_rent.csv",fileEncoding = "GB18030",sep = ",",header = TRUE,quote = "\"",fill = TRUE, comment.char = "")
names(train_rent) = str_to_upper(names(train_rent))
names(test_rent) = str_to_upper(names(test_rent))
test_mall_names = test_rent[,"MALL_NAME"]
train_rent = train_rent[,!(names(train_rent) %in% c("MALL_NAME","MALL_CODE","DATE_ID"))]
test_rent = test_rent[,!(names(test_rent) %in% c("MALL_NAME","MALL_CODE","DATE_ID"))]
names(train_rent) = str_to_lower(names(train_rent))
names(test_rent) = str_to_lower(names(test_rent))
compare.result.svm = cbind(mall_name = test_mall_names,real_rent = test_rent$rent,pred_rent = svm.test.next)
compare.result.svm = data.table(compare.result.svm)
compare.result.svm[,c("real_rent","pred_rent"):=.(as.numeric(real_rent),as.numeric(pred_rent))]
compare.result.svm[,diff:=(real_rent-pred_rent)]
MSE.svm.MALLS = compare.result.svm[,.(pred_rent=sum(pred_rent),real_rent=sum(real_rent),svm_err = abs(sum(diff)),perc = sum(diff)/sum(real_rent)),by = "mall_name"]
MSE.svm = sum((svm.test.next - test_rent[,rentind])^2)/length(svm.test.next)
View(compare.result.svm)
View(MSE.svm.MALLS)
test_mall_names = as.character(test_mall_names)
compare.result.svm = cbind(mall_name = test_mall_names,real_rent = test_rent$rent,pred_rent = svm.test.next)
compare.result.svm = data.table(compare.result.svm)
compare.result.svm[,c("real_rent","pred_rent"):=.(as.numeric(real_rent),as.numeric(pred_rent))]
compare.result.svm[,diff:=(real_rent-pred_rent)]
MSE.svm.MALLS = compare.result.svm[,.(pred_rent=sum(pred_rent),real_rent=sum(real_rent),svm_err = abs(sum(diff)),perc = sum(diff)/sum(real_rent)),by = "mall_name"]
MSE.svm = sum((svm.test.next - test_rent[,rentind])^2)/length(svm.test.next)
View(MSE.svm.MALLS)
library(randomForest)
rf <- randomForest(rent ~ ., data=train_rent, ntree=10000, proximity=TRUE)
rentind = which(names(test_rent) %in% c("rent"))
rf.test.next= predict(rf,test_rent[-rentind])
compare.result.rf = cbind(mall_name = test_mall_names,real_rent = test_rent$rent,pred_rent = rf.test.next)
compare.result.rf = data.table(compare.result.rf)
compare.result.rf[,c("real_rent","pred_rent"):=.(as.numeric(real_rent),as.numeric(pred_rent))]
compare.result.rf[,diff:=(real_rent-pred_rent)]
MSE.rf.MALLS = compare.result.rf[,.(pred_rent=sum(pred_rent),real_rent=sum(real_rent),rf_err = abs(sum(diff)),perc = sum(diff)/sum(real_rent)),by = "mall_name"]
MSE.rf <- sum((test_rent$rent - rf.test.next)^2)/length(test_rent$rent)
MSE.all.MALLS = cbind(MSE.rf.MALLS,nn_perc = MSE.nn.MALLS$perc,svm_perc = MSE.svm.MALLS$perc,gbm_perc = MSE.svm.MALLS$perc)
View(MSE.rf.MALLS)
library(openxlsx)
write.xlsx(MSE.rf.MALLS,"~/data/rf_rent_result.xlsx")
write.xlsx(MSE.svm.MALLS,"~/data/svm_rent_result.xlsx")
source("~/R_Projects/neuralNetwork/Rfile/nn_para.R")
neuralnet_para_m = neuralnet_para(train_rent,test_rent)
install.packages("sklearn")
